/* eslint-disable prettier/prettier */
/* eslint-disable no-useless-escape */
/* eslint-disable prefer-template */
/* eslint-disable no-underscore-dangle */
/* eslint-disable no-undef */
/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { /* StaleWhileRevalidate , */ CacheFirst } from 'workbox-strategies';
import { cards, categories } from './cardData';
import { PUBLIC_URL } from './@core/constants';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

interface PrecacheObj {
  url: string,
  revision: string,
}

const otherContent = [
  { url: PUBLIC_URL + '/eye-button.png', revision: 'eye' },
  { url: PUBLIC_URL + '/play-button.png', revision: 'play' },
  { url: PUBLIC_URL + '/audio/cardflip.mp3', revision: 'cardflip' },
]

const imagesToCache = cards.reduce((acc: PrecacheObj[], elem) => {
  elem.map((el) => acc.push({ url: `${PUBLIC_URL}/${el.image}`, revision: el.image }));
  return acc;
}, []);

const soundsToCache = cards.reduce((acc: PrecacheObj[], elem) => {
  elem.map((el) => acc.push({ url: `${PUBLIC_URL}/${el.audioSrc}`, revision: el.audioSrc }));
  return acc;
}, []);

const categoriesImagesToCache = categories.reduce((acc: PrecacheObj[], elem) => {
  acc.push({ url: `${PUBLIC_URL}/${elem.image}`, revision: elem.image });
  return acc;
}, []);

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST.concat(
  otherContent,
  imagesToCache,
  categoriesImagesToCache,
  soundsToCache
)); // accepts [{url: string, revision: string}]

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
const imageExtensions = /.*\/.*\.(?:jpg|png|svg)$/;
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  imageExtensions, // ---regexp checks is it an image
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

const soundExtensions = /.*\/.*\.(?:mp3)$/;
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  soundExtensions, // ---regexp checks is it a sound
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: 'audio',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
