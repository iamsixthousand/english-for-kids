// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CardHolder component: matches snapshot 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="Header"
        style="background-image: url(/background.jpg);"
      >
        <div
          aria-hidden="true"
          class="SideBarOpenButton"
          data-testid="SideBarOpenButton"
          role="button"
        />
        <div
          class="ModeSelector"
        >
          <span
            class="ModeText"
          >
            TRAIN
          </span>
          <div
            class="Switch"
            style="position: relative; display: inline-block; text-align: left; opacity: 1; direction: ltr; border-radius: 10px; transition: opacity 0.25s; user-select: none;"
          >
            <div
              class="react-switch-bg"
              style="height: 20px; width: 48px; margin: 0px; position: relative; background: rgb(136, 136, 136); border-radius: 10px; cursor: pointer; transition: background 0.25s;"
            />
            <div
              class="react-switch-handle"
              style="height: 18px; width: 18px; background: rgb(255, 255, 255); display: inline-block; cursor: pointer; border-radius: 50%; position: absolute; transform: translateX(1px); top: 1px; outline: 0; box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2); border: 0px; transition: background-color 0.25s, transform 0.25s, box-shadow 0.15s;"
            />
            <input
              aria-checked="false"
              data-testid="SwitchElement"
              role="switch"
              style="border: 0px; height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;"
              type="checkbox"
            />
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="Header"
      style="background-image: url(/background.jpg);"
    >
      <div
        aria-hidden="true"
        class="SideBarOpenButton"
        data-testid="SideBarOpenButton"
        role="button"
      />
      <div
        class="ModeSelector"
      >
        <span
          class="ModeText"
        >
          TRAIN
        </span>
        <div
          class="Switch"
          style="position: relative; display: inline-block; text-align: left; opacity: 1; direction: ltr; border-radius: 10px; transition: opacity 0.25s; user-select: none;"
        >
          <div
            class="react-switch-bg"
            style="height: 20px; width: 48px; margin: 0px; position: relative; background: rgb(136, 136, 136); border-radius: 10px; cursor: pointer; transition: background 0.25s;"
          />
          <div
            class="react-switch-handle"
            style="height: 18px; width: 18px; background: rgb(255, 255, 255); display: inline-block; cursor: pointer; border-radius: 50%; position: absolute; transform: translateX(1px); top: 1px; outline: 0; box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2); border: 0px; transition: background-color 0.25s, transform 0.25s, box-shadow 0.15s;"
          />
          <input
            aria-checked="false"
            data-testid="SwitchElement"
            role="switch"
            style="border: 0px; height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;"
            type="checkbox"
          />
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
