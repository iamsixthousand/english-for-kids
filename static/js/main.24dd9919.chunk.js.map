{"version":3,"sources":["components/PageInfoBlock/PageInfoBlock.tsx","@core/constants.ts","components/Card/CategoryCard/CategoryCard.tsx","@core/functions.ts","components/Card/ItemCard/ItemCard.tsx","cardData.ts","components/Cardholder/CardHolder.tsx","components/StatsBlock/StatsBlock.tsx","components/MainPage/MainPage.tsx","components/Header/Header.tsx","components/SideBar/SideBar.tsx","components/ResultScreen/ResultScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PageInfoBlock","textSeen","otherText","isGameStarted","isPlaying","id","undefined","newGameFunc","restartGameFunc","replayWord","useState","language","setLanguage","useEffect","window","scrollTo","lang","i18next","init","lng","resources","data","className","t","type","onClick","PUBLIC_URL","process","CategoryCard","title","image","alt","src","randomizerFunc","Math","random","toArrayId","Number","audioPlayFunc","publicURL","mode","sound","Audio","oncanplay","pause","currentTime","play","timeOutAudio","ItemCard","word","translation","audio","inGameAnswer","isFlipped","setIsFlipped","audioPlay","flipOnMouseLeaveOrClick","onMouseLeave","role","tabIndex","onKeyDown","style","border","backgroundColor","categories","cards","audioSrc","CardHolder","isBlocking","gameStepsFunc","onbeforeunload","when","message","map","elem","i","indexToId","to","StatsBlock","answers","innerWidth","setInnerWidth","setWindowInnerWidth","addEventListener","removeEventListener","el","filter","length","MainPage","gameStartedToggle","resultScreenVisibilityToggle","getResult","setIsBlockingToggle","setAnswer","idParam","useParams","cardsArrS","useRef","finalResult","cardIndex","correctAnswers","answersCount","clearAll","current","resultScreenShow","maxPercent","startGameFunc","slice","sort","EO","cardsArray","chancesGiven","maxCorrectAnswers","correctAudioSrc","errorAudioSrc","setAnswerFunc","resultShowFunc","target","dataset","prevAnswers","setTimeout","gameMainFunction","Header","sideBarToggle","setModeToggle","backgroundImage","onHandleColor","onColor","uncheckedIcon","checkedIcon","checked","onChange","height","width","handleDiameter","boxShadow","activeBoxShadow","SideBar","cbToggle","display","flexDirection","justifyContent","marginTop","ResultScreen","viewResultScreen","App","isPlayingToggle","sideBarVisible","changeSideBarVisibility","setIsGameStarted","setViewResultScreen","setIsBlocking","result","setResult","setMode","res","flag","basename","backgroundRepeat","backgroundAttachment","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","a","navigator","serviceWorker","register","reg","console","log"],"mappings":"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","file":"static/js/main.24dd9919.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport i18next from 'i18next';\nimport './PageInfoBlock.scss';\nimport data from '../../en.json';\n\ninterface PageInfoBlockProps {\n  isPlaying: boolean;\n  id: string;\n  newGameFunc: () => void;\n  isGameStarted: boolean;\n  restartGameFunc: () => void;\n  replayWord: () => void;\n}\n\nexport const PageInfoBlock: React.FC<PageInfoBlockProps> = ({\n  isGameStarted,\n  isPlaying,\n  id = undefined,\n  newGameFunc,\n  restartGameFunc,\n  replayWord,\n}) => {\n  let textSeen: string;\n  let otherText: string;\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      window.scrollTo(0, 0);\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  switch (id) {\n    case '1':\n      textSeen = 'Action (Set A)';\n      break;\n    case '2':\n      textSeen = 'Action (Set B)';\n      break;\n    case '3':\n      textSeen = 'Animal (Set A)';\n      break;\n    case '4':\n      textSeen = 'Animal (Set B)';\n      break;\n    case '5':\n      textSeen = 'Clothes';\n      break;\n    case '6':\n      textSeen = 'Emotions';\n      break;\n    default:\n      textSeen = '';\n      break;\n  }\n\n  switch (isPlaying) {\n    case true:\n      otherText = 'Now show your skills!';\n      break;\n    default:\n      otherText = 'Feel free to practice!';\n  }\n\n  return (\n    <div className=\"InteractiveBlock\">\n      <div>\n        <div className=\"InteractiveBox\">{!id && <h1>{i18next.t('hello')}</h1>}</div>\n        <div className=\"InteractiveBox mini\">{!id && <h2>{i18next.t('chooseCategory')}</h2>}</div>\n        <div className={`InteractiveBox${id ? '' : ' mini'}`}>\n          <h1>{id && `${textSeen} category. ${otherText}`}</h1>\n        </div>\n      </div>\n      <div className={`ButtonContainer${isPlaying && id && !isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`StartGameButton${isGameStarted || !isPlaying ? ' hide' : ''}`}\n          onClick={newGameFunc}\n        >\n          {i18next.t('start!')}\n        </button>\n      </div>\n      <div className={`inGameButtonsContainer${id && isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`RestartGameButton${isGameStarted ? '' : ' hide'}`}\n          onClick={restartGameFunc}\n        >\n          {i18next.t('restart')}\n        </button>\n        <button\n          type=\"button\"\n          className={`ReplayButton${isGameStarted ? '' : ' hide'}`}\n          onClick={replayWord}\n        >\n          {i18next.t('replay')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const { PUBLIC_URL } = process.env;\n\nexport const correctAudioSrc = 'audio/correct.mp3';\nexport const errorAudioSrc = 'audio/error.mp3';\n","import React from 'react';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport './CategoryCard.scss';\n\ninterface CategoryCardProps {\n  title: string;\n  image: string;\n  isPlaying: boolean;\n}\n\nexport const CategoryCard: React.FC<CategoryCardProps> = ({ isPlaying, title, image }) => {\n  return (\n    <div className=\"CategoryCard\">\n      {isPlaying}\n      <div className=\"CardImageContainer\">\n        <img className=\"CardImage\" alt={title} src={`${PUBLIC_URL}/${image}`} />\n      </div>\n      <div className=\"CategoryText\">{title}</div>\n    </div>\n  );\n};\n","/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport { WordCard } from './interfaces';\n\ntype RandomizerFunc = () => number;\n// eslint-disable-next-line no-unused-vars\ntype ToArrayId = (id: string) => number;\n// eslint-disable-next-line no-unused-vars\ntype AudioFunc = (publicURL: string, src: string, mode: boolean) => void;\n// eslint-disable-next-line no-unused-vars\ntype SetAnswerFunc = (value: React.SetStateAction<boolean[]>) => void;\n\n/* eslint-disable */\ninterface GameFunction {\n  (\n    EO: React.MouseEvent | undefined,\n    cardsArray: React.MutableRefObject<WordCard[]>,\n    cardIndex: React.MutableRefObject<number>,\n    answersCount: React.MutableRefObject<number>,\n    chancesGiven: number,\n    correctAnswers: React.MutableRefObject<number>,\n    maxCorrectAnswers: number,\n    publicURL: string,\n    correctAudioSrc: string,\n    errorAudioSrc: string,\n    setAnswerFunc: SetAnswerFunc,\n    resultShowFunc: () => void\n  ): void;\n}\n/* eslint-enable */\n\nexport const randomizerFunc: RandomizerFunc = () => Math.random() - 0.5;\n// to randomize sort method\nexport const toArrayId: ToArrayId = (id: string) => Number(id) - 1;\n// to give useParam id a number value and decrease by 1 to match an array index\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const audioPlayFunc: AudioFunc = (publicURL, src, mode) => {\n  const sound = new Audio(`${publicURL}/${src}`);\n  sound.oncanplay = () => {\n    if (mode) {\n      sound.pause();\n      sound.currentTime = 0;\n      sound.play();\n    } else {\n      sound.pause();\n      sound.currentTime = 0;\n    }\n  };\n};\n\nlet timeOutAudio = false; // flag shows that we have a timed out audio\n// to play audio\n/* eslint-disable no-param-reassign */\nexport const gameMainFunction: GameFunction = (\n  EO,\n  cardsArray,\n  cardIndex,\n  answersCount,\n  chancesGiven,\n  correctAnswers,\n  maxCorrectAnswers,\n  publicURL,\n  correctAudioSrc,\n  errorAudioSrc,\n  setAnswerFunc,\n  resultShowFunc\n) => {\n  if (\n    cardsArray.current.length >= cardIndex.current + 1 &&\n    answersCount.current < chancesGiven &&\n    correctAnswers.current < maxCorrectAnswers\n  ) {\n    if (\n      (EO?.target as HTMLDivElement).dataset.word === cardsArray.current[cardIndex.current].word\n    ) {\n      timeOutAudio = false;\n      audioPlayFunc(publicURL, correctAudioSrc, false);\n      audioPlayFunc(publicURL, correctAudioSrc, true);\n      correctAnswers.current += 1;\n      setAnswerFunc((prevAnswers) => [...prevAnswers, true]);\n      cardIndex.current += 1;\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        timeOutAudio = false;\n        audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, false);\n        audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n      } else resultShowFunc();\n    } else {\n      audioPlayFunc(publicURL, errorAudioSrc, false);\n      audioPlayFunc(publicURL, errorAudioSrc, true);\n      setAnswerFunc((prevAnswers) => [...prevAnswers, false]);\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        if (!timeOutAudio) {\n          timeOutAudio = true;\n          setTimeout(() => {\n            audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, false);\n            audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n            timeOutAudio = false;\n          }, 1000);\n        }\n      } else resultShowFunc();\n    }\n  } else resultShowFunc();\n};\n// главная функция в игровом режиме\n/* eslint-enable */\n","import React, { useState } from 'react';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport { audioPlayFunc } from '../../../@core/functions';\nimport './ItemCard.scss';\n\ninterface ItemCardProps {\n  word: string;\n  translation: string;\n  audio: string;\n  image: string;\n  isPlaying: boolean;\n  inGameAnswer: () => void;\n  isGameStarted: boolean;\n}\n\nexport const ItemCard: React.FC<ItemCardProps> = ({\n  isPlaying,\n  word,\n  translation,\n  audio,\n  image,\n  inGameAnswer,\n  isGameStarted,\n}) => {\n  const [isFlipped, setIsFlipped] = useState<boolean>(false);\n  const audioPlay = () => {\n    if (!isPlaying) {\n      audioPlayFunc(PUBLIC_URL, audio, false);\n      audioPlayFunc(PUBLIC_URL, audio, true);\n    }\n  };\n  const cardFlipper = () => {\n    audioPlayFunc(PUBLIC_URL, 'audio/cardflip.mp3', false);\n    audioPlayFunc(PUBLIC_URL, 'audio/cardflip.mp3', true);\n    setIsFlipped(!isFlipped);\n  };\n  const flipOnMouseLeaveOrClick = () => {\n    if (isFlipped === true) setIsFlipped(false);\n  };\n\n  return (\n    <div data-role=\"Mask\" onMouseLeave={flipOnMouseLeaveOrClick}>\n      <div className={`CardContainer${!isFlipped ? '' : ' flipped'}`}>\n        <div className=\"ItemCard front\">\n          <div\n            role=\"button\"\n            className={`CardImageContainer${!isPlaying ? '' : ' play'}`}\n            tabIndex={0}\n            data-word={word}\n            onKeyDown={audioPlay}\n            onClick={!isGameStarted ? audioPlay : inGameAnswer}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel\">\n              <button\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={audioPlay}\n              >\n                <img\n                  className=\"ControlPanelPlayButton\"\n                  alt=\"play-sound\"\n                  src={`${PUBLIC_URL}/play-button.png`}\n                />\n              </button>\n              <span className=\"ControlPanelText\">{word}</span>\n              <button\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={cardFlipper}\n              >\n                <img\n                  className=\"ControlPanelEyeButton\"\n                  alt=\"watch-translation\"\n                  src={`${PUBLIC_URL}/eye-button.png`}\n                />\n              </button>\n            </div>\n          )}\n        </div>\n        <div className=\"ItemCard back\">\n          <div\n            role=\"button\"\n            className=\"CardImageContainer\"\n            tabIndex={0}\n            onKeyDown={flipOnMouseLeaveOrClick}\n            onClick={flipOnMouseLeaveOrClick}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel flipped\">\n              <span className=\"ControlPanelText\">{translation}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","interface Categories {\n  title: string;\n  image: string;\n}\n\ninterface Card {\n  word: string;\n  translation: string;\n  image: string;\n  audioSrc: string;\n}\n\ntype Cards = Card[];\n\nexport const categories: Categories[] = [\n  {\n    title: 'Action (set A)',\n    image: 'img/action-set-a.jpg',\n  },\n  {\n    title: 'Action (set B)',\n    image: 'img/action-set-b.jpg',\n  },\n  {\n    title: 'Animal (set A)',\n    image: 'img/animal-set-a.jpg',\n  },\n  {\n    title: 'Animal (set B)',\n    image: 'img/animal-set-b.jpg',\n  },\n  {\n    title: 'Clothes',\n    image: 'img/clothes.jpg',\n  },\n  {\n    title: 'Emotions',\n    image: 'img/emotions.jpg',\n  },\n];\n\nexport const cards: Cards[] = [\n  [\n    {\n      word: 'cry',\n      translation: 'плакать',\n      image: 'img/cry.jpg',\n      audioSrc: 'audio/cry.mp3',\n    },\n    {\n      word: 'dance',\n      translation: 'танцевать',\n      image: 'img/dance.jpg',\n      audioSrc: 'audio/dance.mp3',\n    },\n    {\n      word: 'dive',\n      translation: 'нырять',\n      image: 'img/dive.jpg',\n      audioSrc: 'audio/dive.mp3',\n    },\n    {\n      word: 'draw',\n      translation: 'рисовать',\n      image: 'img/draw.jpg',\n      audioSrc: 'audio/draw.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'ловить рыбу',\n      image: 'img/fish.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'fly',\n      translation: 'летать',\n      image: 'img/fly.jpg',\n      audioSrc: 'audio/fly.mp3',\n    },\n    {\n      word: 'hug',\n      translation: 'обнимать',\n      image: 'img/hug.jpg',\n      audioSrc: 'audio/hug.mp3',\n    },\n    {\n      word: 'jump',\n      translation: 'прыгать',\n      image: 'img/jump.jpg',\n      audioSrc: 'audio/jump.mp3',\n    },\n  ],\n  [\n    {\n      word: 'open',\n      translation: 'открывать',\n      image: 'img/open.jpg',\n      audioSrc: 'audio/open.mp3',\n    },\n    {\n      word: 'play',\n      translation: 'играть',\n      image: 'img/play.jpg',\n      audioSrc: 'audio/play.mp3',\n    },\n    {\n      word: 'point',\n      translation: 'указывать',\n      image: 'img/point.jpg',\n      audioSrc: 'audio/point.mp3',\n    },\n    {\n      word: 'ride',\n      translation: 'ездить',\n      image: 'img/ride.jpg',\n      audioSrc: 'audio/ride.mp3',\n    },\n    {\n      word: 'run',\n      translation: 'бегать',\n      image: 'img/run.jpg',\n      audioSrc: 'audio/run.mp3',\n    },\n    {\n      word: 'sing',\n      translation: 'петь',\n      image: 'img/sing.jpg',\n      audioSrc: 'audio/sing.mp3',\n    },\n    {\n      word: 'skip',\n      translation: 'пропускать, прыгать',\n      image: 'img/skip.jpg',\n      audioSrc: 'audio/skip.mp3',\n    },\n    {\n      word: 'swim',\n      translation: 'плавать',\n      image: 'img/swim.jpg',\n      audioSrc: 'audio/swim.mp3',\n    },\n  ],\n  [\n    {\n      word: 'cat',\n      translation: 'кот',\n      image: 'img/cat.jpg',\n      audioSrc: 'audio/cat.mp3',\n    },\n    {\n      word: 'chick',\n      translation: 'цыплёнок',\n      image: 'img/chick.jpg',\n      audioSrc: 'audio/chick.mp3',\n    },\n    {\n      word: 'chicken',\n      translation: 'курица',\n      image: 'img/chicken.jpg',\n      audioSrc: 'audio/chicken.mp3',\n    },\n    {\n      word: 'dog',\n      translation: 'собака',\n      image: 'img/dog.jpg',\n      audioSrc: 'audio/dog.mp3',\n    },\n    {\n      word: 'horse',\n      translation: 'лошадь',\n      image: 'img/horse.jpg',\n      audioSrc: 'audio/horse.mp3',\n    },\n    {\n      word: 'pig',\n      translation: 'свинья',\n      image: 'img/pig.jpg',\n      audioSrc: 'audio/pig.mp3',\n    },\n    {\n      word: 'rabbit',\n      translation: 'кролик',\n      image: 'img/rabbit.jpg',\n      audioSrc: 'audio/rabbit.mp3',\n    },\n    {\n      word: 'sheep',\n      translation: 'овца',\n      image: 'img/sheep.jpg',\n      audioSrc: 'audio/sheep.mp3',\n    },\n  ],\n  [\n    {\n      word: 'bird',\n      translation: 'птица',\n      image: 'img/bird.jpg',\n      audioSrc: 'audio/bird.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'рыба',\n      image: 'img/fish1.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'frog',\n      translation: 'жаба',\n      image: 'img/frog.jpg',\n      audioSrc: 'audio/frog.mp3',\n    },\n    {\n      word: 'giraffe',\n      translation: 'жирафа',\n      image: 'img/giraffe.jpg',\n      audioSrc: 'audio/giraffe.mp3',\n    },\n    {\n      word: 'lion',\n      translation: 'лев',\n      image: 'img/lion.jpg',\n      audioSrc: 'audio/lion.mp3',\n    },\n    {\n      word: 'mouse',\n      translation: 'мышь',\n      image: 'img/mouse.jpg',\n      audioSrc: 'audio/mouse.mp3',\n    },\n    {\n      word: 'turtle',\n      translation: 'черепаха',\n      image: 'img/turtle.jpg',\n      audioSrc: 'audio/turtle.mp3',\n    },\n    {\n      word: 'dolphin',\n      translation: 'дельфин',\n      image: 'img/dolphin.jpg',\n      audioSrc: 'audio/dolphin.mp3',\n    },\n  ],\n  [\n    {\n      word: 'skirt',\n      translation: 'юбка',\n      image: 'img/skirt.jpg',\n      audioSrc: 'audio/skirt.mp3',\n    },\n    {\n      word: 'pants',\n      translation: 'брюки',\n      image: 'img/pants.jpg',\n      audioSrc: 'audio/pants.mp3',\n    },\n    {\n      word: 'blouse',\n      translation: 'блузка',\n      image: 'img/blouse.jpg',\n      audioSrc: 'audio/blouse.mp3',\n    },\n    {\n      word: 'dress',\n      translation: 'платье',\n      image: 'img/dress.jpg',\n      audioSrc: 'audio/dress.mp3',\n    },\n    {\n      word: 'boot',\n      translation: 'ботинок',\n      image: 'img/boot.jpg',\n      audioSrc: 'audio/boot.mp3',\n    },\n    {\n      word: 'shirt',\n      translation: 'рубашка',\n      image: 'img/shirt.jpg',\n      audioSrc: 'audio/shirt.mp3',\n    },\n    {\n      word: 'coat',\n      translation: 'пальто',\n      image: 'img/coat.jpg',\n      audioSrc: 'audio/coat.mp3',\n    },\n    {\n      word: 'shoe',\n      translation: 'туфли',\n      image: 'img/shoe.jpg',\n      audioSrc: 'audio/shoe.mp3',\n    },\n  ],\n  [\n    {\n      word: 'sad',\n      translation: 'грустный',\n      image: 'img/sad.jpg',\n      audioSrc: 'audio/sad.mp3',\n    },\n    {\n      word: 'angry',\n      translation: 'сердитый',\n      image: 'img/angry.jpg',\n      audioSrc: 'audio/angry.mp3',\n    },\n    {\n      word: 'happy',\n      translation: 'счастливый',\n      image: 'img/happy.jpg',\n      audioSrc: 'audio/happy.mp3',\n    },\n    {\n      word: 'tired',\n      translation: 'уставший',\n      image: 'img/tired.jpg',\n      audioSrc: 'audio/tired.mp3',\n    },\n    {\n      word: 'surprised',\n      translation: 'удивлённый',\n      image: 'img/surprised.jpg',\n      audioSrc: 'audio/surprised.mp3',\n    },\n    {\n      word: 'scared',\n      translation: 'испуганный',\n      image: 'img/scared.jpg',\n      audioSrc: 'audio/scared.mp3',\n    },\n    {\n      word: 'smile',\n      translation: 'улыбка',\n      image: 'img/smile.jpg',\n      audioSrc: 'audio/smile.mp3',\n    },\n    {\n      word: 'laugh',\n      translation: 'смех',\n      image: 'img/laugh.jpg',\n      audioSrc: 'audio/laugh.mp3',\n    },\n  ],\n];\n","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Prompt } from 'react-router';\nimport { CategoryCard } from '../Card/CategoryCard/CategoryCard';\nimport { ItemCard } from '../Card/ItemCard/ItemCard';\nimport { categories, cards } from '../../cardData';\nimport { toArrayId } from '../../@core/functions';\nimport './CardHolder.scss';\n\ninterface CardHolderProps {\n  isPlaying: boolean;\n  id: string;\n  isGameStarted: boolean;\n  gameStepsFunc: () => void;\n  isBlocking: boolean;\n}\n\nexport const CardHolder: React.FC<CardHolderProps> = ({\n  isBlocking,\n  isPlaying,\n  id,\n  isGameStarted,\n  gameStepsFunc,\n}) => {\n  useEffect(() => {\n    if (isGameStarted) {\n      window.onbeforeunload = () => true;\n    } else {\n      window.onbeforeunload = null;\n    }\n  });\n\n  return (\n    <>\n      <Prompt when={isBlocking} message=\"You will lose your result. Are you sure?\" />\n      <div className={`CardHolder${!id ? '' : ' word'}`}>\n        {!id &&\n          categories.map((elem, i) => {\n            const indexToId = i + 1; // for array index to match route\n            return (\n              <div className=\"Card\" key={elem.title}>\n                <Link to={`category/${indexToId}`} className=\"Link\">\n                  <CategoryCard isPlaying={isPlaying} title={elem.title} image={elem.image} />\n                </Link>\n              </div>\n            );\n          })}\n        {id &&\n          cards[toArrayId(id)].map((elem) => {\n            return (\n              <ItemCard\n                inGameAnswer={gameStepsFunc}\n                isPlaying={isPlaying}\n                word={elem.word}\n                translation={elem.translation}\n                image={elem.image}\n                audio={elem.audioSrc}\n                key={elem.word}\n                isGameStarted={isGameStarted}\n              />\n            );\n          })}\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport i18next from 'i18next';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport data from '../../en.json';\nimport './StatsBlock.scss';\n\nexport interface StatsBlockProps {\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  id: string;\n  answers: boolean[];\n}\n\nexport const StatsBlock: React.FC<StatsBlockProps> = ({ answers, isGameStarted, id }) => {\n  const [innerWidth, setInnerWidth] = useState<number>(1600);\n  const [language, setLanguage] = useState('en');\n  const triggerWidth = 820; // changes stats block style at this point\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  function setWindowInnerWidth(): void {\n    setInnerWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  });\n\n  useEffect(() => {\n    setInnerWidth(window.innerWidth);\n    window.addEventListener('load', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  }, []);\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`StatsBlockContainer${innerWidth <= triggerWidth ? ' mini' : ''}`}>\n      {innerWidth > triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('answers')}</span>\n          </div>\n          {isGameStarted &&\n            answers.map((el, i) => {\n              return (\n                <div className=\"IconContainer\" key={`key${i + 1}`}>\n                  <img\n                    className=\"Icon\"\n                    alt={`icon${i}`}\n                    src={`${PUBLIC_URL}/img/${el === true ? 'correct.png' : 'wrong.png'}`}\n                  />\n                </div>\n              );\n            })}\n        </div>\n      )}\n      {innerWidth <= triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game mini' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('correct')}</span>\n          </div>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('wrong')}</span>\n          </div>\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game correct' : ''}`}>\n              {answers.filter((el) => el === true).length}\n            </div>\n          )}\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game wrong' : ''}`}>\n              {answers.filter((el) => el === false).length}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PageInfoBlock } from '../PageInfoBlock/PageInfoBlock';\nimport { CardHolder } from '../Cardholder/CardHolder';\nimport { StatsBlock } from '../StatsBlock/StatsBlock';\nimport { cards } from '../../cardData';\nimport { randomizerFunc, toArrayId, audioPlayFunc, gameMainFunction } from '../../@core/functions';\nimport { GetResult, MatchParams, WordCard } from '../../@core/interfaces';\nimport { PUBLIC_URL, correctAudioSrc, errorAudioSrc } from '../../@core/constants';\nimport './MainPage.scss';\n\ninterface MainPageProps {\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  gameStartedToggle: () => void;\n  resultScreenVisibilityToggle: () => void;\n  getResult: GetResult;\n  isBlocking: boolean;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const MainPage: React.FC<MainPageProps> = ({\n  isBlocking,\n  isPlaying,\n  isGameStarted,\n  gameStartedToggle,\n  resultScreenVisibilityToggle,\n  getResult,\n  setIsBlockingToggle,\n}) => {\n  const [answers, setAnswer] = useState<boolean[]>([]);\n  const idParam = useParams<MatchParams>();\n\n  const cardsArrS = useRef<WordCard[]>([]);\n  const finalResult = useRef<string>('');\n  const cardIndex = useRef<number>(0);\n  const correctAnswers = useRef<number>(0);\n  const answersCount = useRef<number>(0);\n\n  const chancesGiven = 10; // количество ответов\n  const maxCorrectAnswers = 8; // максимальное количество правильных ответов\n  const maxPercent = 100;\n\n  const clearAll = () => {\n    setAnswer([]);\n    cardsArrS.current = [];\n    cardIndex.current = 0;\n    answersCount.current = 0;\n    finalResult.current = '';\n    correctAnswers.current = 0;\n  };\n\n  const resultScreenShow = () => {\n    finalResult.current = `${(maxPercent / maxCorrectAnswers) * correctAnswers.current}%`;\n    getResult(finalResult.current);\n    resultScreenVisibilityToggle();\n    setIsBlockingToggle(false);\n  };\n\n  const gameStepsFunc = (EO?: React.MouseEvent) => {\n    gameMainFunction(\n      EO,\n      cardsArrS,\n      cardIndex,\n      answersCount,\n      chancesGiven,\n      correctAnswers,\n      maxCorrectAnswers,\n      PUBLIC_URL,\n      correctAudioSrc,\n      errorAudioSrc,\n      setAnswer,\n      resultScreenShow\n    );\n  };\n\n  const startGameFunc = () => {\n    cardsArrS.current = cards[toArrayId(idParam.id)].slice().sort(randomizerFunc);\n    if (cardsArrS) audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const replayWord = () => {\n    audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const restartGameFunc = () => {\n    clearAll();\n    startGameFunc();\n  };\n\n  const newGameFunc = () => {\n    clearAll();\n    gameStartedToggle();\n    startGameFunc();\n    setIsBlockingToggle(true);\n  };\n\n  useEffect(() => {\n    clearAll();\n    setIsBlockingToggle(false);\n    if (isGameStarted) gameStartedToggle();\n  }, [idParam.id]);\n\n  return (\n    <div className=\"MainPage\">\n      <PageInfoBlock\n        isGameStarted={isGameStarted}\n        isPlaying={isPlaying}\n        id={idParam.id}\n        newGameFunc={newGameFunc}\n        restartGameFunc={restartGameFunc}\n        replayWord={replayWord}\n      />\n      <CardHolder\n        isBlocking={isBlocking}\n        isPlaying={isPlaying}\n        id={idParam.id}\n        isGameStarted={isGameStarted}\n        gameStepsFunc={gameStepsFunc}\n      />\n      {isPlaying && (\n        <StatsBlock\n          answers={answers}\n          isPlaying={isPlaying}\n          isGameStarted={isGameStarted}\n          id={idParam.id}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport Switch from 'react-switch';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport './Header.scss';\n\ninterface HeaderProps {\n  sideBarToggle: () => void;\n  setModeToggle: () => void;\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const Header: React.FC<HeaderProps> = ({\n  setIsBlockingToggle,\n  isGameStarted,\n  isPlaying,\n  sideBarToggle,\n  setModeToggle,\n}) => {\n  const checkToggle = () => {\n    if (isGameStarted && isPlaying) {\n      setIsBlockingToggle(false);\n      setModeToggle();\n    } else setModeToggle();\n  };\n  return (\n    <div className=\"Header\" style={{ backgroundImage: `url(${PUBLIC_URL}/background.jpg)` }}>\n      <div role=\"button\" className=\"SideBarOpenButton\" onClick={sideBarToggle} aria-hidden=\"true\">\n        |||\n      </div>\n      <div className=\"ModeSelector\">\n        <span className=\"ModeText\">{isPlaying ? 'PLAY' : 'TRAIN'}</span>\n        <Switch\n          onHandleColor=\"#FFFFFF\"\n          onColor=\"#99AE99\"\n          uncheckedIcon={false}\n          checkedIcon={false}\n          checked={isPlaying}\n          className=\"Switch\"\n          onChange={checkToggle}\n          height={20}\n          width={48}\n          handleDiameter={18}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.2)\"\n          activeBoxShadow=\"0px 0px 1px 5px rgba(0, 52, 0, 0.4)\"\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { categories } from '../../cardData';\nimport './SideBar.scss';\n\ninterface SideBarProps {\n  isPlaying: boolean;\n  cbToggle: () => void;\n}\n\nexport const SideBar: React.FC<SideBarProps> = ({ isPlaying, cbToggle }) => {\n  return (\n    <div className=\"SideBarContainer\">\n      <div\n        style={{\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'end',\n          marginTop: '10px',\n        }}\n      >\n        <button\n          type=\"button\"\n          className={`SideBarMenuItem${isPlaying ? ' close play' : ' close'}`}\n          onClick={cbToggle}\n        >\n          &#9668;\n        </button>\n      </div>\n      <ul>\n        <li>\n          <NavLink\n            to=\"/\"\n            onClick={cbToggle}\n            className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n          >\n            Main Page\n          </NavLink>\n        </li>\n\n        {categories.map((elem, i) => {\n          return (\n            <li key={elem.title}>\n              <NavLink\n                to={`/category/${i + 1}`} // +1 cause of array starts on index 0\n                onClick={cbToggle}\n                className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n              >\n                {elem.title}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport i18next from 'i18next';\nimport './ResultScreen.scss';\nimport data from '../../en.json';\n\ninterface ResultScreenProps {\n  resultScreenVisibilityToggle: () => void;\n  viewResultScreen: boolean;\n  finalResult: string;\n}\n\nexport const ResultScreen: React.FC<ResultScreenProps> = ({\n  resultScreenVisibilityToggle,\n  viewResultScreen,\n  finalResult,\n}) => {\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`ResultScreen${viewResultScreen ? ' view' : ' hide'}`}>\n      <div className=\"ResultPercent\">\n        <h2>{i18next.t('result')}</h2>\n        <h1>{finalResult}</h1>\n        <button type=\"button\" onClick={resultScreenVisibilityToggle}>\n          {i18next.t('close')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { MainPage } from './components/MainPage/MainPage';\nimport { Header } from './components/Header/Header';\nimport { SideBar } from './components/SideBar/SideBar';\nimport { ResultScreen } from './components/ResultScreen/ResultScreen';\nimport { PUBLIC_URL } from './@core/constants';\nimport { GetResult } from './@core/interfaces';\nimport './App.scss';\nimport './components/SideBar/SideBar.scss';\n\nconst App: React.FC = () => {\n  const [isPlaying, isPlayingToggle] = useState<boolean>(false);\n  const [sideBarVisible, changeSideBarVisibility] = useState<boolean>(false);\n  const [isGameStarted, setIsGameStarted] = useState<boolean>(false);\n  const [viewResultScreen, setViewResultScreen] = useState<boolean>(false);\n  const [isBlocking, setIsBlocking] = useState<boolean>(false);\n  const [result, setResult] = useState<string>('');\n\n  const sideBarToggle = () => changeSideBarVisibility(!sideBarVisible);\n  const setMode = () => {\n    isPlayingToggle(!isPlaying);\n    if (isGameStarted === true) setIsGameStarted(false);\n  };\n  const gameStartedToggle = () => {\n    setIsGameStarted(!isGameStarted);\n    setResult('');\n  };\n  const resultScreenVisibilityToggle = () => {\n    setViewResultScreen(!viewResultScreen);\n    if (isPlaying) setMode();\n  };\n  const getResult: GetResult = (res) => setResult(res);\n  const setIsBlockingToggle = (flag: boolean) => setIsBlocking(flag);\n\n  return (\n    <BrowserRouter basename={PUBLIC_URL}>\n      <div\n        className=\"App\"\n        style={{\n          backgroundImage: `url(${PUBLIC_URL}/background.jpg`,\n          backgroundRepeat: 'repeat',\n          backgroundAttachment: 'fixed',\n        }}\n      >\n        <header>\n          <div className={`${sideBarVisible ? 'SideBar active' : 'SideBar'}`}>\n            <SideBar isPlaying={isPlaying} cbToggle={sideBarToggle} />\n          </div>\n          <Header\n            isGameStarted={isGameStarted}\n            setIsBlockingToggle={setIsBlockingToggle}\n            isPlaying={isPlaying}\n            sideBarToggle={sideBarToggle}\n            setModeToggle={setMode}\n          />\n        </header>\n        <main>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <MainPage\n                isPlaying={isPlaying}\n                isGameStarted={isGameStarted}\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                setIsBlockingToggle={setIsBlockingToggle}\n                isBlocking={isBlocking}\n              />\n            )}\n          />\n          <Route\n            path=\"/category/:id\"\n            render={() => (\n              <MainPage\n                isPlaying={isPlaying}\n                isGameStarted={isGameStarted}\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                isBlocking={isBlocking}\n                setIsBlockingToggle={setIsBlockingToggle}\n              />\n            )}\n          />\n          <ResultScreen\n            resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n            viewResultScreen={viewResultScreen}\n            finalResult={result}\n          />\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nwindow.addEventListener('load', async () => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    try {\n      const reg = await navigator.serviceWorker.register(\n        `${process.env.PUBLIC_URL}/service-worker.js`\n      );\n      console.log('success', reg);\n    } catch (e) {\n      console.log('fail');\n    }\n  }\n});\n\nreportWebVitals();\n"],"sourceRoot":""}