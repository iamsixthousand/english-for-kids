{"version":3,"sources":["state/appConfigAC.ts","state/appConfigReducer.ts","state/elementsVisibilityAC.ts","state/elementsVisibilityReducer.ts","state/gameProcessAC.ts","state/gameProcessReducer.ts","state/offlineAC.ts","state/offlineReducer.ts","state/reducers.ts","components/PageInfoBlock/PageInfoBlock.tsx","@core/constants.ts","components/Card/CategoryCard/CategoryCard.tsx","@core/functions.ts","components/Card/ItemCard/ItemCard.tsx","cardData.ts","components/Cardholder/CardHolder.tsx","components/StatsBlock/StatsBlock.tsx","components/MainPage/MainPage.tsx","components/Header/Header.tsx","components/NetworkIndicator/NetworkIndicator.tsx","components/SideBar/SideBar.tsx","components/ResultScreen/ResultScreen.tsx","components/UpdateSWMessage/UpdateSWMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APP_LANGUAGE_SET","APP_INNERWIDTH_SET","initState","language","innerWidth","SIDEBAR_VISIBILITY","RESULT_SCREEN_VISIBILITY","SW_MODALE_VISIBILITY","IS_CARD_FLIPPED","sidebarVisibile","resultScreenVisible","swModaleVisible","isCardFlipped","IS_PLAYING","IS_GAME_STARTED","IS_BLOCKING","ADD_ANSWER","SET_RESULT","isPlaying","isGameStarted","isBlocking","answers","result","IS_OFFLINE","IS_OFFLINE_CONTENT_VISIBLE","FOR_OFFLINE_RELOAD","isOffline","offlineContentVisible","forReload","combinedReducer","combineReducers","appConfig","state","action","type","console","log","newState","elementVisibility","gameProcess","answer","newAnswers","push","offline","PageInfoBlock","textSeen","otherText","id","undefined","newGameFunc","restartGameFunc","replayWord","useState","setLanguage","useEffect","window","scrollTo","lang","i18next","init","lng","resources","data","className","t","onClick","PUBLIC_URL","process","CategoryCard","title","image","alt","src","randomizerFunc","Math","random","toArrayId","Number","audioPlayFunc","publicURL","mode","sound","Audio","onloadeddata","onplaying","onpause","pauseSound","paused","pause","currentTime","play","timeOutAudio","ItemCard","word","translation","audio","inGameAnswer","isFlipped","setIsFlipped","audioPlay","flipOnMouseLeaveOrClick","onMouseLeave","role","tabIndex","style","border","backgroundColor","categories","cards","audioSrc","CardHolder","gameStepsFunc","setForReload","onbeforeunload","when","message","map","elem","i","indexToId","to","StatsBlock","setInnerWidth","setWindowInnerWidth","addEventListener","removeEventListener","el","filter","length","MainPage","gameStartedToggle","resultScreenVisibilityToggle","getResult","setIsBlockingToggle","setAnswer","idParam","useParams","cardsArrS","useRef","finalResult","cardIndex","correctAnswers","answersCount","clearAll","current","resultScreenShow","maxPercent","startGameFunc","slice","sort","EO","cardsArray","chancesGiven","maxCorrectAnswers","correctAudioSrc","errorAudioSrc","setAnswerFunc","resultShowFunc","target","dataset","prevAnswers","setTimeout","gameMainFunction","Header","sideBarToggle","setModeToggle","backgroundImage","onHandleColor","onColor","uncheckedIcon","checkedIcon","checked","onChange","height","width","handleDiameter","boxShadow","activeBoxShadow","NetworkIndicator","indicatorView","setIndicatorView","indicatorViewToggle","flag","SideBar","cbToggle","display","flexDirection","justifyContent","marginTop","ResultScreen","viewResultScreen","UpdateSWMessage","swModaleView","onReloadCancel","App","isPlayingToggle","isOfflineToggle","setModaleView","sideBarVisible","changeSideBarVisibility","setIsGameStarted","setViewResultScreen","setIsBlocking","setResult","setOfflineContentVisible","offlineContentVisibilityToggle","setModaleViewToggle","value","setMode","res","askUserToUpdate","reg","document","getElementById","onclick","waiting","postMessage","a","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","location","reload","basename","backgroundRepeat","backgroundAttachment","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode"],"mappings":"m7BAGaA,EAAmB,mBACnBC,EAAqB,qBCiB5BC,EAA4B,CAChCC,SAAU,KACVC,WAAY,MCpBP,IAAMC,EAAqB,qBACrBC,EAA2B,2BAC3BC,EAAuB,uBACvBC,EAAkB,kBCoBzBN,EAAqC,CACzCO,iBAAiB,EACjBC,qBAAqB,EACrBC,iBAAiB,EACjBC,eAAe,GCxBV,IAAMC,EAAa,aACbC,EAAkB,kBAClBC,EAAc,cACdC,EAAa,aACbC,EAAa,aCcpBf,EAA8B,CAClCgB,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,QAAS,GACTC,OAAQ,ICtBH,IAAMC,EAAa,aACbC,EAA6B,6BAC7BC,EAAqB,qBCW5BvB,EAA0B,CAC9BwB,WAAW,EACXC,uBAAuB,EACvBC,WAAW,GChBb,IAAMC,EAAkBC,YAAgB,CACtCC,UPkBa,WAGI,IAFjBC,EAEgB,uDAFR9B,EACR+B,EACgB,uCAChB,OAAQA,EAAOC,MACb,KAAKlC,EACHmC,QAAQC,IAAI,iBACZ,IAAIC,EAAW,KAOf,OANIJ,EAAO9B,WACTkC,EAAQ,2BACHL,GADG,IAEN7B,SAAU8B,EAAO9B,YAGdkC,EAET,KAAKpC,EACHkC,QAAQC,IAAI,uBACZ,IAAIC,EAAW,KAOf,OANIJ,EAAO7B,aACTiC,EAAQ,2BACHL,GADG,IAEN5B,WAAY6B,EAAO7B,cAGhBiC,EAET,QACE,OAAOL,IO7CXM,kBLwBa,WAGa,IAF1BN,EAEyB,uDAFjB9B,EACR+B,EACyB,uCACzB,OAAQA,EAAOC,MACb,KAAK7B,EACH8B,QAAQC,IAAI,+BACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOxB,kBACT4B,EAAQ,2BACHL,GADG,IAENvB,gBAAiBwB,EAAOxB,mBAGrB4B,EAET,KAAK/B,EACH6B,QAAQC,IAAI,qCACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOvB,sBACT2B,EAAQ,2BACHL,GADG,IAENtB,oBAAqBuB,EAAOvB,uBAGzB2B,EAET,KAAK9B,EACH4B,QAAQC,IAAI,iCACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOtB,kBACT0B,EAAQ,2BACHL,GADG,IAENrB,gBAAiBsB,EAAOtB,mBAGrB0B,EAET,KAAK7B,EACH2B,QAAQC,IAAI,4BACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOrB,gBACTyB,EAAQ,2BACHL,GADG,IAENpB,cAAeqB,EAAOrB,iBAGnByB,EAET,QACE,OAAOL,IKzEXO,YHsBa,WAGM,IAFnBP,EAEkB,uDAFV9B,EACR+B,EACkB,uCAClB,OAAQA,EAAOC,MACb,KAAKrB,EACHsB,QAAQC,IAAI,uBACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOf,YACTmB,EAAQ,2BACHL,GADG,IAENd,UAAWe,EAAOf,aAGfmB,EAET,KAAKvB,EACHqB,QAAQC,IAAI,4BACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOd,gBACTkB,EAAQ,2BACHL,GADG,IAENb,cAAec,EAAOd,iBAGnBkB,EAET,KAAKtB,EACHoB,QAAQC,IAAI,wBACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOb,aACTiB,EAAQ,2BACHL,GADG,IAENZ,WAAYa,EAAOb,cAGhBiB,EAET,KAAKrB,EACHmB,QAAQC,IAAI,uBACZ,IAAIC,EAAW,KACf,GAAIJ,EAAOO,OAAQ,CACjB,IAAMC,EAAaT,EAAMX,QACzBoB,EAAWC,KAAKT,EAAOO,QACvBH,EAAQ,2BACHL,GADG,IAENX,QAASoB,IAGb,OAAOJ,EAET,KAAKpB,EACHkB,QAAQC,IAAI,uBACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOX,SACTe,EAAQ,2BACHL,GADG,IAENV,OAAQW,EAAOX,UAGZe,EAET,QACE,OAAOL,IGpFXW,QDea,WAAiF,IAAzDX,EAAwD,uDAAhD9B,EAAW+B,EAAqC,uCAC7F,OAAQA,EAAOC,MACb,KAAKX,EACHY,QAAQC,IAAI,uBACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOP,YACTW,EAAQ,2BACHL,GADG,IAENN,UAAWO,EAAOP,aAGfW,EAET,KAAKb,EACHW,QAAQC,IAAI,uCACZ,IAAIC,EAAW,KAOf,OANIJ,EAAON,wBACTU,EAAQ,2BACHL,GADG,IAENL,sBAAuBM,EAAON,yBAG3BU,EAET,KAAKZ,EACHU,QAAQC,IAAI,+BACZ,IAAIC,EAAW,KAOf,OANIJ,EAAOL,YACTS,EAAQ,2BACHL,GADG,IAENJ,UAAWK,EAAOL,aAGfS,EAET,QACE,OAAOL,MChDEH,I,qFCAFe,EAA8C,SAAC,GAOrD,IACDC,EACAC,EARJ3B,EAMI,EANJA,cACAD,EAKI,EALJA,UAKI,IAJJ6B,UAII,WAJCC,EAID,EAHJC,EAGI,EAHJA,YACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,WAIA,EAAgCC,mBAAS,MAAzC,mBAAOjD,EAAP,KAAiBkD,EAAjB,KAoBA,OAVAC,qBAAU,WACJpC,GACFqC,OAAOC,SAAS,EAAG,KAEpB,CAACtC,IAEJoC,qBAAU,WAda,IAACG,IAeP,KAdfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYlD,MAaN4C,GACN,IAAK,IACHF,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,UACX,MACF,IAAK,IACHA,EAAW,WACX,MACF,QACEA,EAAW,GAIf,IACO,IADC3B,EAEJ4B,EAAY,6BAGZA,EAAY,yBAGhB,OACE,sBAAKiB,UAAU,mBAAf,UACE,gCACE,qBAAKA,UAAU,iBAAf,UAAkChB,GAAM,6BAAKW,IAAQM,EAAE,aACvD,qBAAKD,UAAU,sBAAf,UAAuChB,GAAM,6BAAKW,IAAQM,EAAE,sBAC5D,qBAAKD,UAAS,wBAAmBhB,EAAK,GAAK,SAA3C,SACE,6BAAKA,GAAE,UAAOF,EAAP,sBAA6BC,UAGxC,qBAAKiB,UAAS,yBAAoB7C,GAAa6B,IAAO5B,EAAgB,QAAU,IAAhF,SACE,wBACEe,KAAK,SACL6B,UAAS,yBAAoB5C,IAAkBD,EAAY,QAAU,IACrE+C,QAAShB,EAHX,SAKGS,IAAQM,EAAE,cAGf,sBAAKD,UAAS,gCAA2BhB,GAAM5B,EAAgB,QAAU,IAAzE,UACE,wBACEe,KAAK,SACL6B,UAAS,2BAAsB5C,EAAgB,GAAK,SACpD8C,QAASf,EAHX,SAKGQ,IAAQM,EAAE,aAEb,wBACE9B,KAAK,SACL6B,UAAS,sBAAiB5C,EAAgB,GAAK,SAC/C8C,QAASd,EAHX,SAKGO,IAAQM,EAAE,mBC3GNE,EAAeC,oBCUjBC,G,MAA4C,SAAC,GAAiC,IAA/BlD,EAA8B,EAA9BA,UAAWmD,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC5E,OACE,sBAAKP,UAAU,eAAf,UACG7C,EACD,qBAAK6C,UAAU,qBAAf,SACE,qBAAKA,UAAU,YAAYQ,IAAKF,EAAOG,IAAG,UAAKN,EAAL,YAAmBI,OAE/D,qBAAKP,UAAU,eAAf,SAA+BM,S,QCaxBI,EAAiC,kBAAMC,KAAKC,SAAW,IAEvDC,EAAuB,SAAC7B,GAAD,OAAgB8B,OAAO9B,GAAM,GAEpD+B,EAA2B,SAACC,EAAWP,EAAKQ,GACvD,IAAMC,EAAQ,IAAIC,MAAJ,UAAaH,EAAb,YAA0BP,IACxCS,EAAME,aAAe,WACnB,IAAIjE,EACJ+D,EAAMG,UAAY,WAChBlE,GAAY,GAEd+D,EAAMI,QAAU,WACdnE,GAAY,GAEd,IAKMoE,EAAa,YACZL,EAAMM,QAAUrE,IACnB+D,EAAMO,QACNP,EAAMQ,YAAc,IAGpBT,GACFM,IAXIL,EAAMM,SAAWrE,GACnB+D,EAAMS,QAaRJ,MAKFK,GAAe,EChDNC,G,MAAoC,SAAC,GAQ3C,IAPL1E,EAOI,EAPJA,UACA2E,EAMI,EANJA,KACAC,EAKI,EALJA,YACAC,EAII,EAJJA,MACAzB,EAGI,EAHJA,MACA0B,EAEI,EAFJA,aACA7E,EACI,EADJA,cAEA,EAAkCiC,oBAAkB,GAApD,mBAAO6C,EAAP,KAAkBC,EAAlB,KACMC,EAAY,WACXjF,GACH4D,EAAcZ,EAAY6B,GAAO,IAO/BK,EAA0B,YACZ,IAAdH,GAAoBC,GAAa,IAGvC,OACE,qBAAK,YAAU,OAAOG,aAAcD,EAApC,SACE,sBAAKrC,UAAS,uBAAmBkC,EAAiB,WAAL,IAA7C,UACE,sBAAKlC,UAAU,iBAAf,UACE,qBACEuC,KAAK,SACLvC,UAAS,4BAAwB7C,EAAiB,QAAL,IAC7CqF,SAAU,EACV,YAAWV,EACX5B,QAAU9C,EAA4B6E,EAAZG,EAL5B,SAOE,qBAAKpC,UAAU,YAAYQ,IAAKsB,EAAMrB,IAAG,UAAKN,EAAL,YAAmBI,QAE5DpD,GACA,sBAAK6C,UAAU,mBAAf,UACE,wBACEhB,GAAG,kBACHyD,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,sBAC1CxE,KAAK,SACL+B,QAASkC,EAJX,SAME,qBACEpC,UAAU,yBACVQ,IAAI,aACJC,IAAG,UAAKN,EAAL,wBAGP,sBAAMH,UAAU,mBAAhB,SAAoC8B,IACpC,wBACEW,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,sBAC1CxE,KAAK,SACL+B,QAvCM,WAClBa,EAAcZ,EAAY,sBAAsB,GAChDgC,GAAcD,IAkCJ,SAKE,qBACElC,UAAU,wBACVQ,IAAI,oBACJC,IAAG,UAAKN,EAAL,6BAMb,sBAAKH,UAAU,gBAAf,UACE,qBACEuC,KAAK,SACLvC,UAAU,qBACVwC,SAAU,EACVtC,QAASmC,EAJX,SAME,qBAAKrC,UAAU,YAAYQ,IAAKsB,EAAMrB,IAAG,UAAKN,EAAL,YAAmBI,QAE5DpD,GACA,qBAAK6C,UAAU,2BAAf,SACE,sBAAMA,UAAU,mBAAhB,SAAoC+B,gBC9ErCa,EAA2B,CACtC,CACEtC,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,UACPC,MAAO,mBAET,CACED,MAAO,WACPC,MAAO,qBAIEsC,EAAiB,CAC5B,CACE,CACEf,KAAM,MACNC,YAAa,6CACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,yDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,mDACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,gEACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,MACNC,YAAa,mDACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,OACNC,YAAa,6CACbxB,MAAO,eACPuC,SAAU,mBAGd,CACE,CACEhB,KAAM,OACNC,YAAa,yDACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,QACNC,YAAa,yDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,OACNC,YAAa,2BACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,2GACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,6CACbxB,MAAO,eACPuC,SAAU,mBAGd,CACE,CACEhB,KAAM,MACNC,YAAa,qBACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,mDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,UACNC,YAAa,uCACbxB,MAAO,kBACPuC,SAAU,qBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,uCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,SACNC,YAAa,uCACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,oBAGd,CACE,CACEhB,KAAM,OACNC,YAAa,iCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,2BACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,UACNC,YAAa,uCACbxB,MAAO,kBACPuC,SAAU,qBAEZ,CACEhB,KAAM,OACNC,YAAa,qBACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,SACNC,YAAa,mDACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,UACNC,YAAa,6CACbxB,MAAO,kBACPuC,SAAU,sBAGd,CACE,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,iCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,SACNC,YAAa,uCACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,QACNC,YAAa,uCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,6CACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,QACNC,YAAa,6CACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,iCACbxB,MAAO,eACPuC,SAAU,mBAGd,CACE,CACEhB,KAAM,MACNC,YAAa,mDACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,mDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,+DACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,mDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,YACNC,YAAa,+DACbxB,MAAO,oBACPuC,SAAU,uBAEZ,CACEhB,KAAM,SACNC,YAAa,+DACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,QACNC,YAAa,uCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,qBC7THC,G,MAAwC,SAAC,GAQ/C,IAPLnF,EAOI,EAPJA,sBAEAP,GAKI,EANJM,UAMI,EALJN,YACAF,EAII,EAJJA,UACA6B,EAGI,EAHJA,GACA5B,EAEI,EAFJA,cACA4F,EACI,EADJA,cAEA,EAAkC3D,oBAAS,GAA3C,mBAAOxB,EAAP,KAAkBoF,EAAlB,KAcA,OARA1D,qBAAU,WAENC,OAAO0D,eADL9F,EACsB,kBAAM,GAEN,QAK1B,qCACE,cAAC,IAAD,CAAQ+F,KAAM9F,EAAY+F,QAAQ,6CAClC,sBAAKpD,UAAS,oBAAgBhB,EAAWpB,EAAkC,WAAV,QAA9B,IAAnC,WACIoB,GACA4D,EAAWS,KAAI,SAACC,EAAMC,GACpB,IAAMC,EAAYD,EAAI,EACtB,OACE,qBAAKvD,UAAU,OAAf,SACE,cAAC,IAAD,CAAMyD,GAAE,mBAAcD,GAAaxD,UAAU,OAA7C,SACE,cAAC,EAAD,CAAc7C,UAAWA,EAAWmD,MAAOgD,EAAKhD,MAAOC,MAAO+C,EAAK/C,WAF5C+C,EAAKhD,UAOrCtB,IACEpB,GACDiF,EAAMhC,EAAU7B,IAAKqE,KAAI,SAACC,GACxB,OACE,cAAC,EAAD,CACErB,aAAce,EACd7F,UAAWA,EACX2E,KAAMwB,EAAKxB,KACXC,YAAauB,EAAKvB,YAClBxB,MAAO+C,EAAK/C,MACZyB,MAAOsB,EAAKR,SAEZ1F,cAAeA,GADVkG,EAAKxB,SAKjB9C,GAAMpB,GACL,sBAAKoC,UAAU,iBAAf,UACE,qBAAIA,UAAU,wBAAd,uCAEE,uBAFF,gEAKA,wBAAQ7B,KAAK,SAAS6B,UAAU,6BAA6BE,QAlDpD,WACjB+C,GAAcpF,IAiDN,+BCtEC6F,G,MAAwC,SAAC,GAAoC,IAAlCpG,EAAiC,EAAjCA,QAASF,EAAwB,EAAxBA,cAAe4B,EAAS,EAATA,GAC9E,EAAoCK,mBAAiB,MAArD,mBAAOhD,EAAP,KAAmBsH,EAAnB,KACA,EAAgCtE,mBAAS,MAAzC,mBAAOjD,EAAP,KAAiBkD,EAAjB,KAWA,SAASsE,IACPD,EAAcnE,OAAOnD,YAkBvB,OAfAkD,qBAAU,WAER,OADAC,OAAOqE,iBAAiB,SAAUD,GAAqB,GAChD,kBAAMpE,OAAOsE,oBAAoB,SAAUF,GAAqB,OAGzErE,qBAAU,WAGR,OAFAoE,EAAcnE,OAAOnD,YACrBmD,OAAOqE,iBAAiB,OAAQD,GAAqB,GAC9C,kBAAMpE,OAAOsE,oBAAoB,SAAUF,GAAqB,MACtE,IAEHrE,qBAAU,WAvBa,IAACG,IAwBP,KAvBfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYlD,MAuBZ,sBAAK4D,UAAS,6BAAwB3D,GA9BnB,IA8BgD,QAAU,IAA7E,UACGA,EA/BgB,KAgCf,sBAAK2D,UAAS,oBAAe5C,GAAiB4B,EAAK,QAAU,IAA7D,UACE,qBAAKgB,UAAS,wBAAmB5C,GAAiB4B,EAAK,QAAU,IAAjE,SACE,+BAAOW,IAAQM,EAAE,eAElB7C,GACCE,EAAQ+F,KAAI,SAACU,EAAIR,GACf,OACE,qBAAKvD,UAAU,gBAAf,SACE,qBACEA,UAAU,OACVQ,IAAG,cAAS+C,GACZ9C,IAAG,UAAKN,EAAL,iBAA8B,IAAP4D,EAAc,cAAgB,gBAJ5D,aAA0CR,EAAI,UAWvDlH,GAlDgB,KAmDf,sBAAK2D,UAAS,oBAAe5C,GAAiB4B,EAAK,aAAe,IAAlE,UACE,qBAAKgB,UAAS,wBAAmB5C,GAAiB4B,EAAK,QAAU,IAAjE,SACE,+BAAOW,IAAQM,EAAE,eAEnB,qBAAKD,UAAS,wBAAmB5C,GAAiB4B,EAAK,QAAU,IAAjE,SACE,+BAAOW,IAAQM,EAAE,aAElB7C,GACC,qBAAK4C,UAAS,qBAAgB5C,GAAiB4B,EAAK,gBAAkB,IAAtE,SACG1B,EAAQ0G,QAAO,SAACD,GAAD,OAAe,IAAPA,KAAaE,SAGxC7G,GACC,qBAAK4C,UAAS,qBAAgB5C,GAAiB4B,EAAK,cAAgB,IAApE,SACG1B,EAAQ0G,QAAO,SAACD,GAAD,OAAe,IAAPA,KAAcE,iBCzDvCC,G,MAAoC,SAAC,GAU3C,IATLtG,EASI,EATJA,sBACAD,EAQI,EARJA,UACAN,EAOI,EAPJA,WACAF,EAMI,EANJA,UACAC,EAKI,EALJA,cACA+G,EAII,EAJJA,kBACAC,EAGI,EAHJA,6BACAC,EAEI,EAFJA,UACAC,EACI,EADJA,oBAEA,EAA6BjF,mBAAoB,IAAjD,mBAAO/B,EAAP,KAAgBiH,EAAhB,KACMC,EAAUC,cAEVC,EAAYC,iBAAmB,IAC/BC,EAAcD,iBAAe,IAC7BE,EAAYF,iBAAe,GAC3BG,EAAiBH,iBAAe,GAChCI,EAAeJ,iBAAe,GAM9BK,EAAW,WACfT,EAAU,IACVG,EAAUO,QAAU,GACpBJ,EAAUI,QAAU,EACpBF,EAAaE,QAAU,EACvBL,EAAYK,QAAU,GACtBH,EAAeG,QAAU,GAGrBC,EAAmB,WACvBN,EAAYK,QAAZ,UAA0BE,KAAkCL,EAAeG,QAA3E,KACAZ,EAAUO,EAAYK,SACtBb,IACAE,GAAoB,IAoBhBc,EAAgB,WACpBV,EAAUO,QAAUpC,EAAMhC,EAAU2D,EAAQxF,KAAKqG,QAAQC,KAAK5E,GAC1DgE,GAAW3D,EAAcZ,EAAYuE,EAAUO,QAAQJ,EAAUI,SAASnC,UAAU,IAyB1F,OANAvD,qBAAU,WACRyF,IACAV,GAAoB,GAChBlH,GAAe+G,MAClB,CAACK,EAAQxF,KAGV,sBAAKgB,UAAU,WAAf,UACE,cAAC,EAAD,CACE5C,cAAeA,EACfD,UAAWA,EACX6B,GAAIwF,EAAQxF,GACZE,YAnBc,WAClB8F,IACAb,IACAiB,IACAd,GAAoB,IAgBhBnF,gBAzBkB,WACtB6F,IACAI,KAwBIhG,WA9Ba,WACjB2B,EAAcZ,EAAYuE,EAAUO,QAAQJ,EAAUI,SAASnC,UAAU,MA+BvE,cAAC,EAAD,CACElF,sBAAuBA,EACvBD,UAAWA,EACXN,WAAYA,EACZF,UAAWA,EACX6B,GAAIwF,EAAQxF,GACZ5B,cAAeA,EACf4F,cA7DgB,SAACuC,ILGqB,SAC5CA,EACAC,EACAX,EACAE,EACAU,EACAX,EACAY,EACA1E,EACA2E,EACAC,EACAC,EACAC,GAGEN,EAAWP,QAAQhB,QAAUY,EAAUI,QAAU,GACjDF,EAAaE,QAAUQ,GACvBX,EAAeG,QAAUS,GAGvB,OAACH,QAAD,IAACA,OAAD,EAACA,EAAIQ,QAA0BC,QAAQlE,OAAS0D,EAAWP,QAAQJ,EAAUI,SAASnD,MAEtFF,GAAe,EACfb,EAAcC,EAAW2E,GAAiB,GAC1C5E,EAAcC,EAAW2E,GAAiB,GAC1Cb,EAAeG,SAAW,EAC1BY,GAAc,SAACI,GAAD,4BAAqBA,GAArB,EAAkC,OAChDpB,EAAUI,SAAW,EACrBF,EAAaE,SAAW,EAEtBO,EAAWP,QAAQhB,QAAUY,EAAUI,QAAU,GACjDF,EAAaE,QAAUQ,GACvBX,EAAeG,QAAUS,GAEzB9D,GAAe,EACfb,EAAcC,EAAWwE,EAAWP,QAAQJ,EAAUI,SAASnC,UAAU,GACzE/B,EAAcC,EAAWwE,EAAWP,QAAQJ,EAAUI,SAASnC,UAAU,IACpEgD,MAEP/E,EAAcC,EAAW4E,GAAe,GACxC7E,EAAcC,EAAW4E,GAAe,GACxCC,GAAc,SAACI,GAAD,4BAAqBA,GAArB,EAAkC,OAChDlB,EAAaE,SAAW,EAEtBO,EAAWP,QAAQhB,QAAUY,EAAUI,QAAU,GACjDF,EAAaE,QAAUQ,GACvBX,EAAeG,QAAUS,EAEpB9D,IACHA,GAAe,EACfsE,YAAW,WACTnF,EAAcC,EAAWwE,EAAWP,QAAQJ,EAAUI,SAASnC,UAAU,GACzE/B,EAAcC,EAAWwE,EAAWP,QAAQJ,EAAUI,SAASnC,UAAU,GACzElB,GAAe,IACd,MAEAkE,KAEJA,IK5DLK,CACEZ,EACAb,EACAG,EACAE,EAzBiB,GA2BjBD,EA1BsB,EA4BtB3E,EPvEyB,oBACF,kBOyEvBoE,EACAW,MAkDC/H,GACC,cAAC,EAAD,CACEG,QAASA,EACTH,UAAWA,EACXC,cAAeA,EACf4B,GAAIwF,EAAQxF,U,oBCrHToH,I,MAAgC,SAAC,GAOvC,IANLxI,EAMI,EANJA,sBACA0G,EAKI,EALJA,oBACAlH,EAII,EAJJA,cACAD,EAGI,EAHJA,UACAkJ,EAEI,EAFJA,cACAC,EACI,EADJA,cAQA,OACE,sBAAKtG,UAAU,SAASyC,MAAO,CAAE8D,gBAAgB,OAAD,OAASpG,EAAT,qBAAhD,UACE,qBAAKoC,KAAK,SAASvC,UAAU,oBAAoBE,QAASmG,EAAe,cAAY,OAArF,kBAGEzI,GACA,sBAAKoC,UAAU,eAAf,UACE,sBAAMA,UAAU,WAAhB,SAA4B7C,EAAY,OAAS,UACjD,cAAC,KAAD,CACEqJ,cAAc,UACdC,QAAQ,UACRC,eAAe,EACfC,aAAa,EACbC,QAASzJ,EACT6C,UAAU,SACV6G,SArBU,WACdzJ,GAAiBD,GACnBmH,GAAoB,GACpBgC,KACKA,KAkBCQ,OAAQ,GACRC,MAAO,GACPC,eAAgB,GAChBC,UAAU,iCACVC,gBAAgB,gDCvCfC,I,MAAoD,SAAC,GAAmB,IAAjBxJ,EAAgB,EAAhBA,UAClE,EAAgC0B,mBAAS,MAAzC,mBAAOjD,EAAP,KAAiBkD,EAAjB,KACA,EAA0CD,oBAAS,GAAnD,mBAAO+H,EAAP,KAAsBC,EAAtB,KAUMC,EAAsB,SAACC,GAC3BF,EAAiBE,IAenB,OAZAhI,qBAAU,WAZa,IAACG,IAaP,KAZfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYlD,MAWdmD,qBAAU,WACJ5B,EACFuI,YAAW,kBAAMoB,GAAoB,KT5BA,KS8BrCA,GAAoB,KAErB,CAAC3J,IAGF,qBAAKqC,UAAS,4BAAuBoH,EAAgB,QAAU,SAA/D,SACE,qBAAKpH,UAAU,gBAAf,SACE,+BAAOL,IAAQM,EAAE,mBC/BZuH,I,MAAkC,SAAC,GAA6B,IAA3BrK,EAA0B,EAA1BA,UAAWsK,EAAe,EAAfA,SAC3D,OACE,sBAAKzH,UAAU,mBAAf,UACE,qBACEyC,MAAO,CACLsE,MAAO,OACPW,QAAS,OACTC,cAAe,MACfC,eAAgB,MAChBC,UAAW,QANf,SASE,wBACE1J,KAAK,SACL6B,UAAS,yBAAoB7C,EAAY,cAAgB,UACzD+C,QAASuH,EAHX,sBAQF,+BACE,6BACE,cAAC,IAAD,CACEhE,GAAG,IACHvD,QAASuH,EACTzH,UAAS,yBAAoB7C,EAAY,QAAU,IAHrD,yBASDyF,EAAWS,KAAI,SAACC,EAAMC,GACrB,OACE,6BACE,cAAC,IAAD,CACEE,GAAE,oBAAeF,EAAI,GACrBrD,QAASuH,EACTzH,UAAS,yBAAoB7C,EAAY,QAAU,IAHrD,SAKGmG,EAAKhD,SANDgD,EAAKhD,kBChCbwH,I,MAA4C,SAAC,GAInD,IAHL1D,EAGI,EAHJA,6BACA2D,EAEI,EAFJA,iBACAnD,EACI,EADJA,YAEA,EAAgCvF,mBAAS,MAAzC,mBAAOjD,EAAP,KAAiBkD,EAAjB,KAcA,OAJAC,qBAAU,WARa,IAACG,IASP,KARfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYlD,MAQZ,qBAAK4D,UAAS,sBAAiB+H,EAAmB,QAAU,SAA5D,SACE,sBAAK/H,UAAU,gBAAf,UACE,6BAAKL,IAAQM,EAAE,YACf,6BAAK2E,IACL,wBAAQzG,KAAK,SAAS+B,QAASkE,EAA/B,SACGzE,IAAQM,EAAE,kBC1BR+H,I,MAAkD,SAAC,GAGzD,IAFLC,EAEI,EAFJA,aACAC,EACI,EADJA,eAEA,EAAgC7I,mBAAS,MAAzC,mBAAOjD,EAAP,KAAiBkD,EAAjB,KAcA,OAJAC,qBAAU,WARa,IAACG,IASP,KARfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYlD,MAQZ,qBAAK4D,UAAS,2BAAsBiI,EAAe,QAAU,SAA7D,SACE,sBAAKjI,UAAU,kBAAf,UACE,+BAAOL,IAAQM,EAAE,qBACjB,sBAAKD,UAAU,kBAAf,UACE,wBAAQA,UAAU,eAAehB,GAAG,WAAWb,KAAK,SAApD,gBAGA,wBAAQ6B,UAAU,eAAe7B,KAAK,SAAS+B,QAASgI,EAAxD,8BCkJKC,I,MAtKO,WACpB,MAAqC9I,oBAAkB,GAAvD,mBAAOlC,EAAP,KAAkBiL,EAAlB,KACA,EAAqC/I,oBAAkB,GAAvD,mBAAO1B,EAAP,KAAkB0K,EAAlB,KACA,EAAsChJ,oBAAS,GAA/C,mBAAO4I,EAAP,KAAqBK,EAArB,KACA,EAAkDjJ,oBAAkB,GAApE,mBAAOkJ,EAAP,KAAuBC,EAAvB,KACA,EAA0CnJ,oBAAkB,GAA5D,mBAAOjC,EAAP,KAAsBqL,EAAtB,KACA,EAAgDpJ,oBAAkB,GAAlE,mBAAO0I,EAAP,KAAyBW,EAAzB,KACA,EAAoCrJ,oBAAkB,GAAtD,mBAAOhC,EAAP,KAAmBsL,EAAnB,KACA,EAA4BtJ,mBAAiB,IAA7C,mBAAO9B,EAAP,KAAeqL,EAAf,KACA,EAAgCvJ,mBAAS,MAAzC,mBAAOjD,EAAP,KAAiBkD,EAAjB,KACA,EAA0DD,oBAAS,GAAnE,mBAAOzB,EAAP,KAA8BiL,EAA9B,KASMC,EAAiC,SAACvB,GACtCsB,EAAyBtB,IAQrBlB,EAAgB,kBAAMmC,GAAyBD,IAC/CQ,EAAsB,SAACC,GAAD,OAAoBV,EAAcU,IACxDC,GAAU,WACdb,GAAiBjL,IACK,IAAlBC,GAAwBqL,GAAiB,IAEzCtE,GAAoB,WACxBsE,GAAkBrL,GAClBwL,EAAU,KAENxE,GAA+B,WACnCsE,GAAqBX,GACjB5K,GAAW8L,MAEX5E,GAAuB,SAAC6E,GAAD,OAASN,EAAUM,IAC1C5E,GAAsB,SAACiD,GAAD,OAAmBoB,EAAcpB,IAE7D/H,OAAOqE,iBAAiB,WAtBH,kBAAMwE,GAAgB,MAsBM,GACjD7I,OAAOqE,iBAAiB,UAtBJ,WAClBwE,GAAgB,GAChBS,GAA+B,MAoBc,GAE/CvJ,qBAAU,WApCa,IAACG,IAqCP,KApCfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYlD,MAmCdmD,qBAAU,WACJ5B,GACFuI,YAAW,kBAAM4C,GAA+B,KbjEX,OakEtC,CAACnL,IAEJ,IAAMwL,GAAkB,SAACC,GACvBL,GAAoB,GACHM,SAASC,eAAe,YAChCC,QAAU,WAAO,IAAD,EACvB,UAAAH,EAAII,eAAJ,SAAaC,YAAY,CAAEtL,KAAM,iBACjC4K,GAAoB,KAIxBvJ,OAAOqE,iBAAiB,OAAxB,sBAAgC,4BAAA6F,EAAA,2DACe,kBAAmBC,WADlC,0CAGRA,UAAUC,cAAcC,SAAxB,UACbzJ,oBADa,uBAHQ,QAGpBgJ,EAHoB,QAMtBU,cAAgB,WAClB,IAAMC,EAAmBX,EAAIY,WACzBD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9L,OAAyB0L,UAAUC,cAAcM,YACpEf,GAAgBC,MAXE,gDAiB1BhL,QAAQC,IAAI,OAAZ,MAjB0B,0DA8BhC,OAJAsL,UAAUC,cAAc/F,iBAAiB,oBAAoB,WAC3DrE,OAAO2K,SAASC,YAIhB,cAAC,IAAD,CAAeC,SAAUlK,EAAzB,SACE,sBACEH,UAAU,MACVyC,MAAO,CACL8D,gBAAgB,OAAD,OAASpG,EAAT,mBACfmK,iBAAkB,SAClBC,qBAAsB,SAL1B,UAQE,mCACE,qBAAKvK,UAAS,UAAKuI,EAAiB,iBAAmB,WAAvD,SACE,cAAC,GAAD,CAASpL,UAAWA,EAAWsK,SAAUpB,MAE3C,cAAC,GAAD,CACEzI,sBAAuBA,EACvBR,cAAeA,EACfkH,oBAAqBA,GACrBnH,UAAWA,EACXkJ,cAAeA,EACfC,cAAe2C,QAGnB,iCACE,cAAC,GAAD,CAAiBhB,aAAcA,EAAcC,eAhC9B,WACrBa,GAAoB,MAgCd,cAAC,GAAD,CAAkBpL,UAAWA,IAC7B,cAAC,IAAD,CACE6M,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,cAAC,EAAD,CACE9M,sBAAuBA,EACvBD,UAAWA,EACXR,UAAWA,EACXC,cAAeA,EACf+G,kBAAmBA,GACnBC,6BAA8BA,GAC9BC,UAAWA,GACXC,oBAAqBA,GACrBjH,WAAYA,OAIlB,cAAC,IAAD,CACEoN,KAAK,gBACLC,OAAQ,kBACN,cAAC,EAAD,CACE9M,sBAAuBA,EACvBD,UAAWA,EACXR,UAAWA,EACXC,cAAeA,EACf+G,kBAAmBA,GACnBC,6BAA8BA,GAC9BC,UAAWA,GACXhH,WAAYA,EACZiH,oBAAqBA,QAI3B,cAAC,GAAD,CACEF,6BAA8BA,GAC9B2D,iBAAkBA,EAClBnD,YAAarH,cChKVoN,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCRQ,GAAQC,YAAYvN,EAAiBwN,YAAgBC,MAE3DC,IAASd,OACP,cAAC,IAAMe,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJ/B,SAASC,eAAe,SAG1BqB,O","file":"static/js/main.e662d5ea.chunk.js","sourcesContent":["/* eslint-disable object-shorthand */\n/* eslint-disable no-unused-vars */\n// TODO: add AC for next state variables --> language(App), innerWidth(StatsBlock)\nexport const APP_LANGUAGE_SET = 'APP_LANGUAGE_SET';\nexport const APP_INNERWIDTH_SET = 'APP_INNERWIDTH_SET';\n\ninterface LanguageSetAC {\n  (lang: string): {\n    type: string;\n    language: string;\n  };\n}\n\ninterface InnerWidthSetAC {\n  (innerWidth: number): {\n    type: string;\n    innerWidth: typeof innerWidth;\n  };\n}\n\nexport const languageSetAC: LanguageSetAC = (lang) => {\n  return {\n    type: APP_LANGUAGE_SET,\n    language: lang,\n  };\n};\n\nexport const innerWidthSetAC: InnerWidthSetAC = (innerWidth) => {\n  return {\n    type: APP_LANGUAGE_SET,\n    innerWidth: innerWidth,\n  };\n};\n","/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\n// TODO: add reducer for next state variables --> language(App), innerWidth(StatsBlock)\nimport { APP_LANGUAGE_SET, APP_INNERWIDTH_SET } from './appConfigAC';\n\ninterface AppConfigState {\n  language: string;\n  innerWidth: number;\n}\n\ninterface AppConfigAction {\n  type: string;\n  language?: string;\n  innerWidth?: number;\n}\n\ninterface AppConfigReducer {\n  (state: AppConfigState, action: AppConfigAction): AppConfigState;\n}\n\nconst initState: AppConfigState = {\n  language: 'en',\n  innerWidth: 1600,\n};\n\nexport default function appConfigReducer(\n  state = initState,\n  action: AppConfigAction\n): AppConfigState {\n  switch (action.type) {\n    case APP_LANGUAGE_SET: {\n      console.log('lang settings');\n      let newState = null;\n      if (action.language) {\n        newState = {\n          ...state,\n          language: action.language,\n        };\n      }\n      return newState as AppConfigState;\n    }\n    case APP_INNERWIDTH_SET: {\n      console.log('innerwidth settings');\n      let newState = null;\n      if (action.innerWidth) {\n        newState = {\n          ...state,\n          innerWidth: action.innerWidth,\n        };\n      }\n      return newState as AppConfigState;\n    }\n    default:\n      return state;\n  }\n}\n","// TODO: add AC for next state variables --> swModale(App), sideBarVisible(App), viewresultScreen(App), isFlipped(Itemcard)\n/* eslint-disable object-shorthand */\n/* eslint-disable no-unused-vars */\nexport const SIDEBAR_VISIBILITY = 'SIDEBAR_VISIBILITY';\nexport const RESULT_SCREEN_VISIBILITY = 'RESULT_SCREEN_VISIBILITY';\nexport const SW_MODALE_VISIBILITY = 'SW_MODALE_VISIBILITY';\nexport const IS_CARD_FLIPPED = 'IS_CARD_FLIPPED';\n\ninterface SidebarVisibilitySetAC {\n  (sidebarVisibile: boolean): {\n    type: string;\n    sidebarVisibile: typeof sidebarVisibile;\n  };\n}\n\ninterface ResultScreenVisibilitySetAC {\n  (resultScreenVisible: boolean): {\n    type: string;\n    resultScreenVisible: typeof resultScreenVisible;\n  };\n}\n\ninterface SWModaleVisibilitySetAC {\n  (swModaleVisible: boolean): {\n    type: string;\n    swModaleVisible: typeof swModaleVisible;\n  };\n}\n\ninterface IsCardFlippedSetAC {\n  (isCardFlipped: boolean): {\n    type: string;\n    isCardFlipped: typeof isCardFlipped;\n  };\n}\n\nexport const sidebarVisibilitySetAC: SidebarVisibilitySetAC = (sidebarVisibile) => {\n  return {\n    type: SIDEBAR_VISIBILITY,\n    sidebarVisibile: sidebarVisibile,\n  };\n};\n\nexport const resultScreenVisibilitySetAC: ResultScreenVisibilitySetAC = (resultScreenVisible) => {\n  return {\n    type: RESULT_SCREEN_VISIBILITY,\n    resultScreenVisible: resultScreenVisible,\n  };\n};\n\nexport const swModaleVisibilitySetAC: SWModaleVisibilitySetAC = (swModaleVisible) => {\n  return {\n    type: SW_MODALE_VISIBILITY,\n    swModaleVisible: swModaleVisible,\n  };\n};\n\nexport const isCardFlippedSetAc: IsCardFlippedSetAC = (isCardFlipped) => {\n  return {\n    type: IS_CARD_FLIPPED,\n    isCardFlipped: isCardFlipped,\n  };\n};\n","// TODO: add reducer for next state variables --> swModale(App), sideBarVisible(App), viewresultScreen(App), isFlipped(Itemcard)\n/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport {\n  SIDEBAR_VISIBILITY,\n  RESULT_SCREEN_VISIBILITY,\n  SW_MODALE_VISIBILITY,\n  IS_CARD_FLIPPED,\n} from './elementsVisibilityAC';\n\ninterface ElementsVisibilityState {\n  sidebarVisibile: boolean;\n  resultScreenVisible: boolean;\n  swModaleVisible: boolean;\n  isCardFlipped: boolean;\n}\n\ninterface ElementsVisibilityAction {\n  type: string;\n  sidebarVisibile?: boolean;\n  resultScreenVisible?: boolean;\n  swModaleVisible?: boolean;\n  isCardFlipped?: boolean;\n}\n\nconst initState: ElementsVisibilityState = {\n  sidebarVisibile: false,\n  resultScreenVisible: false,\n  swModaleVisible: false,\n  isCardFlipped: false,\n};\n\nexport default function elementsVisibilityReducer(\n  state = initState,\n  action: ElementsVisibilityAction\n): ElementsVisibilityState {\n  switch (action.type) {\n    case SIDEBAR_VISIBILITY: {\n      console.log('SIDEBAR_VISIBILITY settings');\n      let newState = null;\n      if (action.sidebarVisibile) {\n        newState = {\n          ...state,\n          sidebarVisibile: action.sidebarVisibile,\n        };\n      }\n      return newState as ElementsVisibilityState;\n    }\n    case RESULT_SCREEN_VISIBILITY: {\n      console.log('RESULT_SCREEN_VISIBILITY settings');\n      let newState = null;\n      if (action.resultScreenVisible) {\n        newState = {\n          ...state,\n          resultScreenVisible: action.resultScreenVisible,\n        };\n      }\n      return newState as ElementsVisibilityState;\n    }\n    case SW_MODALE_VISIBILITY: {\n      console.log('SW_MODALE_VISIBILITY settings');\n      let newState = null;\n      if (action.swModaleVisible) {\n        newState = {\n          ...state,\n          swModaleVisible: action.swModaleVisible,\n        };\n      }\n      return newState as ElementsVisibilityState;\n    }\n    case IS_CARD_FLIPPED: {\n      console.log('IS_CARD_FLIPPED settings');\n      let newState = null;\n      if (action.isCardFlipped) {\n        newState = {\n          ...state,\n          isCardFlipped: action.isCardFlipped,\n        };\n      }\n      return newState as ElementsVisibilityState;\n    }\n    default:\n      return state;\n  }\n}\n","/* eslint-disable object-shorthand */\n// TODO: add AC for next state variables --> answer(MainPage), isPlaying(App), isGameStarted(App), isBlocking(App), result(App)\n/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\n\nexport const IS_PLAYING = 'IS_PLAYING';\nexport const IS_GAME_STARTED = 'IS_GAME_STARTED';\nexport const IS_BLOCKING = 'IS_BLOCKING';\nexport const ADD_ANSWER = 'ADD_ANSWER';\nexport const SET_RESULT = 'SET_RESULT';\n\ninterface IsPlayingSetAC {\n  (isPlaying: boolean): {\n    type: string;\n    isPlaying: typeof isPlaying;\n  };\n}\n\ninterface IsGameStartedSetAC {\n  (isGameStarted: boolean): {\n    type: string;\n    isGameStarted: typeof isGameStarted;\n  };\n}\n\ninterface IsBlockingSetAC {\n  (isBlocking: boolean): {\n    type: string;\n    isBlocking: typeof isBlocking;\n  };\n}\n\ninterface AddAnswerAC {\n  (answer: boolean): {\n    type: string;\n    answer: typeof answer;\n  };\n}\n\ninterface SetResultAC {\n  (result: string): {\n    type: string;\n    result: typeof result;\n  };\n}\n\nexport const isPlayingSetAC: IsPlayingSetAC = (isPlaying) => {\n  return {\n    type: IS_PLAYING,\n    isPlaying: isPlaying,\n  };\n};\n\nexport const isGameStartedSetAC: IsGameStartedSetAC = (isGameStarted) => {\n  return {\n    type: IS_GAME_STARTED,\n    isGameStarted: isGameStarted,\n  };\n};\n\nexport const isBlockingSetAC: IsBlockingSetAC = (isBlocking) => {\n  return {\n    type: IS_BLOCKING,\n    isBlocking: isBlocking,\n  };\n};\n\nexport const addAnswerAC: AddAnswerAC = (answer) => {\n  return {\n    type: ADD_ANSWER,\n    answer: answer,\n  };\n};\n\nexport const setResultAC: SetResultAC = (result) => {\n  return {\n    type: SET_RESULT,\n    result: result,\n  };\n};\n","/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\n// TODO: add reducer for next state variables --> answer(MainPage), isPlaying(App), isGameStarted(App), isBlocking(App), result(App)\n\nimport { IS_PLAYING, IS_GAME_STARTED, IS_BLOCKING, ADD_ANSWER, SET_RESULT } from './gameProcessAC';\n\ninterface GameProcessState {\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  isBlocking: boolean;\n  answers: boolean[]; // waits for answer as boolean\n  result: string;\n}\n\ninterface GameProcessAction {\n  type: string;\n  isPlaying?: boolean;\n  isGameStarted?: boolean;\n  isBlocking?: boolean;\n  answer?: boolean;\n  result?: string;\n}\n\nconst initState: GameProcessState = {\n  isPlaying: false,\n  isGameStarted: false,\n  isBlocking: false,\n  answers: [], // waits for answer as boolean\n  result: '',\n};\n\nexport default function gameProcessReducer(\n  state = initState,\n  action: GameProcessAction\n): GameProcessState {\n  switch (action.type) {\n    case IS_PLAYING: {\n      console.log('IS_PLAYING settings');\n      let newState = null;\n      if (action.isPlaying) {\n        newState = {\n          ...state,\n          isPlaying: action.isPlaying,\n        };\n      }\n      return newState as GameProcessState;\n    }\n    case IS_GAME_STARTED: {\n      console.log('IS_GAME_STARTED settings');\n      let newState = null;\n      if (action.isGameStarted) {\n        newState = {\n          ...state,\n          isGameStarted: action.isGameStarted,\n        };\n      }\n      return newState as GameProcessState;\n    }\n    case IS_BLOCKING: {\n      console.log('IS_BLOCKING settings');\n      let newState = null;\n      if (action.isBlocking) {\n        newState = {\n          ...state,\n          isBlocking: action.isBlocking,\n        };\n      }\n      return newState as GameProcessState;\n    }\n    case ADD_ANSWER: {\n      console.log('ADD_ANSWER settings');\n      let newState = null;\n      if (action.answer) {\n        const newAnswers = state.answers;\n        newAnswers.push(action.answer);\n        newState = {\n          ...state,\n          answers: newAnswers,\n        };\n      }\n      return newState as GameProcessState;\n    }\n    case SET_RESULT: {\n      console.log('SET_RESULT settings');\n      let newState = null;\n      if (action.result) {\n        newState = {\n          ...state,\n          result: action.result,\n        };\n      }\n      return newState as GameProcessState;\n    }\n    default:\n      return state;\n  }\n}\n","/* eslint-disable object-shorthand */\n// TODO: add AC for next state variables --> isOffline(App), offlineContentVisible(App), forReload(CardHolder)\n\n/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\n\nexport const IS_OFFLINE = 'IS_OFFLINE';\nexport const IS_OFFLINE_CONTENT_VISIBLE = 'IS_OFFLINE_CONTENT_VISIBLE';\nexport const FOR_OFFLINE_RELOAD = 'FOR_OFFLINE_RELOAD';\n\ninterface IsOfflineSetAC {\n  (isOffline: boolean): {\n    type: string;\n    isOffline: typeof isOffline;\n  };\n}\n\ninterface IsOfflineContentVisibleSetAC {\n  (offlineContentVisible: boolean): {\n    type: string;\n    offlineContentVisible: typeof offlineContentVisible;\n  };\n}\n\ninterface ReloadOfflineAC {\n  (forReload: boolean): {\n    type: string;\n    forReload: typeof forReload;\n  };\n}\n\nexport const isOfflineSetAC: IsOfflineSetAC = (isOffline) => {\n  return {\n    type: IS_OFFLINE,\n    isOffline: isOffline,\n  };\n};\n\nexport const isOfflineContentVisibleSetAC: IsOfflineContentVisibleSetAC = (\n  offlineContentVisible\n) => {\n  return {\n    type: IS_OFFLINE_CONTENT_VISIBLE,\n    offlineContentVisible: offlineContentVisible,\n  };\n};\n\nexport const reloadOfflineAC: ReloadOfflineAC = (forReload) => {\n  return {\n    type: FOR_OFFLINE_RELOAD,\n    forReload: forReload,\n  };\n};\n","/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\n// TODO: add reducer for next state variables --> isOffline(App), offlineContentVisible(App), forReload(CardHolder)\n\nimport { IS_OFFLINE, IS_OFFLINE_CONTENT_VISIBLE, FOR_OFFLINE_RELOAD } from './offlineAC';\n\ninterface OfflineState {\n  isOffline: boolean;\n  offlineContentVisible: boolean;\n  forReload: boolean; // for comp reload if offline\n}\n\ninterface OfflineAction {\n  type: string;\n  isOffline?: boolean;\n  offlineContentVisible?: boolean;\n  forReload?: boolean;\n}\n\nconst initState: OfflineState = {\n  isOffline: false,\n  offlineContentVisible: false,\n  forReload: false,\n};\n\nexport default function offlineReducer(state = initState, action: OfflineAction): OfflineState {\n  switch (action.type) {\n    case IS_OFFLINE: {\n      console.log('IS_OFFLINE settings');\n      let newState = null;\n      if (action.isOffline) {\n        newState = {\n          ...state,\n          isOffline: action.isOffline,\n        };\n      }\n      return newState as OfflineState;\n    }\n    case IS_OFFLINE_CONTENT_VISIBLE: {\n      console.log('IS_OFFLINE_CONTENT_VISIBLE settings');\n      let newState = null;\n      if (action.offlineContentVisible) {\n        newState = {\n          ...state,\n          offlineContentVisible: action.offlineContentVisible,\n        };\n      }\n      return newState as OfflineState;\n    }\n    case FOR_OFFLINE_RELOAD: {\n      console.log('FOR_OFFLINE_RELOAD settings');\n      let newState = null;\n      if (action.forReload) {\n        newState = {\n          ...state,\n          forReload: action.forReload,\n        };\n      }\n      return newState as OfflineState;\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport appConfigReducer from './appConfigReducer';\nimport elementsVisibilityReducer from './elementsVisibilityReducer';\nimport gameProcessReducer from './gameProcessReducer';\nimport offlineReducer from './offlineReducer';\n\nconst combinedReducer = combineReducers({\n  appConfig: appConfigReducer,\n  elementVisibility: elementsVisibilityReducer,\n  gameProcess: gameProcessReducer,\n  offline: offlineReducer,\n});\n\nexport default combinedReducer;\n","import React, { useEffect, useState } from 'react';\nimport i18next from 'i18next';\nimport './PageInfoBlock.scss';\nimport data from '../../en.json';\n\ninterface PageInfoBlockProps {\n  isPlaying: boolean;\n  id: string;\n  newGameFunc: () => void;\n  isGameStarted: boolean;\n  restartGameFunc: () => void;\n  replayWord: () => void;\n}\n\nexport const PageInfoBlock: React.FC<PageInfoBlockProps> = ({\n  isGameStarted,\n  isPlaying,\n  id = undefined,\n  newGameFunc,\n  restartGameFunc,\n  replayWord,\n}) => {\n  let textSeen: string;\n  let otherText: string;\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      window.scrollTo(0, 0);\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  switch (id) {\n    case '1':\n      textSeen = 'Action (Set A)';\n      break;\n    case '2':\n      textSeen = 'Action (Set B)';\n      break;\n    case '3':\n      textSeen = 'Animal (Set A)';\n      break;\n    case '4':\n      textSeen = 'Animal (Set B)';\n      break;\n    case '5':\n      textSeen = 'Clothes';\n      break;\n    case '6':\n      textSeen = 'Emotions';\n      break;\n    default:\n      textSeen = '';\n      break;\n  }\n\n  switch (isPlaying) {\n    case true:\n      otherText = 'Now show your skills!';\n      break;\n    default:\n      otherText = 'Feel free to practice!';\n  }\n\n  return (\n    <div className=\"InteractiveBlock\">\n      <div>\n        <div className=\"InteractiveBox\">{!id && <h1>{i18next.t('hello')}</h1>}</div>\n        <div className=\"InteractiveBox mini\">{!id && <h2>{i18next.t('chooseCategory')}</h2>}</div>\n        <div className={`InteractiveBox${id ? '' : ' mini'}`}>\n          <h1>{id && `${textSeen} category. ${otherText}`}</h1>\n        </div>\n      </div>\n      <div className={`ButtonContainer${isPlaying && id && !isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`StartGameButton${isGameStarted || !isPlaying ? ' hide' : ''}`}\n          onClick={newGameFunc}\n        >\n          {i18next.t('start!')}\n        </button>\n      </div>\n      <div className={`inGameButtonsContainer${id && isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`RestartGameButton${isGameStarted ? '' : ' hide'}`}\n          onClick={restartGameFunc}\n        >\n          {i18next.t('restart')}\n        </button>\n        <button\n          type=\"button\"\n          className={`ReplayButton${isGameStarted ? '' : ' hide'}`}\n          onClick={replayWord}\n        >\n          {i18next.t('replay')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const { PUBLIC_URL } = process.env;\n\nexport const correctAudioSrc = 'audio/correct.mp3';\nexport const errorAudioSrc = 'audio/error.mp3';\nexport const offlineIndicatorShowTimeout = 2000;\nexport const offlineComponentShowTimeout = 7000;\n","import React from 'react';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport './CategoryCard.scss';\n\ninterface CategoryCardProps {\n  title: string;\n  image: string;\n  isPlaying: boolean;\n}\n\nexport const CategoryCard: React.FC<CategoryCardProps> = ({ isPlaying, title, image }) => {\n  return (\n    <div className=\"CategoryCard\">\n      {isPlaying}\n      <div className=\"CardImageContainer\">\n        <img className=\"CardImage\" alt={title} src={`${PUBLIC_URL}/${image}`} />\n      </div>\n      <div className=\"CategoryText\">{title}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { WordCard } from './interfaces';\n\ntype RandomizerFunc = () => number;\n// eslint-disable-next-line no-unused-vars\ntype ToArrayId = (id: string) => number;\n// eslint-disable-next-line no-unused-vars\ntype AudioFunc = (publicURL: string, src: string, mode: boolean) => void;\n// eslint-disable-next-line no-unused-vars\ntype SetAnswerFunc = (value: React.SetStateAction<boolean[]>) => void;\n\n/* eslint-disable */\ninterface GameFunction {\n  (\n    EO: React.MouseEvent | undefined,\n    cardsArray: React.MutableRefObject<WordCard[]>,\n    cardIndex: React.MutableRefObject<number>,\n    answersCount: React.MutableRefObject<number>,\n    chancesGiven: number,\n    correctAnswers: React.MutableRefObject<number>,\n    maxCorrectAnswers: number,\n    publicURL: string,\n    correctAudioSrc: string,\n    errorAudioSrc: string,\n    setAnswerFunc: SetAnswerFunc,\n    resultShowFunc: () => void\n  ): void;\n}\n/* eslint-enable */\n\nexport const randomizerFunc: RandomizerFunc = () => Math.random() - 0.5;\n// to randomize sort method\nexport const toArrayId: ToArrayId = (id: string) => Number(id) - 1;\n// to give useParam id a number value and decrease by 1 to match an array index\nexport const audioPlayFunc: AudioFunc = (publicURL, src, mode) => {\n  const sound = new Audio(`${publicURL}/${src}`);\n  sound.onloadeddata = () => {\n    let isPlaying: boolean;\n    sound.onplaying = () => {\n      isPlaying = true;\n    };\n    sound.onpause = () => {\n      isPlaying = false;\n    };\n    const playSound = () => {\n      if (sound.paused && !isPlaying) {\n        sound.play();\n      }\n    };\n    const pauseSound = () => {\n      if (!sound.paused && isPlaying) {\n        sound.pause();\n        sound.currentTime = 0;\n      }\n    };\n    if (mode) {\n      pauseSound();\n      playSound();\n    } else {\n      pauseSound();\n    }\n  };\n};\n\nlet timeOutAudio = false; // flag shows that we have a timed out audio\n// to play audio\n/* eslint-disable no-param-reassign */\nexport const gameMainFunction: GameFunction = (\n  EO,\n  cardsArray,\n  cardIndex,\n  answersCount,\n  chancesGiven,\n  correctAnswers,\n  maxCorrectAnswers,\n  publicURL,\n  correctAudioSrc,\n  errorAudioSrc,\n  setAnswerFunc,\n  resultShowFunc\n) => {\n  if (\n    cardsArray.current.length >= cardIndex.current + 1 &&\n    answersCount.current < chancesGiven &&\n    correctAnswers.current < maxCorrectAnswers\n  ) {\n    if (\n      (EO?.target as HTMLDivElement).dataset.word === cardsArray.current[cardIndex.current].word\n    ) {\n      timeOutAudio = false;\n      audioPlayFunc(publicURL, correctAudioSrc, false);\n      audioPlayFunc(publicURL, correctAudioSrc, true);\n      correctAnswers.current += 1;\n      setAnswerFunc((prevAnswers) => [...prevAnswers, true]);\n      cardIndex.current += 1;\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        timeOutAudio = false;\n        audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, false);\n        audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n      } else resultShowFunc();\n    } else {\n      audioPlayFunc(publicURL, errorAudioSrc, false);\n      audioPlayFunc(publicURL, errorAudioSrc, true);\n      setAnswerFunc((prevAnswers) => [...prevAnswers, false]);\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        if (!timeOutAudio) {\n          timeOutAudio = true;\n          setTimeout(() => {\n            audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, false);\n            audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n            timeOutAudio = false;\n          }, 1000);\n        }\n      } else resultShowFunc();\n    }\n  } else resultShowFunc();\n};\n// главная функция в игровом режиме\n/* eslint-enable */\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState } from 'react';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport { audioPlayFunc } from '../../../@core/functions';\nimport './ItemCard.scss';\n\ninterface ItemCardProps {\n  word: string;\n  translation: string;\n  audio: string;\n  image: string;\n  isPlaying: boolean;\n  inGameAnswer: () => void;\n  isGameStarted: boolean;\n}\n\nexport const ItemCard: React.FC<ItemCardProps> = ({\n  isPlaying,\n  word,\n  translation,\n  audio,\n  image,\n  inGameAnswer,\n  isGameStarted,\n}) => {\n  const [isFlipped, setIsFlipped] = useState<boolean>(false);\n  const audioPlay = () => {\n    if (!isPlaying) {\n      audioPlayFunc(PUBLIC_URL, audio, true);\n    }\n  };\n  const cardFlipper = () => {\n    audioPlayFunc(PUBLIC_URL, 'audio/cardflip.mp3', true);\n    setIsFlipped(!isFlipped);\n  };\n  const flipOnMouseLeaveOrClick = () => {\n    if (isFlipped === true) setIsFlipped(false);\n  };\n\n  return (\n    <div data-role=\"Mask\" onMouseLeave={flipOnMouseLeaveOrClick}>\n      <div className={`CardContainer${!isFlipped ? '' : ' flipped'}`}>\n        <div className=\"ItemCard front\">\n          <div\n            role=\"button\"\n            className={`CardImageContainer${!isPlaying ? '' : ' play'}`}\n            tabIndex={0}\n            data-word={word}\n            onClick={!isGameStarted ? audioPlay : inGameAnswer}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel\">\n              <button\n                id=\"soundPlayButton\"\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={audioPlay}\n              >\n                <img\n                  className=\"ControlPanelPlayButton\"\n                  alt=\"play-sound\"\n                  src={`${PUBLIC_URL}/play-button.png`}\n                />\n              </button>\n              <span className=\"ControlPanelText\">{word}</span>\n              <button\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={cardFlipper}\n              >\n                <img\n                  className=\"ControlPanelEyeButton\"\n                  alt=\"watch-translation\"\n                  src={`${PUBLIC_URL}/eye-button.png`}\n                />\n              </button>\n            </div>\n          )}\n        </div>\n        <div className=\"ItemCard back\">\n          <div\n            role=\"button\"\n            className=\"CardImageContainer\"\n            tabIndex={0}\n            onClick={flipOnMouseLeaveOrClick}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel flipped\">\n              <span className=\"ControlPanelText\">{translation}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","interface Categories {\n  title: string;\n  image: string;\n}\n\ninterface Card {\n  word: string;\n  translation: string;\n  image: string;\n  audioSrc: string;\n}\n\ntype Cards = Card[];\n\nexport const categories: Categories[] = [\n  {\n    title: 'Action (set A)',\n    image: 'img/action-set-a.jpg',\n  },\n  {\n    title: 'Action (set B)',\n    image: 'img/action-set-b.jpg',\n  },\n  {\n    title: 'Animal (set A)',\n    image: 'img/animal-set-a.jpg',\n  },\n  {\n    title: 'Animal (set B)',\n    image: 'img/animal-set-b.jpg',\n  },\n  {\n    title: 'Clothes',\n    image: 'img/clothes.jpg',\n  },\n  {\n    title: 'Emotions',\n    image: 'img/emotions.jpg',\n  },\n];\n\nexport const cards: Cards[] = [\n  [\n    {\n      word: 'cry',\n      translation: 'плакать',\n      image: 'img/cry.jpg',\n      audioSrc: 'audio/cry.mp3',\n    },\n    {\n      word: 'dance',\n      translation: 'танцевать',\n      image: 'img/dance.jpg',\n      audioSrc: 'audio/dance.mp3',\n    },\n    {\n      word: 'dive',\n      translation: 'нырять',\n      image: 'img/dive.jpg',\n      audioSrc: 'audio/dive.mp3',\n    },\n    {\n      word: 'draw',\n      translation: 'рисовать',\n      image: 'img/draw.jpg',\n      audioSrc: 'audio/draw.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'ловить рыбу',\n      image: 'img/fish.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'fly',\n      translation: 'летать',\n      image: 'img/fly.jpg',\n      audioSrc: 'audio/fly.mp3',\n    },\n    {\n      word: 'hug',\n      translation: 'обнимать',\n      image: 'img/hug.jpg',\n      audioSrc: 'audio/hug.mp3',\n    },\n    {\n      word: 'jump',\n      translation: 'прыгать',\n      image: 'img/jump.jpg',\n      audioSrc: 'audio/jump.mp3',\n    },\n  ],\n  [\n    {\n      word: 'open',\n      translation: 'открывать',\n      image: 'img/open.jpg',\n      audioSrc: 'audio/open.mp3',\n    },\n    {\n      word: 'play',\n      translation: 'играть',\n      image: 'img/play.jpg',\n      audioSrc: 'audio/play.mp3',\n    },\n    {\n      word: 'point',\n      translation: 'указывать',\n      image: 'img/point.jpg',\n      audioSrc: 'audio/point.mp3',\n    },\n    {\n      word: 'ride',\n      translation: 'ездить',\n      image: 'img/ride.jpg',\n      audioSrc: 'audio/ride.mp3',\n    },\n    {\n      word: 'run',\n      translation: 'бегать',\n      image: 'img/run.jpg',\n      audioSrc: 'audio/run.mp3',\n    },\n    {\n      word: 'sing',\n      translation: 'петь',\n      image: 'img/sing.jpg',\n      audioSrc: 'audio/sing.mp3',\n    },\n    {\n      word: 'skip',\n      translation: 'пропускать, прыгать',\n      image: 'img/skip.jpg',\n      audioSrc: 'audio/skip.mp3',\n    },\n    {\n      word: 'swim',\n      translation: 'плавать',\n      image: 'img/swim.jpg',\n      audioSrc: 'audio/swim.mp3',\n    },\n  ],\n  [\n    {\n      word: 'cat',\n      translation: 'кот',\n      image: 'img/cat.jpg',\n      audioSrc: 'audio/cat.mp3',\n    },\n    {\n      word: 'chick',\n      translation: 'цыплёнок',\n      image: 'img/chick.jpg',\n      audioSrc: 'audio/chick.mp3',\n    },\n    {\n      word: 'chicken',\n      translation: 'курица',\n      image: 'img/chicken.jpg',\n      audioSrc: 'audio/chicken.mp3',\n    },\n    {\n      word: 'dog',\n      translation: 'собака',\n      image: 'img/dog.jpg',\n      audioSrc: 'audio/dog.mp3',\n    },\n    {\n      word: 'horse',\n      translation: 'лошадь',\n      image: 'img/horse.jpg',\n      audioSrc: 'audio/horse.mp3',\n    },\n    {\n      word: 'pig',\n      translation: 'свинья',\n      image: 'img/pig.jpg',\n      audioSrc: 'audio/pig.mp3',\n    },\n    {\n      word: 'rabbit',\n      translation: 'кролик',\n      image: 'img/rabbit.jpg',\n      audioSrc: 'audio/rabbit.mp3',\n    },\n    {\n      word: 'sheep',\n      translation: 'овца',\n      image: 'img/sheep.jpg',\n      audioSrc: 'audio/sheep.mp3',\n    },\n  ],\n  [\n    {\n      word: 'bird',\n      translation: 'птица',\n      image: 'img/bird.jpg',\n      audioSrc: 'audio/bird.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'рыба',\n      image: 'img/fish1.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'frog',\n      translation: 'жаба',\n      image: 'img/frog.jpg',\n      audioSrc: 'audio/frog.mp3',\n    },\n    {\n      word: 'giraffe',\n      translation: 'жирафа',\n      image: 'img/giraffe.jpg',\n      audioSrc: 'audio/giraffe.mp3',\n    },\n    {\n      word: 'lion',\n      translation: 'лев',\n      image: 'img/lion.jpg',\n      audioSrc: 'audio/lion.mp3',\n    },\n    {\n      word: 'mouse',\n      translation: 'мышь',\n      image: 'img/mouse.jpg',\n      audioSrc: 'audio/mouse.mp3',\n    },\n    {\n      word: 'turtle',\n      translation: 'черепаха',\n      image: 'img/turtle.jpg',\n      audioSrc: 'audio/turtle.mp3',\n    },\n    {\n      word: 'dolphin',\n      translation: 'дельфин',\n      image: 'img/dolphin.jpg',\n      audioSrc: 'audio/dolphin.mp3',\n    },\n  ],\n  [\n    {\n      word: 'skirt',\n      translation: 'юбка',\n      image: 'img/skirt.jpg',\n      audioSrc: 'audio/skirt.mp3',\n    },\n    {\n      word: 'pants',\n      translation: 'брюки',\n      image: 'img/pants.jpg',\n      audioSrc: 'audio/pants.mp3',\n    },\n    {\n      word: 'blouse',\n      translation: 'блузка',\n      image: 'img/blouse.jpg',\n      audioSrc: 'audio/blouse.mp3',\n    },\n    {\n      word: 'dress',\n      translation: 'платье',\n      image: 'img/dress.jpg',\n      audioSrc: 'audio/dress.mp3',\n    },\n    {\n      word: 'boot',\n      translation: 'ботинок',\n      image: 'img/boot.jpg',\n      audioSrc: 'audio/boot.mp3',\n    },\n    {\n      word: 'shirt',\n      translation: 'рубашка',\n      image: 'img/shirt.jpg',\n      audioSrc: 'audio/shirt.mp3',\n    },\n    {\n      word: 'coat',\n      translation: 'пальто',\n      image: 'img/coat.jpg',\n      audioSrc: 'audio/coat.mp3',\n    },\n    {\n      word: 'shoe',\n      translation: 'туфли',\n      image: 'img/shoe.jpg',\n      audioSrc: 'audio/shoe.mp3',\n    },\n  ],\n  [\n    {\n      word: 'sad',\n      translation: 'грустный',\n      image: 'img/sad.jpg',\n      audioSrc: 'audio/sad.mp3',\n    },\n    {\n      word: 'angry',\n      translation: 'сердитый',\n      image: 'img/angry.jpg',\n      audioSrc: 'audio/angry.mp3',\n    },\n    {\n      word: 'happy',\n      translation: 'счастливый',\n      image: 'img/happy.jpg',\n      audioSrc: 'audio/happy.mp3',\n    },\n    {\n      word: 'tired',\n      translation: 'уставший',\n      image: 'img/tired.jpg',\n      audioSrc: 'audio/tired.mp3',\n    },\n    {\n      word: 'surprised',\n      translation: 'удивлённый',\n      image: 'img/surprised.jpg',\n      audioSrc: 'audio/surprised.mp3',\n    },\n    {\n      word: 'scared',\n      translation: 'испуганный',\n      image: 'img/scared.jpg',\n      audioSrc: 'audio/scared.mp3',\n    },\n    {\n      word: 'smile',\n      translation: 'улыбка',\n      image: 'img/smile.jpg',\n      audioSrc: 'audio/smile.mp3',\n    },\n    {\n      word: 'laugh',\n      translation: 'смех',\n      image: 'img/laugh.jpg',\n      audioSrc: 'audio/laugh.mp3',\n    },\n  ],\n];\n","/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Prompt } from 'react-router';\nimport { CategoryCard } from '../Card/CategoryCard/CategoryCard';\nimport { ItemCard } from '../Card/ItemCard/ItemCard';\nimport { categories, cards } from '../../cardData';\nimport { toArrayId } from '../../@core/functions';\nimport './CardHolder.scss';\n\ninterface CardHolderProps {\n  offlineContentVisible: boolean;\n  isOffline: boolean;\n  isPlaying: boolean;\n  id: string;\n  isGameStarted: boolean;\n  gameStepsFunc: () => void;\n  isBlocking: boolean;\n}\n\nexport const CardHolder: React.FC<CardHolderProps> = ({\n  offlineContentVisible,\n  isOffline,\n  isBlocking,\n  isPlaying,\n  id,\n  isGameStarted,\n  gameStepsFunc,\n}) => {\n  const [forReload, setForReload] = useState(false);\n\n  const pageReload = () => {\n    setForReload(!forReload);\n  };\n\n  useEffect(() => {\n    if (isGameStarted) {\n      window.onbeforeunload = () => true;\n    } else {\n      window.onbeforeunload = null;\n    }\n  });\n\n  return (\n    <>\n      <Prompt when={isBlocking} message=\"You will lose your result. Are you sure?\" />\n      <div className={`CardHolder${!id ? '' : !offlineContentVisible ? ' word' : ' offline'}`}>\n        {!id &&\n          categories.map((elem, i) => {\n            const indexToId = i + 1; // for array index to match route\n            return (\n              <div className=\"Card\" key={elem.title}>\n                <Link to={`category/${indexToId}`} className=\"Link\">\n                  <CategoryCard isPlaying={isPlaying} title={elem.title} image={elem.image} />\n                </Link>\n              </div>\n            );\n          })}\n        {id &&\n          !offlineContentVisible &&\n          cards[toArrayId(id)].map((elem) => {\n            return (\n              <ItemCard\n                inGameAnswer={gameStepsFunc}\n                isPlaying={isPlaying}\n                word={elem.word}\n                translation={elem.translation}\n                image={elem.image}\n                audio={elem.audioSrc}\n                key={elem.word}\n                isGameStarted={isGameStarted}\n              />\n            );\n          })}\n        {id && offlineContentVisible && (\n          <div className=\"offlineContent\">\n            <h3 className=\"offlineContentMessage\">\n              OOPS! The page is offline.\n              <br />\n              Please check your internet connection and reload the page!\n            </h3>\n            <button type=\"button\" className=\"offlineContentReloadButton\" onClick={pageReload}>\n              RELOAD\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport i18next from 'i18next';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport data from '../../en.json';\nimport './StatsBlock.scss';\n\nexport interface StatsBlockProps {\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  id: string;\n  answers: boolean[];\n}\n\nexport const StatsBlock: React.FC<StatsBlockProps> = ({ answers, isGameStarted, id }) => {\n  const [innerWidth, setInnerWidth] = useState<number>(1600);\n  const [language, setLanguage] = useState('en');\n  const triggerWidth = 820; // changes stats block style at this point\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  function setWindowInnerWidth(): void {\n    setInnerWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  });\n\n  useEffect(() => {\n    setInnerWidth(window.innerWidth);\n    window.addEventListener('load', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  }, []);\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`StatsBlockContainer${innerWidth <= triggerWidth ? ' mini' : ''}`}>\n      {innerWidth > triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('answers')}</span>\n          </div>\n          {isGameStarted &&\n            answers.map((el, i) => {\n              return (\n                <div className=\"IconContainer\" key={`key${i + 1}`}>\n                  <img\n                    className=\"Icon\"\n                    alt={`icon${i}`}\n                    src={`${PUBLIC_URL}/img/${el === true ? 'correct.png' : 'wrong.png'}`}\n                  />\n                </div>\n              );\n            })}\n        </div>\n      )}\n      {innerWidth <= triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game mini' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('correct')}</span>\n          </div>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('wrong')}</span>\n          </div>\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game correct' : ''}`}>\n              {answers.filter((el) => el === true).length}\n            </div>\n          )}\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game wrong' : ''}`}>\n              {answers.filter((el) => el === false).length}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PageInfoBlock } from '../PageInfoBlock/PageInfoBlock';\nimport { CardHolder } from '../Cardholder/CardHolder';\nimport { StatsBlock } from '../StatsBlock/StatsBlock';\nimport { cards } from '../../cardData';\nimport { randomizerFunc, toArrayId, audioPlayFunc, gameMainFunction } from '../../@core/functions';\nimport { GetResult, MatchParams, WordCard } from '../../@core/interfaces';\nimport { PUBLIC_URL, correctAudioSrc, errorAudioSrc } from '../../@core/constants';\nimport './MainPage.scss';\n\ninterface MainPageProps {\n  offlineContentVisible: boolean;\n  isOffline: boolean;\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  gameStartedToggle: () => void;\n  resultScreenVisibilityToggle: () => void;\n  getResult: GetResult;\n  isBlocking: boolean;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const MainPage: React.FC<MainPageProps> = ({\n  offlineContentVisible,\n  isOffline,\n  isBlocking,\n  isPlaying,\n  isGameStarted,\n  gameStartedToggle,\n  resultScreenVisibilityToggle,\n  getResult,\n  setIsBlockingToggle,\n}) => {\n  const [answers, setAnswer] = useState<boolean[]>([]);\n  const idParam = useParams<MatchParams>();\n\n  const cardsArrS = useRef<WordCard[]>([]);\n  const finalResult = useRef<string>('');\n  const cardIndex = useRef<number>(0);\n  const correctAnswers = useRef<number>(0);\n  const answersCount = useRef<number>(0);\n\n  const chancesGiven = 10; // количество ответов\n  const maxCorrectAnswers = 8; // максимальное количество правильных ответов\n  const maxPercent = 100;\n\n  const clearAll = () => {\n    setAnswer([]);\n    cardsArrS.current = [];\n    cardIndex.current = 0;\n    answersCount.current = 0;\n    finalResult.current = '';\n    correctAnswers.current = 0;\n  };\n\n  const resultScreenShow = () => {\n    finalResult.current = `${(maxPercent / maxCorrectAnswers) * correctAnswers.current}%`;\n    getResult(finalResult.current);\n    resultScreenVisibilityToggle();\n    setIsBlockingToggle(false);\n  };\n\n  const gameStepsFunc = (EO?: React.MouseEvent) => {\n    gameMainFunction(\n      EO,\n      cardsArrS,\n      cardIndex,\n      answersCount,\n      chancesGiven,\n      correctAnswers,\n      maxCorrectAnswers,\n      PUBLIC_URL,\n      correctAudioSrc,\n      errorAudioSrc,\n      setAnswer,\n      resultScreenShow\n    );\n  };\n\n  const startGameFunc = () => {\n    cardsArrS.current = cards[toArrayId(idParam.id)].slice().sort(randomizerFunc);\n    if (cardsArrS) audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const replayWord = () => {\n    audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const restartGameFunc = () => {\n    clearAll();\n    startGameFunc();\n  };\n\n  const newGameFunc = () => {\n    clearAll();\n    gameStartedToggle();\n    startGameFunc();\n    setIsBlockingToggle(true);\n  };\n\n  useEffect(() => {\n    clearAll();\n    setIsBlockingToggle(false);\n    if (isGameStarted) gameStartedToggle();\n  }, [idParam.id]);\n\n  return (\n    <div className=\"MainPage\">\n      <PageInfoBlock\n        isGameStarted={isGameStarted}\n        isPlaying={isPlaying}\n        id={idParam.id}\n        newGameFunc={newGameFunc}\n        restartGameFunc={restartGameFunc}\n        replayWord={replayWord}\n      />\n      <CardHolder\n        offlineContentVisible={offlineContentVisible}\n        isOffline={isOffline}\n        isBlocking={isBlocking}\n        isPlaying={isPlaying}\n        id={idParam.id}\n        isGameStarted={isGameStarted}\n        gameStepsFunc={gameStepsFunc}\n      />\n      {isPlaying && (\n        <StatsBlock\n          answers={answers}\n          isPlaying={isPlaying}\n          isGameStarted={isGameStarted}\n          id={idParam.id}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport Switch from 'react-switch';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport './Header.scss';\n\ninterface HeaderProps {\n  offlineContentVisible: boolean;\n  sideBarToggle: () => void;\n  setModeToggle: () => void;\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const Header: React.FC<HeaderProps> = ({\n  offlineContentVisible,\n  setIsBlockingToggle,\n  isGameStarted,\n  isPlaying,\n  sideBarToggle,\n  setModeToggle,\n}) => {\n  const checkToggle = () => {\n    if (isGameStarted && isPlaying) {\n      setIsBlockingToggle(false);\n      setModeToggle();\n    } else setModeToggle();\n  };\n  return (\n    <div className=\"Header\" style={{ backgroundImage: `url(${PUBLIC_URL}/background.jpg)` }}>\n      <div role=\"button\" className=\"SideBarOpenButton\" onClick={sideBarToggle} aria-hidden=\"true\">\n        |||\n      </div>\n      {!offlineContentVisible && (\n        <div className=\"ModeSelector\">\n          <span className=\"ModeText\">{isPlaying ? 'PLAY' : 'TRAIN'}</span>\n          <Switch\n            onHandleColor=\"#FFFFFF\"\n            onColor=\"#99AE99\"\n            uncheckedIcon={false}\n            checkedIcon={false}\n            checked={isPlaying}\n            className=\"Switch\"\n            onChange={checkToggle}\n            height={20}\n            width={48}\n            handleDiameter={18}\n            boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.2)\"\n            activeBoxShadow=\"0px 0px 1px 5px rgba(0, 52, 0, 0.4)\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport i18next from 'i18next';\nimport './NetworkIndicator.scss';\nimport data from '../../en.json';\nimport { offlineIndicatorShowTimeout } from '../../@core/constants';\n\ninterface NetworkIndicatorProps {\n  isOffline: boolean;\n}\n\nexport const NetworkIndicator: React.FC<NetworkIndicatorProps> = ({ isOffline }) => {\n  const [language, setLanguage] = useState('en');\n  const [indicatorView, setIndicatorView] = useState(false);\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  const indicatorViewToggle = (flag: boolean) => {\n    setIndicatorView(flag);\n  };\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  useEffect(() => {\n    if (isOffline) {\n      setTimeout(() => indicatorViewToggle(true), offlineIndicatorShowTimeout);\n    } else {\n      indicatorViewToggle(false);\n    }\n  }, [isOffline]);\n\n  return (\n    <div className={`IndicatorContainer${indicatorView ? ' view' : ' hide'}`}>\n      <div className=\"IndicatorText\">\n        <span>{i18next.t('offline')}</span>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { categories } from '../../cardData';\nimport './SideBar.scss';\n\ninterface SideBarProps {\n  isPlaying: boolean;\n  cbToggle: () => void;\n}\n\nexport const SideBar: React.FC<SideBarProps> = ({ isPlaying, cbToggle }) => {\n  return (\n    <div className=\"SideBarContainer\">\n      <div\n        style={{\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'end',\n          marginTop: '10px',\n        }}\n      >\n        <button\n          type=\"button\"\n          className={`SideBarMenuItem${isPlaying ? ' close play' : ' close'}`}\n          onClick={cbToggle}\n        >\n          &#9668;\n        </button>\n      </div>\n      <ul>\n        <li>\n          <NavLink\n            to=\"/\"\n            onClick={cbToggle}\n            className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n          >\n            Main Page\n          </NavLink>\n        </li>\n\n        {categories.map((elem, i) => {\n          return (\n            <li key={elem.title}>\n              <NavLink\n                to={`/category/${i + 1}`} // +1 cause of array starts on index 0\n                onClick={cbToggle}\n                className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n              >\n                {elem.title}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport i18next from 'i18next';\nimport './ResultScreen.scss';\nimport data from '../../en.json';\n\ninterface ResultScreenProps {\n  resultScreenVisibilityToggle: () => void;\n  viewResultScreen: boolean;\n  finalResult: string;\n}\n\nexport const ResultScreen: React.FC<ResultScreenProps> = ({\n  resultScreenVisibilityToggle,\n  viewResultScreen,\n  finalResult,\n}) => {\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`ResultScreen${viewResultScreen ? ' view' : ' hide'}`}>\n      <div className=\"ResultPercent\">\n        <h2>{i18next.t('result')}</h2>\n        <h1>{finalResult}</h1>\n        <button type=\"button\" onClick={resultScreenVisibilityToggle}>\n          {i18next.t('close')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport i18next from 'i18next';\nimport data from '../../en.json';\nimport './UpdateSWMessage.scss';\n\nexport interface UpdateSWMessageProps {\n  swModaleView: boolean;\n  onReloadCancel: () => void;\n}\n\nexport const UpdateSWMessage: React.FC<UpdateSWMessageProps> = ({\n  swModaleView,\n  onReloadCancel,\n}) => {\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`UpdateSWContainer${swModaleView ? ' view' : ' hide'}`}>\n      <div className=\"UpdateSWMessage\">\n        <span>{i18next.t('swReloadMessage')}</span>\n        <div className=\"UpdateSWButtons\">\n          <button className=\"UpdateButton\" id=\"okButton\" type=\"button\">\n            OK\n          </button>\n          <button className=\"UpdateButton\" type=\"button\" onClick={onReloadCancel}>\n            CANCEL\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n// import { connect } from 'react-redux';\nimport i18next from 'i18next';\nimport { MainPage } from './components/MainPage/MainPage';\nimport { Header } from './components/Header/Header';\nimport { NetworkIndicator } from './components/NetworkIndicator/NetworkIndicator';\nimport { SideBar } from './components/SideBar/SideBar';\nimport { ResultScreen } from './components/ResultScreen/ResultScreen';\nimport { UpdateSWMessage } from './components/UpdateSWMessage/UpdateSWMessage';\nimport { PUBLIC_URL, offlineComponentShowTimeout } from './@core/constants';\nimport { GetResult } from './@core/interfaces';\nimport data from './en.json';\nimport './App.scss';\nimport './components/SideBar/SideBar.scss';\n\nconst App: React.FC = () => {\n  const [isPlaying, isPlayingToggle] = useState<boolean>(false);\n  const [isOffline, isOfflineToggle] = useState<boolean>(false);\n  const [swModaleView, setModaleView] = useState(false);\n  const [sideBarVisible, changeSideBarVisibility] = useState<boolean>(false);\n  const [isGameStarted, setIsGameStarted] = useState<boolean>(false);\n  const [viewResultScreen, setViewResultScreen] = useState<boolean>(false);\n  const [isBlocking, setIsBlocking] = useState<boolean>(false);\n  const [result, setResult] = useState<string>('');\n  const [language, setLanguage] = useState('en');\n  const [offlineContentVisible, setOfflineContentVisible] = useState(false);\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n  const offlineContentVisibilityToggle = (flag: boolean) => {\n    setOfflineContentVisible(flag);\n  };\n\n  const setIsOffline = () => isOfflineToggle(true);\n  const setIsOnline = () => {\n    isOfflineToggle(false);\n    offlineContentVisibilityToggle(false);\n  };\n  const sideBarToggle = () => changeSideBarVisibility(!sideBarVisible);\n  const setModaleViewToggle = (value: boolean) => setModaleView(value);\n  const setMode = () => {\n    isPlayingToggle(!isPlaying);\n    if (isGameStarted === true) setIsGameStarted(false);\n  };\n  const gameStartedToggle = () => {\n    setIsGameStarted(!isGameStarted);\n    setResult('');\n  };\n  const resultScreenVisibilityToggle = () => {\n    setViewResultScreen(!viewResultScreen);\n    if (isPlaying) setMode();\n  };\n  const getResult: GetResult = (res) => setResult(res);\n  const setIsBlockingToggle = (flag: boolean) => setIsBlocking(flag);\n\n  window.addEventListener('offline', setIsOffline, false);\n  window.addEventListener('online', setIsOnline, false);\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  useEffect(() => {\n    if (isOffline)\n      setTimeout(() => offlineContentVisibilityToggle(true), offlineComponentShowTimeout);\n  }, [isOffline]);\n\n  const askUserToUpdate = (reg: ServiceWorkerRegistration) => {\n    setModaleViewToggle(true);\n    const okButton = document.getElementById('okButton') as HTMLButtonElement;\n    okButton.onclick = () => {\n      reg.waiting?.postMessage({ type: 'SKIP_WAITING' });\n      setModaleViewToggle(false);\n    };\n  };\n\n  window.addEventListener('load', async () => {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      try {\n        const reg = await navigator.serviceWorker.register(\n          `${process.env.PUBLIC_URL}/service-worker.js`\n        );\n        reg.onupdatefound = () => {\n          const installingWorker = reg.installing;\n          if (installingWorker) {\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                askUserToUpdate(reg); // shows update message\n              }\n            };\n          }\n        };\n      } catch (e) {\n        console.log('fail', e);\n      }\n    }\n  });\n\n  const onReloadCancel = () => {\n    setModaleViewToggle(false);\n  };\n\n  navigator.serviceWorker.addEventListener('controllerchange', () => {\n    window.location.reload();\n  });\n\n  return (\n    <BrowserRouter basename={PUBLIC_URL}>\n      <div\n        className=\"App\"\n        style={{\n          backgroundImage: `url(${PUBLIC_URL}/background.jpg`,\n          backgroundRepeat: 'repeat',\n          backgroundAttachment: 'fixed',\n        }}\n      >\n        <header>\n          <div className={`${sideBarVisible ? 'SideBar active' : 'SideBar'}`}>\n            <SideBar isPlaying={isPlaying} cbToggle={sideBarToggle} />\n          </div>\n          <Header\n            offlineContentVisible={offlineContentVisible}\n            isGameStarted={isGameStarted}\n            setIsBlockingToggle={setIsBlockingToggle}\n            isPlaying={isPlaying}\n            sideBarToggle={sideBarToggle}\n            setModeToggle={setMode}\n          />\n        </header>\n        <main>\n          <UpdateSWMessage swModaleView={swModaleView} onReloadCancel={onReloadCancel} />\n          <NetworkIndicator isOffline={isOffline} />\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <MainPage\n                offlineContentVisible={offlineContentVisible}\n                isOffline={isOffline}\n                isPlaying={isPlaying}\n                isGameStarted={isGameStarted}\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                setIsBlockingToggle={setIsBlockingToggle}\n                isBlocking={isBlocking}\n              />\n            )}\n          />\n          <Route\n            path=\"/category/:id\"\n            render={() => (\n              <MainPage\n                offlineContentVisible={offlineContentVisible}\n                isOffline={isOffline}\n                isPlaying={isPlaying}\n                isGameStarted={isGameStarted}\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                isBlocking={isBlocking}\n                setIsBlockingToggle={setIsBlockingToggle}\n              />\n            )}\n          />\n          <ResultScreen\n            resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n            viewResultScreen={viewResultScreen}\n            finalResult={result}\n          />\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport combinedReducer from './state/reducers';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(combinedReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}