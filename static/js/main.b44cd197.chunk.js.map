{"version":3,"sources":["components/PageInfoBlock/PageInfoBlock.tsx","@core/constants.ts","components/Card/CategoryCard/CategoryCard.tsx","@core/functions.ts","components/Card/ItemCard/ItemCard.tsx","cardData.ts","components/Cardholder/CardHolder.tsx","components/StatsBlock/StatsBlock.tsx","components/MainPage/MainPage.tsx","components/Header/Header.tsx","components/NetworkIndicator/NetworkIndicator.tsx","components/SideBar/SideBar.tsx","components/ResultScreen/ResultScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PageInfoBlock","textSeen","otherText","isGameStarted","isPlaying","id","undefined","newGameFunc","restartGameFunc","replayWord","useState","language","setLanguage","useEffect","window","scrollTo","lang","i18next","init","lng","resources","data","className","t","type","onClick","PUBLIC_URL","process","CategoryCard","title","image","alt","src","randomizerFunc","Math","random","toArrayId","Number","audioPlayFunc","publicURL","mode","sound","Audio","onloadeddata","onplaying","onpause","pauseSound","paused","pause","currentTime","play","timeOutAudio","ItemCard","word","translation","audio","inGameAnswer","isFlipped","setIsFlipped","audioPlay","flipOnMouseLeaveOrClick","onMouseLeave","role","tabIndex","style","border","backgroundColor","categories","cards","audioSrc","CardHolder","offlineContentVisible","isOffline","isBlocking","gameStepsFunc","forReload","setForReload","onbeforeunload","when","message","map","elem","i","indexToId","to","StatsBlock","answers","innerWidth","setInnerWidth","setWindowInnerWidth","addEventListener","removeEventListener","el","filter","length","MainPage","gameStartedToggle","resultScreenVisibilityToggle","getResult","setIsBlockingToggle","setAnswer","idParam","useParams","cardsArrS","useRef","finalResult","cardIndex","correctAnswers","answersCount","clearAll","current","resultScreenShow","maxPercent","startGameFunc","slice","sort","EO","cardsArray","chancesGiven","maxCorrectAnswers","correctAudioSrc","errorAudioSrc","setAnswerFunc","resultShowFunc","target","dataset","prevAnswers","setTimeout","gameMainFunction","Header","sideBarToggle","setModeToggle","backgroundImage","onHandleColor","onColor","uncheckedIcon","checkedIcon","checked","onChange","height","width","handleDiameter","boxShadow","activeBoxShadow","NetworkIndicator","viewNetworkStatus","SideBar","cbToggle","display","flexDirection","justifyContent","marginTop","ResultScreen","viewResultScreen","App","isPlayingToggle","isOfflineToggle","swModaleView","setModaleView","sideBarVisible","changeSideBarVisibility","setIsGameStarted","setViewResultScreen","setIsBlocking","result","setResult","setOfflineContentVisible","offlineContentVisibilityToggle","flag","setModaleViewToggle","value","setMode","res","console","log","askUserToUpdate","reg","document","getElementById","onclick","waiting","postMessage","a","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","location","reload","basename","backgroundRepeat","backgroundAttachment","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"g9BAcaA,EAA8C,SAAC,GAOrD,IACDC,EACAC,EARJC,EAMI,EANJA,cACAC,EAKI,EALJA,UAKI,IAJJC,UAII,WAJCC,EAID,EAHJC,EAGI,EAHJA,YACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,WAIA,EAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAoBA,OAVAC,qBAAU,WACJT,GACFU,OAAOC,SAAS,EAAG,KAEpB,CAACX,IAEJS,qBAAU,WAda,IAACG,IAeP,KAdfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYD,MAaNN,GACN,IAAK,IACHJ,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,iBACX,MACF,IAAK,IACHA,EAAW,UACX,MACF,IAAK,IACHA,EAAW,WACX,MACF,QACEA,EAAW,GAIf,IACO,IADCG,EAEJF,EAAY,6BAGZA,EAAY,yBAGhB,OACE,sBAAKoB,UAAU,mBAAf,UACE,gCACE,qBAAKA,UAAU,iBAAf,UAAkCjB,GAAM,6BAAKY,IAAQM,EAAE,aACvD,qBAAKD,UAAU,sBAAf,UAAuCjB,GAAM,6BAAKY,IAAQM,EAAE,sBAC5D,qBAAKD,UAAS,wBAAmBjB,EAAK,GAAK,SAA3C,SACE,6BAAKA,GAAE,UAAOJ,EAAP,sBAA6BC,UAGxC,qBAAKoB,UAAS,yBAAoBlB,GAAaC,IAAOF,EAAgB,QAAU,IAAhF,SACE,wBACEqB,KAAK,SACLF,UAAS,yBAAoBnB,IAAkBC,EAAY,QAAU,IACrEqB,QAASlB,EAHX,SAKGU,IAAQM,EAAE,cAGf,sBAAKD,UAAS,gCAA2BjB,GAAMF,EAAgB,QAAU,IAAzE,UACE,wBACEqB,KAAK,SACLF,UAAS,2BAAsBnB,EAAgB,GAAK,SACpDsB,QAASjB,EAHX,SAKGS,IAAQM,EAAE,aAEb,wBACEC,KAAK,SACLF,UAAS,sBAAiBnB,EAAgB,GAAK,SAC/CsB,QAAShB,EAHX,SAKGQ,IAAQM,EAAE,mBC3GNG,EAAeC,oBCUjBC,G,MAA4C,SAAC,GAAiC,IAA/BxB,EAA8B,EAA9BA,UAAWyB,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC5E,OACE,sBAAKR,UAAU,eAAf,UACGlB,EACD,qBAAKkB,UAAU,qBAAf,SACE,qBAAKA,UAAU,YAAYS,IAAKF,EAAOG,IAAG,UAAKN,EAAL,YAAmBI,OAE/D,qBAAKR,UAAU,eAAf,SAA+BO,S,QCaxBI,EAAiC,kBAAMC,KAAKC,SAAW,IAEvDC,EAAuB,SAAC/B,GAAD,OAAgBgC,OAAOhC,GAAM,GAEpDiC,EAA2B,SAACC,EAAWP,EAAKQ,GACvD,IAAMC,EAAQ,IAAIC,MAAJ,UAAaH,EAAb,YAA0BP,IACxCS,EAAME,aAAe,WACnB,IAAIvC,EACJqC,EAAMG,UAAY,WAChBxC,GAAY,GAEdqC,EAAMI,QAAU,WACdzC,GAAY,GAEd,IAKM0C,EAAa,YACZL,EAAMM,QAAU3C,IACnBqC,EAAMO,QACNP,EAAMQ,YAAc,IAGpBT,GACFM,IAXIL,EAAMM,SAAW3C,GACnBqC,EAAMS,QAaRJ,MAKFK,GAAe,EChDNC,G,MAAoC,SAAC,GAQ3C,IAPLhD,EAOI,EAPJA,UACAiD,EAMI,EANJA,KACAC,EAKI,EALJA,YACAC,EAII,EAJJA,MACAzB,EAGI,EAHJA,MACA0B,EAEI,EAFJA,aACArD,EACI,EADJA,cAEA,EAAkCO,oBAAkB,GAApD,mBAAO+C,EAAP,KAAkBC,EAAlB,KACMC,EAAY,WACXvD,GACHkC,EAAcZ,EAAY6B,GAAO,IAO/BK,EAA0B,YACZ,IAAdH,GAAoBC,GAAa,IAGvC,OACE,qBAAK,YAAU,OAAOG,aAAcD,EAApC,SACE,sBAAKtC,UAAS,uBAAmBmC,EAAiB,WAAL,IAA7C,UACE,sBAAKnC,UAAU,iBAAf,UACE,qBACEwC,KAAK,SACLxC,UAAS,4BAAwBlB,EAAiB,QAAL,IAC7C2D,SAAU,EACV,YAAWV,EAEX5B,QAAUtB,EAA4BqD,EAAZG,EAN5B,SAQE,qBAAKrC,UAAU,YAAYS,IAAKsB,EAAMrB,IAAG,UAAKN,EAAL,YAAmBI,QAE5D1B,GACA,sBAAKkB,UAAU,mBAAf,UACE,wBACEjB,GAAG,kBACH2D,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,sBAC1C1C,KAAK,SACLC,QAASkC,EAJX,SAME,qBACErC,UAAU,yBACVS,IAAI,aACJC,IAAG,UAAKN,EAAL,wBAGP,sBAAMJ,UAAU,mBAAhB,SAAoC+B,IACpC,wBACEW,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,sBAC1C1C,KAAK,SACLC,QAxCM,WAClBa,EAAcZ,EAAY,sBAAsB,GAChDgC,GAAcD,IAmCJ,SAKE,qBACEnC,UAAU,wBACVS,IAAI,oBACJC,IAAG,UAAKN,EAAL,6BAMb,sBAAKJ,UAAU,gBAAf,UACE,qBACEwC,KAAK,SACLxC,UAAU,qBACVyC,SAAU,EAEVtC,QAASmC,EALX,SAOE,qBAAKtC,UAAU,YAAYS,IAAKsB,EAAMrB,IAAG,UAAKN,EAAL,YAAmBI,QAE5D1B,GACA,qBAAKkB,UAAU,2BAAf,SACE,sBAAMA,UAAU,mBAAhB,SAAoCgC,gBChFrCa,EAA2B,CACtC,CACEtC,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,iBACPC,MAAO,wBAET,CACED,MAAO,UACPC,MAAO,mBAET,CACED,MAAO,WACPC,MAAO,qBAIEsC,EAAiB,CAC5B,CACE,CACEf,KAAM,MACNC,YAAa,6CACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,yDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,mDACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,gEACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,MACNC,YAAa,mDACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,OACNC,YAAa,6CACbxB,MAAO,eACPuC,SAAU,mBAGd,CACE,CACEhB,KAAM,OACNC,YAAa,yDACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,QACNC,YAAa,yDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,OACNC,YAAa,2BACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,2GACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,6CACbxB,MAAO,eACPuC,SAAU,mBAGd,CACE,CACEhB,KAAM,MACNC,YAAa,qBACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,mDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,UACNC,YAAa,uCACbxB,MAAO,kBACPuC,SAAU,qBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,uCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,MACNC,YAAa,uCACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,SACNC,YAAa,uCACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,oBAGd,CACE,CACEhB,KAAM,OACNC,YAAa,iCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,2BACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,UACNC,YAAa,uCACbxB,MAAO,kBACPuC,SAAU,qBAEZ,CACEhB,KAAM,OACNC,YAAa,qBACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,SACNC,YAAa,mDACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,UACNC,YAAa,6CACbxB,MAAO,kBACPuC,SAAU,sBAGd,CACE,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,iCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,SACNC,YAAa,uCACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,QACNC,YAAa,uCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,6CACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,QACNC,YAAa,6CACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,OACNC,YAAa,uCACbxB,MAAO,eACPuC,SAAU,kBAEZ,CACEhB,KAAM,OACNC,YAAa,iCACbxB,MAAO,eACPuC,SAAU,mBAGd,CACE,CACEhB,KAAM,MACNC,YAAa,mDACbxB,MAAO,cACPuC,SAAU,iBAEZ,CACEhB,KAAM,QACNC,YAAa,mDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,+DACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,mDACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,YACNC,YAAa,+DACbxB,MAAO,oBACPuC,SAAU,uBAEZ,CACEhB,KAAM,SACNC,YAAa,+DACbxB,MAAO,iBACPuC,SAAU,oBAEZ,CACEhB,KAAM,QACNC,YAAa,uCACbxB,MAAO,gBACPuC,SAAU,mBAEZ,CACEhB,KAAM,QACNC,YAAa,2BACbxB,MAAO,gBACPuC,SAAU,qBC7THC,G,MAAwC,SAAC,GAQhD,EAPJC,sBAOK,IANLC,EAMI,EANJA,UACAC,EAKI,EALJA,WACArE,EAII,EAJJA,UACAC,EAGI,EAHJA,GACAF,EAEI,EAFJA,cACAuE,EACI,EADJA,cAEA,EAAkChE,oBAAS,GAA3C,mBAAOiE,EAAP,KAAkBC,EAAlB,KAcA,OARA/D,qBAAU,WAENC,OAAO+D,eADL1E,EACsB,kBAAM,GAEN,QAK1B,qCACE,cAAC,IAAD,CAAQ2E,KAAML,EAAYM,QAAQ,6CAClC,sBAAKzD,UAAS,oBAAgBjB,EAAWmE,EAAsB,WAAV,QAAlB,IAAnC,WACInE,GACA8D,EAAWa,KAAI,SAACC,EAAMC,GACpB,IAAMC,EAAYD,EAAI,EACtB,OACE,qBAAK5D,UAAU,OAAf,SACE,cAAC,IAAD,CAAM8D,GAAE,mBAAcD,GAAa7D,UAAU,OAA7C,SACE,cAAC,EAAD,CAAclB,UAAWA,EAAWyB,MAAOoD,EAAKpD,MAAOC,MAAOmD,EAAKnD,WAF5CmD,EAAKpD,UAOrCxB,IACEmE,GACDJ,EAAMhC,EAAU/B,IAAK2E,KAAI,SAACC,GACxB,OACE,cAAC,EAAD,CACEzB,aAAckB,EACdtE,UAAWA,EACXiD,KAAM4B,EAAK5B,KACXC,YAAa2B,EAAK3B,YAClBxB,MAAOmD,EAAKnD,MACZyB,MAAO0B,EAAKZ,SAEZlE,cAAeA,GADV8E,EAAK5B,SAKjBhD,GAAMmE,GACL,sBAAKlD,UAAU,iBAAf,UACE,qBAAIA,UAAU,wBAAd,uCAEE,uBAFF,gEAKA,wBAAQE,KAAK,SAASF,UAAU,6BAA6BG,QAlDpD,WACjBmD,GAAcD,IAiDN,+BCtECU,G,MAAwC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASnF,EAAwB,EAAxBA,cAAeE,EAAS,EAATA,GAC9E,EAAoCK,mBAAiB,MAArD,mBAAO6E,EAAP,KAAmBC,EAAnB,KACA,EAAgC9E,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAWA,SAAS6E,IACPD,EAAc1E,OAAOyE,YAkBvB,OAfA1E,qBAAU,WAER,OADAC,OAAO4E,iBAAiB,SAAUD,GAAqB,GAChD,kBAAM3E,OAAO6E,oBAAoB,SAAUF,GAAqB,OAGzE5E,qBAAU,WAGR,OAFA2E,EAAc1E,OAAOyE,YACrBzE,OAAO4E,iBAAiB,OAAQD,GAAqB,GAC9C,kBAAM3E,OAAO6E,oBAAoB,SAAUF,GAAqB,MACtE,IAEH5E,qBAAU,WAvBa,IAACG,IAwBP,KAvBfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYD,MAuBZ,sBAAKW,UAAS,6BAAwBiE,GA9BnB,IA8BgD,QAAU,IAA7E,UACGA,EA/BgB,KAgCf,sBAAKjE,UAAS,oBAAenB,GAAiBE,EAAK,QAAU,IAA7D,UACE,qBAAKiB,UAAS,wBAAmBnB,GAAiBE,EAAK,QAAU,IAAjE,SACE,+BAAOY,IAAQM,EAAE,eAElBpB,GACCmF,EAAQN,KAAI,SAACY,EAAIV,GACf,OACE,qBAAK5D,UAAU,gBAAf,SACE,qBACEA,UAAU,OACVS,IAAG,cAASmD,GACZlD,IAAG,UAAKN,EAAL,iBAA8B,IAAPkE,EAAc,cAAgB,gBAJ5D,aAA0CV,EAAI,UAWvDK,GAlDgB,KAmDf,sBAAKjE,UAAS,oBAAenB,GAAiBE,EAAK,aAAe,IAAlE,UACE,qBAAKiB,UAAS,wBAAmBnB,GAAiBE,EAAK,QAAU,IAAjE,SACE,+BAAOY,IAAQM,EAAE,eAEnB,qBAAKD,UAAS,wBAAmBnB,GAAiBE,EAAK,QAAU,IAAjE,SACE,+BAAOY,IAAQM,EAAE,aAElBpB,GACC,qBAAKmB,UAAS,qBAAgBnB,GAAiBE,EAAK,gBAAkB,IAAtE,SACGiF,EAAQO,QAAO,SAACD,GAAD,OAAe,IAAPA,KAAaE,SAGxC3F,GACC,qBAAKmB,UAAS,qBAAgBnB,GAAiBE,EAAK,cAAgB,IAApE,SACGiF,EAAQO,QAAO,SAACD,GAAD,OAAe,IAAPA,KAAcE,iBCzDvCC,G,MAAoC,SAAC,GAU3C,IATLxB,EASI,EATJA,sBACAC,EAQI,EARJA,UACAC,EAOI,EAPJA,WACArE,EAMI,EANJA,UACAD,EAKI,EALJA,cACA6F,EAII,EAJJA,kBACAC,EAGI,EAHJA,6BACAC,EAEI,EAFJA,UACAC,EACI,EADJA,oBAEA,EAA6BzF,mBAAoB,IAAjD,mBAAO4E,EAAP,KAAgBc,EAAhB,KACMC,EAAUC,cAEVC,EAAYC,iBAAmB,IAC/BC,EAAcD,iBAAe,IAC7BE,EAAYF,iBAAe,GAC3BG,EAAiBH,iBAAe,GAChCI,EAAeJ,iBAAe,GAM9BK,EAAW,WACfT,EAAU,IACVG,EAAUO,QAAU,GACpBJ,EAAUI,QAAU,EACpBF,EAAaE,QAAU,EACvBL,EAAYK,QAAU,GACtBH,EAAeG,QAAU,GAGrBC,EAAmB,WACvBN,EAAYK,QAAZ,UAA0BE,KAAkCL,EAAeG,QAA3E,KACAZ,EAAUO,EAAYK,SACtBb,IACAE,GAAoB,IAoBhBc,EAAgB,WACpBV,EAAUO,QAAU1C,EAAMhC,EAAUiE,EAAQhG,KAAK6G,QAAQC,KAAKlF,GAC1DsE,GAAWjE,EAAcZ,EAAY6E,EAAUO,QAAQJ,EAAUI,SAASzC,UAAU,IAyB1F,OANAxD,qBAAU,WACRgG,IACAV,GAAoB,GAChBhG,GAAe6F,MAClB,CAACK,EAAQhG,KAGV,sBAAKiB,UAAU,WAAf,UACE,cAAC,EAAD,CACEnB,cAAeA,EACfC,UAAWA,EACXC,GAAIgG,EAAQhG,GACZE,YAnBc,WAClBsG,IACAb,IACAiB,IACAd,GAAoB,IAgBhB3F,gBAzBkB,WACtBqG,IACAI,KAwBIxG,WA9Ba,WACjB6B,EAAcZ,EAAY6E,EAAUO,QAAQJ,EAAUI,SAASzC,UAAU,MA+BvE,cAAC,EAAD,CACEE,sBAAuBA,EACvBC,UAAWA,EACXC,WAAYA,EACZrE,UAAWA,EACXC,GAAIgG,EAAQhG,GACZF,cAAeA,EACfuE,cA7DgB,SAAC0C,ILGqB,SAC5CA,EACAC,EACAX,EACAE,EACAU,EACAX,EACAY,EACAhF,EACAiF,EACAC,EACAC,EACAC,GAGEN,EAAWP,QAAQhB,QAAUY,EAAUI,QAAU,GACjDF,EAAaE,QAAUQ,GACvBX,EAAeG,QAAUS,GAGvB,OAACH,QAAD,IAACA,OAAD,EAACA,EAAIQ,QAA0BC,QAAQxE,OAASgE,EAAWP,QAAQJ,EAAUI,SAASzD,MAEtFF,GAAe,EACfb,EAAcC,EAAWiF,GAAiB,GAC1ClF,EAAcC,EAAWiF,GAAiB,GAC1Cb,EAAeG,SAAW,EAC1BY,GAAc,SAACI,GAAD,4BAAqBA,GAArB,EAAkC,OAChDpB,EAAUI,SAAW,EACrBF,EAAaE,SAAW,EAEtBO,EAAWP,QAAQhB,QAAUY,EAAUI,QAAU,GACjDF,EAAaE,QAAUQ,GACvBX,EAAeG,QAAUS,GAEzBpE,GAAe,EACfb,EAAcC,EAAW8E,EAAWP,QAAQJ,EAAUI,SAASzC,UAAU,GACzE/B,EAAcC,EAAW8E,EAAWP,QAAQJ,EAAUI,SAASzC,UAAU,IACpEsD,MAEPrF,EAAcC,EAAWkF,GAAe,GACxCnF,EAAcC,EAAWkF,GAAe,GACxCC,GAAc,SAACI,GAAD,4BAAqBA,GAArB,EAAkC,OAChDlB,EAAaE,SAAW,EAEtBO,EAAWP,QAAQhB,QAAUY,EAAUI,QAAU,GACjDF,EAAaE,QAAUQ,GACvBX,EAAeG,QAAUS,EAEpBpE,IACHA,GAAe,EACf4E,YAAW,WACTzF,EAAcC,EAAW8E,EAAWP,QAAQJ,EAAUI,SAASzC,UAAU,GACzE/B,EAAcC,EAAW8E,EAAWP,QAAQJ,EAAUI,SAASzC,UAAU,GACzElB,GAAe,IACd,MAEAwE,KAEJA,IK5DLK,CACEZ,EACAb,EACAG,EACAE,EAzBiB,GA2BjBD,EA1BsB,EA4BtBjF,EPvEyB,oBACF,kBOyEvB0E,EACAW,MAkDC3G,GACC,cAAC,EAAD,CACEkF,QAASA,EACTlF,UAAWA,EACXD,cAAeA,EACfE,GAAIgG,EAAQhG,U,iBCtHT4H,G,MAAgC,SAAC,GAMvC,IALL9B,EAKI,EALJA,oBACAhG,EAII,EAJJA,cACAC,EAGI,EAHJA,UACA8H,EAEI,EAFJA,cACAC,EACI,EADJA,cAQA,OACE,sBAAK7G,UAAU,SAAS0C,MAAO,CAAEoE,gBAAgB,OAAD,OAAS1G,EAAT,qBAAhD,UACE,qBAAKoC,KAAK,SAASxC,UAAU,oBAAoBG,QAASyG,EAAe,cAAY,OAArF,iBAGA,sBAAK5G,UAAU,eAAf,UACE,sBAAMA,UAAU,WAAhB,SAA4BlB,EAAY,OAAS,UACjD,cAAC,IAAD,CACEiI,cAAc,UACdC,QAAQ,UACRC,eAAe,EACfC,aAAa,EACbC,QAASrI,EACTkB,UAAU,SACVoH,SApBY,WACdvI,GAAiBC,GACnB+F,GAAoB,GACpBgC,KACKA,KAiBDQ,OAAQ,GACRC,MAAO,GACPC,eAAgB,GAChBC,UAAU,iCACVC,gBAAgB,gDCrCbC,G,MAAoD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAClE,EAAgCvI,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OAJAC,qBAAU,WARa,IAACG,IASP,KARfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYD,MAQZ,qBAAKW,UAAS,4BAAuB2H,EAAoB,QAAU,SAAnE,SACE,qBAAK3H,UAAU,gBAAf,SACE,+BAAOL,IAAQM,EAAE,mBCjBZ2H,G,MAAkC,SAAC,GAA6B,IAA3B9I,EAA0B,EAA1BA,UAAW+I,EAAe,EAAfA,SAC3D,OACE,sBAAK7H,UAAU,mBAAf,UACE,qBACE0C,MAAO,CACL4E,MAAO,OACPQ,QAAS,OACTC,cAAe,MACfC,eAAgB,MAChBC,UAAW,QANf,SASE,wBACE/H,KAAK,SACLF,UAAS,yBAAoBlB,EAAY,cAAgB,UACzDqB,QAAS0H,EAHX,sBAQF,+BACE,6BACE,cAAC,IAAD,CACE/D,GAAG,IACH3D,QAAS0H,EACT7H,UAAS,yBAAoBlB,EAAY,QAAU,IAHrD,yBASD+D,EAAWa,KAAI,SAACC,EAAMC,GACrB,OACE,6BACE,cAAC,IAAD,CACEE,GAAE,oBAAeF,EAAI,GACrBzD,QAAS0H,EACT7H,UAAS,yBAAoBlB,EAAY,QAAU,IAHrD,SAKG6E,EAAKpD,SANDoD,EAAKpD,kBChCb2H,G,MAA4C,SAAC,GAInD,IAHLvD,EAGI,EAHJA,6BACAwD,EAEI,EAFJA,iBACAhD,EACI,EADJA,YAEA,EAAgC/F,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OAJAC,qBAAU,WARa,IAACG,IASP,KARfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYD,MAQZ,qBAAKW,UAAS,sBAAiBmI,EAAmB,QAAU,SAA5D,SACE,sBAAKnI,UAAU,gBAAf,UACE,6BAAKL,IAAQM,EAAE,YACf,6BAAKkF,IACL,wBAAQjF,KAAK,SAASC,QAASwE,EAA/B,SACGhF,IAAQM,EAAE,kBCmKNmI,G,MAxLO,WACpB,MAAqChJ,oBAAkB,GAAvD,mBAAON,EAAP,KAAkBuJ,EAAlB,KACA,EAAqCjJ,oBAAkB,GAAvD,mBAAO8D,EAAP,KAAkBoF,EAAlB,KACA,EAAsClJ,oBAAS,GAA/C,mBAAOmJ,EAAP,KAAqBC,EAArB,KACA,EAAkDpJ,oBAAkB,GAApE,mBAAOqJ,EAAP,KAAuBC,EAAvB,KACA,EAA0CtJ,oBAAkB,GAA5D,mBAAOP,EAAP,KAAsB8J,EAAtB,KACA,EAAgDvJ,oBAAkB,GAAlE,mBAAO+I,EAAP,KAAyBS,EAAzB,KACA,EAAoCxJ,oBAAkB,GAAtD,mBAAO+D,EAAP,KAAmB0F,EAAnB,KACA,EAA4BzJ,mBAAiB,IAA7C,mBAAO0J,EAAP,KAAeC,EAAf,KACA,EAAgC3J,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0DF,oBAAS,GAAnE,mBAAO6D,EAAP,KAA8B+F,GAA9B,KASMC,GAAiC,SAACC,GACtCF,GAAyBE,IAKrBtC,GAAgB,kBAAM8B,GAAyBD,IAC/CU,GAAsB,SAACC,GAAD,OAAoBZ,EAAcY,IACxDC,GAAU,WACdhB,GAAiBvJ,IACK,IAAlBD,GAAwB8J,GAAiB,IAEzCjE,GAAoB,WACxBiE,GAAkB9J,GAClBkK,EAAU,KAENpE,GAA+B,WACnCiE,GAAqBT,GACjBrJ,GAAWuK,MAEXzE,GAAuB,SAAC0E,GAAD,OAASP,EAAUO,IAC1CzE,GAAsB,SAACqE,GAAD,OAAmBL,EAAcK,IAE7D1J,OAAO4E,iBAAiB,WAnBH,kBAAMkE,GAAgB,MAmBM,GACjD9I,OAAO4E,iBAAiB,UAnBJ,kBAAMkE,GAAgB,MAmBK,GAC/C9I,OAAO4E,iBAAiB,cAAc,WAChClB,GACF+F,IAA+B,GAC/BM,QAAQC,IAAI,cAAevG,KAE3BgG,IAA+B,GAC/BM,QAAQC,IAAI,kBAAmBvG,OAInC1D,qBAAU,WA1Ca,IAACG,IA2CP,KA1CfC,IAAQC,KAAK,CACXC,IAAKH,EACLI,UAAWC,IAEbT,EAAYD,MAyCd,IAAMoK,GAAkB,SAACC,GACvBH,QAAQC,IAAI,SACZL,IAAoB,GACHQ,SAASC,eAAe,YAChCC,QAAU,WAAO,IAAD,EACvB,UAAAH,EAAII,eAAJ,SAAaC,YAAY,CAAE7J,KAAM,iBACjCiJ,IAAoB,KAIxB3J,OAAO4E,iBAAiB,OAAxB,sBAAgC,4BAAA4F,EAAA,2DACe,kBAAmBC,WADlC,0CAGRA,UAAUC,cAAcC,SAAxB,UACb9J,oBADa,uBAHQ,QAGpBqJ,EAHoB,QAMtBU,cAAgB,WAClB,IAAMC,EAAmBX,EAAIY,WACzBD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,OAAyBP,UAAUC,cAAcO,YACpEhB,GAAgBC,MAKxBH,QAAQC,IAAI,UAAWE,GAhBG,gDAkB1BH,QAAQC,IAAI,QAlBc,0DAiChC,OALAS,UAAUC,cAAc9F,iBAAiB,oBAAoB,WAC3DmF,QAAQC,IAAI,sBACZhK,OAAOkL,SAASC,YAIhB,cAAC,IAAD,CAAeC,SAAUxK,EAAzB,SACE,sBACEJ,UAAU,MACV0C,MAAO,CACLoE,gBAAgB,OAAD,OAAS1G,EAAT,mBACfyK,iBAAkB,SAClBC,qBAAsB,SAL1B,UAQE,mCACE,qBAAK9K,UAAS,UAAKyI,EAAiB,iBAAmB,WAAvD,SACE,cAAC,EAAD,CAAS3J,UAAWA,EAAW+I,SAAUjB,OAE3C,cAAC,EAAD,CACE/H,cAAeA,EACfgG,oBAAqBA,GACrB/F,UAAWA,EACX8H,cAAeA,GACfC,cAAewC,QAGnB,iCACE,mCACE,qBAAKrJ,UAAS,2BAAsBuI,EAAe,QAAU,SAA7D,SACE,sBAAKvI,UAAU,kBAAf,UACE,+BAAOL,IAAQM,EAAE,qBACjB,sBAAKD,UAAU,kBAAf,UACE,wBAAQA,UAAU,eAAejB,GAAG,WAAWmB,KAAK,SAApD,gBAGA,wBAAQF,UAAU,eAAeE,KAAK,SAASC,QAzCxC,WACrBoJ,QAAQC,IAAI,iBACZL,IAAoB,IAuCN,8BAOR,cAAC,EAAD,CAAkBxB,kBAAmBzE,IACrC,cAAC,IAAD,CACE6H,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,cAAC,EAAD,CACEhI,sBAAuBA,EACvBC,UAAWA,EACXpE,UAAWA,EACXD,cAAeA,EACf6F,kBAAmBA,GACnBC,6BAA8BA,GAC9BC,UAAWA,GACXC,oBAAqBA,GACrB1B,WAAYA,OAIlB,cAAC,IAAD,CACE6H,KAAK,gBACLC,OAAQ,kBACN,cAAC,EAAD,CACEhI,sBAAuBA,EACvBC,UAAWA,EACXpE,UAAWA,EACXD,cAAeA,EACf6F,kBAAmBA,GACnBC,6BAA8BA,GAC9BC,UAAWA,GACXzB,WAAYA,EACZ0B,oBAAqBA,QAI3B,cAAC,EAAD,CACEF,6BAA8BA,GAC9BwD,iBAAkBA,EAClBhD,YAAa2D,cCjLVoC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASC,eAAe,SAG1BsB,M","file":"static/js/main.b44cd197.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport i18next from 'i18next';\nimport './PageInfoBlock.scss';\nimport data from '../../en.json';\n\ninterface PageInfoBlockProps {\n  isPlaying: boolean;\n  id: string;\n  newGameFunc: () => void;\n  isGameStarted: boolean;\n  restartGameFunc: () => void;\n  replayWord: () => void;\n}\n\nexport const PageInfoBlock: React.FC<PageInfoBlockProps> = ({\n  isGameStarted,\n  isPlaying,\n  id = undefined,\n  newGameFunc,\n  restartGameFunc,\n  replayWord,\n}) => {\n  let textSeen: string;\n  let otherText: string;\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      window.scrollTo(0, 0);\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  switch (id) {\n    case '1':\n      textSeen = 'Action (Set A)';\n      break;\n    case '2':\n      textSeen = 'Action (Set B)';\n      break;\n    case '3':\n      textSeen = 'Animal (Set A)';\n      break;\n    case '4':\n      textSeen = 'Animal (Set B)';\n      break;\n    case '5':\n      textSeen = 'Clothes';\n      break;\n    case '6':\n      textSeen = 'Emotions';\n      break;\n    default:\n      textSeen = '';\n      break;\n  }\n\n  switch (isPlaying) {\n    case true:\n      otherText = 'Now show your skills!';\n      break;\n    default:\n      otherText = 'Feel free to practice!';\n  }\n\n  return (\n    <div className=\"InteractiveBlock\">\n      <div>\n        <div className=\"InteractiveBox\">{!id && <h1>{i18next.t('hello')}</h1>}</div>\n        <div className=\"InteractiveBox mini\">{!id && <h2>{i18next.t('chooseCategory')}</h2>}</div>\n        <div className={`InteractiveBox${id ? '' : ' mini'}`}>\n          <h1>{id && `${textSeen} category. ${otherText}`}</h1>\n        </div>\n      </div>\n      <div className={`ButtonContainer${isPlaying && id && !isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`StartGameButton${isGameStarted || !isPlaying ? ' hide' : ''}`}\n          onClick={newGameFunc}\n        >\n          {i18next.t('start!')}\n        </button>\n      </div>\n      <div className={`inGameButtonsContainer${id && isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`RestartGameButton${isGameStarted ? '' : ' hide'}`}\n          onClick={restartGameFunc}\n        >\n          {i18next.t('restart')}\n        </button>\n        <button\n          type=\"button\"\n          className={`ReplayButton${isGameStarted ? '' : ' hide'}`}\n          onClick={replayWord}\n        >\n          {i18next.t('replay')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const { PUBLIC_URL } = process.env;\n\nexport const correctAudioSrc = 'audio/correct.mp3';\nexport const errorAudioSrc = 'audio/error.mp3';\n","import React from 'react';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport './CategoryCard.scss';\n\ninterface CategoryCardProps {\n  title: string;\n  image: string;\n  isPlaying: boolean;\n}\n\nexport const CategoryCard: React.FC<CategoryCardProps> = ({ isPlaying, title, image }) => {\n  return (\n    <div className=\"CategoryCard\">\n      {isPlaying}\n      <div className=\"CardImageContainer\">\n        <img className=\"CardImage\" alt={title} src={`${PUBLIC_URL}/${image}`} />\n      </div>\n      <div className=\"CategoryText\">{title}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { WordCard } from './interfaces';\n\ntype RandomizerFunc = () => number;\n// eslint-disable-next-line no-unused-vars\ntype ToArrayId = (id: string) => number;\n// eslint-disable-next-line no-unused-vars\ntype AudioFunc = (publicURL: string, src: string, mode: boolean) => void;\n// eslint-disable-next-line no-unused-vars\ntype SetAnswerFunc = (value: React.SetStateAction<boolean[]>) => void;\n\n/* eslint-disable */\ninterface GameFunction {\n  (\n    EO: React.MouseEvent | undefined,\n    cardsArray: React.MutableRefObject<WordCard[]>,\n    cardIndex: React.MutableRefObject<number>,\n    answersCount: React.MutableRefObject<number>,\n    chancesGiven: number,\n    correctAnswers: React.MutableRefObject<number>,\n    maxCorrectAnswers: number,\n    publicURL: string,\n    correctAudioSrc: string,\n    errorAudioSrc: string,\n    setAnswerFunc: SetAnswerFunc,\n    resultShowFunc: () => void\n  ): void;\n}\n/* eslint-enable */\n\nexport const randomizerFunc: RandomizerFunc = () => Math.random() - 0.5;\n// to randomize sort method\nexport const toArrayId: ToArrayId = (id: string) => Number(id) - 1;\n// to give useParam id a number value and decrease by 1 to match an array index\nexport const audioPlayFunc: AudioFunc = (publicURL, src, mode) => {\n  const sound = new Audio(`${publicURL}/${src}`);\n  sound.onloadeddata = () => {\n    let isPlaying: boolean;\n    sound.onplaying = () => {\n      isPlaying = true;\n    };\n    sound.onpause = () => {\n      isPlaying = false;\n    };\n    const playSound = () => {\n      if (sound.paused && !isPlaying) {\n        sound.play();\n      }\n    };\n    const pauseSound = () => {\n      if (!sound.paused && isPlaying) {\n        sound.pause();\n        sound.currentTime = 0;\n      }\n    };\n    if (mode) {\n      pauseSound();\n      playSound();\n    } else {\n      pauseSound();\n    }\n  };\n};\n\nlet timeOutAudio = false; // flag shows that we have a timed out audio\n// to play audio\n/* eslint-disable no-param-reassign */\nexport const gameMainFunction: GameFunction = (\n  EO,\n  cardsArray,\n  cardIndex,\n  answersCount,\n  chancesGiven,\n  correctAnswers,\n  maxCorrectAnswers,\n  publicURL,\n  correctAudioSrc,\n  errorAudioSrc,\n  setAnswerFunc,\n  resultShowFunc\n) => {\n  if (\n    cardsArray.current.length >= cardIndex.current + 1 &&\n    answersCount.current < chancesGiven &&\n    correctAnswers.current < maxCorrectAnswers\n  ) {\n    if (\n      (EO?.target as HTMLDivElement).dataset.word === cardsArray.current[cardIndex.current].word\n    ) {\n      timeOutAudio = false;\n      audioPlayFunc(publicURL, correctAudioSrc, false);\n      audioPlayFunc(publicURL, correctAudioSrc, true);\n      correctAnswers.current += 1;\n      setAnswerFunc((prevAnswers) => [...prevAnswers, true]);\n      cardIndex.current += 1;\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        timeOutAudio = false;\n        audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, false);\n        audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n      } else resultShowFunc();\n    } else {\n      audioPlayFunc(publicURL, errorAudioSrc, false);\n      audioPlayFunc(publicURL, errorAudioSrc, true);\n      setAnswerFunc((prevAnswers) => [...prevAnswers, false]);\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        if (!timeOutAudio) {\n          timeOutAudio = true;\n          setTimeout(() => {\n            audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, false);\n            audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n            timeOutAudio = false;\n          }, 1000);\n        }\n      } else resultShowFunc();\n    }\n  } else resultShowFunc();\n};\n// главная функция в игровом режиме\n/* eslint-enable */\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState } from 'react';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport { audioPlayFunc } from '../../../@core/functions';\nimport './ItemCard.scss';\n\ninterface ItemCardProps {\n  word: string;\n  translation: string;\n  audio: string;\n  image: string;\n  isPlaying: boolean;\n  inGameAnswer: () => void;\n  isGameStarted: boolean;\n}\n\nexport const ItemCard: React.FC<ItemCardProps> = ({\n  isPlaying,\n  word,\n  translation,\n  audio,\n  image,\n  inGameAnswer,\n  isGameStarted,\n}) => {\n  const [isFlipped, setIsFlipped] = useState<boolean>(false);\n  const audioPlay = () => {\n    if (!isPlaying) {\n      audioPlayFunc(PUBLIC_URL, audio, true);\n    }\n  };\n  const cardFlipper = () => {\n    audioPlayFunc(PUBLIC_URL, 'audio/cardflip.mp3', true);\n    setIsFlipped(!isFlipped);\n  };\n  const flipOnMouseLeaveOrClick = () => {\n    if (isFlipped === true) setIsFlipped(false);\n  };\n\n  return (\n    <div data-role=\"Mask\" onMouseLeave={flipOnMouseLeaveOrClick}>\n      <div className={`CardContainer${!isFlipped ? '' : ' flipped'}`}>\n        <div className=\"ItemCard front\">\n          <div\n            role=\"button\"\n            className={`CardImageContainer${!isPlaying ? '' : ' play'}`}\n            tabIndex={0}\n            data-word={word}\n            // onKeyDown={audioPlay}\n            onClick={!isGameStarted ? audioPlay : inGameAnswer}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel\">\n              <button\n                id=\"soundPlayButton\"\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={audioPlay}\n              >\n                <img\n                  className=\"ControlPanelPlayButton\"\n                  alt=\"play-sound\"\n                  src={`${PUBLIC_URL}/play-button.png`}\n                />\n              </button>\n              <span className=\"ControlPanelText\">{word}</span>\n              <button\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={cardFlipper}\n              >\n                <img\n                  className=\"ControlPanelEyeButton\"\n                  alt=\"watch-translation\"\n                  src={`${PUBLIC_URL}/eye-button.png`}\n                />\n              </button>\n            </div>\n          )}\n        </div>\n        <div className=\"ItemCard back\">\n          <div\n            role=\"button\"\n            className=\"CardImageContainer\"\n            tabIndex={0}\n            // onKeyDown={flipOnMouseLeaveOrClick}\n            onClick={flipOnMouseLeaveOrClick}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel flipped\">\n              <span className=\"ControlPanelText\">{translation}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","interface Categories {\n  title: string;\n  image: string;\n}\n\ninterface Card {\n  word: string;\n  translation: string;\n  image: string;\n  audioSrc: string;\n}\n\ntype Cards = Card[];\n\nexport const categories: Categories[] = [\n  {\n    title: 'Action (set A)',\n    image: 'img/action-set-a.jpg',\n  },\n  {\n    title: 'Action (set B)',\n    image: 'img/action-set-b.jpg',\n  },\n  {\n    title: 'Animal (set A)',\n    image: 'img/animal-set-a.jpg',\n  },\n  {\n    title: 'Animal (set B)',\n    image: 'img/animal-set-b.jpg',\n  },\n  {\n    title: 'Clothes',\n    image: 'img/clothes.jpg',\n  },\n  {\n    title: 'Emotions',\n    image: 'img/emotions.jpg',\n  },\n];\n\nexport const cards: Cards[] = [\n  [\n    {\n      word: 'cry',\n      translation: 'плакать',\n      image: 'img/cry.jpg',\n      audioSrc: 'audio/cry.mp3',\n    },\n    {\n      word: 'dance',\n      translation: 'танцевать',\n      image: 'img/dance.jpg',\n      audioSrc: 'audio/dance.mp3',\n    },\n    {\n      word: 'dive',\n      translation: 'нырять',\n      image: 'img/dive.jpg',\n      audioSrc: 'audio/dive.mp3',\n    },\n    {\n      word: 'draw',\n      translation: 'рисовать',\n      image: 'img/draw.jpg',\n      audioSrc: 'audio/draw.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'ловить рыбу',\n      image: 'img/fish.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'fly',\n      translation: 'летать',\n      image: 'img/fly.jpg',\n      audioSrc: 'audio/fly.mp3',\n    },\n    {\n      word: 'hug',\n      translation: 'обнимать',\n      image: 'img/hug.jpg',\n      audioSrc: 'audio/hug.mp3',\n    },\n    {\n      word: 'jump',\n      translation: 'прыгать',\n      image: 'img/jump.jpg',\n      audioSrc: 'audio/jump.mp3',\n    },\n  ],\n  [\n    {\n      word: 'open',\n      translation: 'открывать',\n      image: 'img/open.jpg',\n      audioSrc: 'audio/open.mp3',\n    },\n    {\n      word: 'play',\n      translation: 'играть',\n      image: 'img/play.jpg',\n      audioSrc: 'audio/play.mp3',\n    },\n    {\n      word: 'point',\n      translation: 'указывать',\n      image: 'img/point.jpg',\n      audioSrc: 'audio/point.mp3',\n    },\n    {\n      word: 'ride',\n      translation: 'ездить',\n      image: 'img/ride.jpg',\n      audioSrc: 'audio/ride.mp3',\n    },\n    {\n      word: 'run',\n      translation: 'бегать',\n      image: 'img/run.jpg',\n      audioSrc: 'audio/run.mp3',\n    },\n    {\n      word: 'sing',\n      translation: 'петь',\n      image: 'img/sing.jpg',\n      audioSrc: 'audio/sing.mp3',\n    },\n    {\n      word: 'skip',\n      translation: 'пропускать, прыгать',\n      image: 'img/skip.jpg',\n      audioSrc: 'audio/skip.mp3',\n    },\n    {\n      word: 'swim',\n      translation: 'плавать',\n      image: 'img/swim.jpg',\n      audioSrc: 'audio/swim.mp3',\n    },\n  ],\n  [\n    {\n      word: 'cat',\n      translation: 'кот',\n      image: 'img/cat.jpg',\n      audioSrc: 'audio/cat.mp3',\n    },\n    {\n      word: 'chick',\n      translation: 'цыплёнок',\n      image: 'img/chick.jpg',\n      audioSrc: 'audio/chick.mp3',\n    },\n    {\n      word: 'chicken',\n      translation: 'курица',\n      image: 'img/chicken.jpg',\n      audioSrc: 'audio/chicken.mp3',\n    },\n    {\n      word: 'dog',\n      translation: 'собака',\n      image: 'img/dog.jpg',\n      audioSrc: 'audio/dog.mp3',\n    },\n    {\n      word: 'horse',\n      translation: 'лошадь',\n      image: 'img/horse.jpg',\n      audioSrc: 'audio/horse.mp3',\n    },\n    {\n      word: 'pig',\n      translation: 'свинья',\n      image: 'img/pig.jpg',\n      audioSrc: 'audio/pig.mp3',\n    },\n    {\n      word: 'rabbit',\n      translation: 'кролик',\n      image: 'img/rabbit.jpg',\n      audioSrc: 'audio/rabbit.mp3',\n    },\n    {\n      word: 'sheep',\n      translation: 'овца',\n      image: 'img/sheep.jpg',\n      audioSrc: 'audio/sheep.mp3',\n    },\n  ],\n  [\n    {\n      word: 'bird',\n      translation: 'птица',\n      image: 'img/bird.jpg',\n      audioSrc: 'audio/bird.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'рыба',\n      image: 'img/fish1.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'frog',\n      translation: 'жаба',\n      image: 'img/frog.jpg',\n      audioSrc: 'audio/frog.mp3',\n    },\n    {\n      word: 'giraffe',\n      translation: 'жирафа',\n      image: 'img/giraffe.jpg',\n      audioSrc: 'audio/giraffe.mp3',\n    },\n    {\n      word: 'lion',\n      translation: 'лев',\n      image: 'img/lion.jpg',\n      audioSrc: 'audio/lion.mp3',\n    },\n    {\n      word: 'mouse',\n      translation: 'мышь',\n      image: 'img/mouse.jpg',\n      audioSrc: 'audio/mouse.mp3',\n    },\n    {\n      word: 'turtle',\n      translation: 'черепаха',\n      image: 'img/turtle.jpg',\n      audioSrc: 'audio/turtle.mp3',\n    },\n    {\n      word: 'dolphin',\n      translation: 'дельфин',\n      image: 'img/dolphin.jpg',\n      audioSrc: 'audio/dolphin.mp3',\n    },\n  ],\n  [\n    {\n      word: 'skirt',\n      translation: 'юбка',\n      image: 'img/skirt.jpg',\n      audioSrc: 'audio/skirt.mp3',\n    },\n    {\n      word: 'pants',\n      translation: 'брюки',\n      image: 'img/pants.jpg',\n      audioSrc: 'audio/pants.mp3',\n    },\n    {\n      word: 'blouse',\n      translation: 'блузка',\n      image: 'img/blouse.jpg',\n      audioSrc: 'audio/blouse.mp3',\n    },\n    {\n      word: 'dress',\n      translation: 'платье',\n      image: 'img/dress.jpg',\n      audioSrc: 'audio/dress.mp3',\n    },\n    {\n      word: 'boot',\n      translation: 'ботинок',\n      image: 'img/boot.jpg',\n      audioSrc: 'audio/boot.mp3',\n    },\n    {\n      word: 'shirt',\n      translation: 'рубашка',\n      image: 'img/shirt.jpg',\n      audioSrc: 'audio/shirt.mp3',\n    },\n    {\n      word: 'coat',\n      translation: 'пальто',\n      image: 'img/coat.jpg',\n      audioSrc: 'audio/coat.mp3',\n    },\n    {\n      word: 'shoe',\n      translation: 'туфли',\n      image: 'img/shoe.jpg',\n      audioSrc: 'audio/shoe.mp3',\n    },\n  ],\n  [\n    {\n      word: 'sad',\n      translation: 'грустный',\n      image: 'img/sad.jpg',\n      audioSrc: 'audio/sad.mp3',\n    },\n    {\n      word: 'angry',\n      translation: 'сердитый',\n      image: 'img/angry.jpg',\n      audioSrc: 'audio/angry.mp3',\n    },\n    {\n      word: 'happy',\n      translation: 'счастливый',\n      image: 'img/happy.jpg',\n      audioSrc: 'audio/happy.mp3',\n    },\n    {\n      word: 'tired',\n      translation: 'уставший',\n      image: 'img/tired.jpg',\n      audioSrc: 'audio/tired.mp3',\n    },\n    {\n      word: 'surprised',\n      translation: 'удивлённый',\n      image: 'img/surprised.jpg',\n      audioSrc: 'audio/surprised.mp3',\n    },\n    {\n      word: 'scared',\n      translation: 'испуганный',\n      image: 'img/scared.jpg',\n      audioSrc: 'audio/scared.mp3',\n    },\n    {\n      word: 'smile',\n      translation: 'улыбка',\n      image: 'img/smile.jpg',\n      audioSrc: 'audio/smile.mp3',\n    },\n    {\n      word: 'laugh',\n      translation: 'смех',\n      image: 'img/laugh.jpg',\n      audioSrc: 'audio/laugh.mp3',\n    },\n  ],\n];\n","/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Prompt } from 'react-router';\nimport { CategoryCard } from '../Card/CategoryCard/CategoryCard';\nimport { ItemCard } from '../Card/ItemCard/ItemCard';\nimport { categories, cards } from '../../cardData';\nimport { toArrayId } from '../../@core/functions';\nimport './CardHolder.scss';\n\ninterface CardHolderProps {\n  offlineContentVisible: boolean;\n  isOffline: boolean;\n  isPlaying: boolean;\n  id: string;\n  isGameStarted: boolean;\n  gameStepsFunc: () => void;\n  isBlocking: boolean;\n}\n\nexport const CardHolder: React.FC<CardHolderProps> = ({\n  offlineContentVisible,\n  isOffline,\n  isBlocking,\n  isPlaying,\n  id,\n  isGameStarted,\n  gameStepsFunc,\n}) => {\n  const [forReload, setForReload] = useState(false);\n\n  const pageReload = () => {\n    setForReload(!forReload);\n  };\n\n  useEffect(() => {\n    if (isGameStarted) {\n      window.onbeforeunload = () => true;\n    } else {\n      window.onbeforeunload = null;\n    }\n  });\n\n  return (\n    <>\n      <Prompt when={isBlocking} message=\"You will lose your result. Are you sure?\" />\n      <div className={`CardHolder${!id ? '' : !isOffline ? ' word' : ' offline'}`}>\n        {!id &&\n          categories.map((elem, i) => {\n            const indexToId = i + 1; // for array index to match route\n            return (\n              <div className=\"Card\" key={elem.title}>\n                <Link to={`category/${indexToId}`} className=\"Link\">\n                  <CategoryCard isPlaying={isPlaying} title={elem.title} image={elem.image} />\n                </Link>\n              </div>\n            );\n          })}\n        {id &&\n          !isOffline &&\n          cards[toArrayId(id)].map((elem) => {\n            return (\n              <ItemCard\n                inGameAnswer={gameStepsFunc}\n                isPlaying={isPlaying}\n                word={elem.word}\n                translation={elem.translation}\n                image={elem.image}\n                audio={elem.audioSrc}\n                key={elem.word}\n                isGameStarted={isGameStarted}\n              />\n            );\n          })}\n        {id && isOffline && (\n          <div className=\"offlineContent\">\n            <h3 className=\"offlineContentMessage\">\n              OOPS! The page is offline.\n              <br />\n              Please check your internet connection and reload the page!\n            </h3>\n            <button type=\"button\" className=\"offlineContentReloadButton\" onClick={pageReload}>\n              RELOAD\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport i18next from 'i18next';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport data from '../../en.json';\nimport './StatsBlock.scss';\n\nexport interface StatsBlockProps {\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  id: string;\n  answers: boolean[];\n}\n\nexport const StatsBlock: React.FC<StatsBlockProps> = ({ answers, isGameStarted, id }) => {\n  const [innerWidth, setInnerWidth] = useState<number>(1600);\n  const [language, setLanguage] = useState('en');\n  const triggerWidth = 820; // changes stats block style at this point\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  function setWindowInnerWidth(): void {\n    setInnerWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  });\n\n  useEffect(() => {\n    setInnerWidth(window.innerWidth);\n    window.addEventListener('load', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  }, []);\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`StatsBlockContainer${innerWidth <= triggerWidth ? ' mini' : ''}`}>\n      {innerWidth > triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('answers')}</span>\n          </div>\n          {isGameStarted &&\n            answers.map((el, i) => {\n              return (\n                <div className=\"IconContainer\" key={`key${i + 1}`}>\n                  <img\n                    className=\"Icon\"\n                    alt={`icon${i}`}\n                    src={`${PUBLIC_URL}/img/${el === true ? 'correct.png' : 'wrong.png'}`}\n                  />\n                </div>\n              );\n            })}\n        </div>\n      )}\n      {innerWidth <= triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game mini' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('correct')}</span>\n          </div>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('wrong')}</span>\n          </div>\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game correct' : ''}`}>\n              {answers.filter((el) => el === true).length}\n            </div>\n          )}\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game wrong' : ''}`}>\n              {answers.filter((el) => el === false).length}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PageInfoBlock } from '../PageInfoBlock/PageInfoBlock';\nimport { CardHolder } from '../Cardholder/CardHolder';\nimport { StatsBlock } from '../StatsBlock/StatsBlock';\nimport { cards } from '../../cardData';\nimport { randomizerFunc, toArrayId, audioPlayFunc, gameMainFunction } from '../../@core/functions';\nimport { GetResult, MatchParams, WordCard } from '../../@core/interfaces';\nimport { PUBLIC_URL, correctAudioSrc, errorAudioSrc } from '../../@core/constants';\nimport './MainPage.scss';\n\ninterface MainPageProps {\n  offlineContentVisible: boolean;\n  isOffline: boolean;\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  gameStartedToggle: () => void;\n  resultScreenVisibilityToggle: () => void;\n  getResult: GetResult;\n  isBlocking: boolean;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const MainPage: React.FC<MainPageProps> = ({\n  offlineContentVisible,\n  isOffline,\n  isBlocking,\n  isPlaying,\n  isGameStarted,\n  gameStartedToggle,\n  resultScreenVisibilityToggle,\n  getResult,\n  setIsBlockingToggle,\n}) => {\n  const [answers, setAnswer] = useState<boolean[]>([]);\n  const idParam = useParams<MatchParams>();\n\n  const cardsArrS = useRef<WordCard[]>([]);\n  const finalResult = useRef<string>('');\n  const cardIndex = useRef<number>(0);\n  const correctAnswers = useRef<number>(0);\n  const answersCount = useRef<number>(0);\n\n  const chancesGiven = 10; // количество ответов\n  const maxCorrectAnswers = 8; // максимальное количество правильных ответов\n  const maxPercent = 100;\n\n  const clearAll = () => {\n    setAnswer([]);\n    cardsArrS.current = [];\n    cardIndex.current = 0;\n    answersCount.current = 0;\n    finalResult.current = '';\n    correctAnswers.current = 0;\n  };\n\n  const resultScreenShow = () => {\n    finalResult.current = `${(maxPercent / maxCorrectAnswers) * correctAnswers.current}%`;\n    getResult(finalResult.current);\n    resultScreenVisibilityToggle();\n    setIsBlockingToggle(false);\n  };\n\n  const gameStepsFunc = (EO?: React.MouseEvent) => {\n    gameMainFunction(\n      EO,\n      cardsArrS,\n      cardIndex,\n      answersCount,\n      chancesGiven,\n      correctAnswers,\n      maxCorrectAnswers,\n      PUBLIC_URL,\n      correctAudioSrc,\n      errorAudioSrc,\n      setAnswer,\n      resultScreenShow\n    );\n  };\n\n  const startGameFunc = () => {\n    cardsArrS.current = cards[toArrayId(idParam.id)].slice().sort(randomizerFunc);\n    if (cardsArrS) audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const replayWord = () => {\n    audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const restartGameFunc = () => {\n    clearAll();\n    startGameFunc();\n  };\n\n  const newGameFunc = () => {\n    clearAll();\n    gameStartedToggle();\n    startGameFunc();\n    setIsBlockingToggle(true);\n  };\n\n  useEffect(() => {\n    clearAll();\n    setIsBlockingToggle(false);\n    if (isGameStarted) gameStartedToggle();\n  }, [idParam.id]);\n\n  return (\n    <div className=\"MainPage\">\n      <PageInfoBlock\n        isGameStarted={isGameStarted}\n        isPlaying={isPlaying}\n        id={idParam.id}\n        newGameFunc={newGameFunc}\n        restartGameFunc={restartGameFunc}\n        replayWord={replayWord}\n      />\n      <CardHolder\n        offlineContentVisible={offlineContentVisible}\n        isOffline={isOffline}\n        isBlocking={isBlocking}\n        isPlaying={isPlaying}\n        id={idParam.id}\n        isGameStarted={isGameStarted}\n        gameStepsFunc={gameStepsFunc}\n      />\n      {isPlaying && (\n        <StatsBlock\n          answers={answers}\n          isPlaying={isPlaying}\n          isGameStarted={isGameStarted}\n          id={idParam.id}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport Switch from 'react-switch';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport './Header.scss';\n\ninterface HeaderProps {\n  sideBarToggle: () => void;\n  setModeToggle: () => void;\n  isPlaying: boolean;\n  isGameStarted: boolean;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const Header: React.FC<HeaderProps> = ({\n  setIsBlockingToggle,\n  isGameStarted,\n  isPlaying,\n  sideBarToggle,\n  setModeToggle,\n}) => {\n  const checkToggle = () => {\n    if (isGameStarted && isPlaying) {\n      setIsBlockingToggle(false);\n      setModeToggle();\n    } else setModeToggle();\n  };\n  return (\n    <div className=\"Header\" style={{ backgroundImage: `url(${PUBLIC_URL}/background.jpg)` }}>\n      <div role=\"button\" className=\"SideBarOpenButton\" onClick={sideBarToggle} aria-hidden=\"true\">\n        |||\n      </div>\n      <div className=\"ModeSelector\">\n        <span className=\"ModeText\">{isPlaying ? 'PLAY' : 'TRAIN'}</span>\n        <Switch\n          onHandleColor=\"#FFFFFF\"\n          onColor=\"#99AE99\"\n          uncheckedIcon={false}\n          checkedIcon={false}\n          checked={isPlaying}\n          className=\"Switch\"\n          onChange={checkToggle}\n          height={20}\n          width={48}\n          handleDiameter={18}\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.2)\"\n          activeBoxShadow=\"0px 0px 1px 5px rgba(0, 52, 0, 0.4)\"\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport i18next from 'i18next';\nimport './NetworkIndicator.scss';\nimport data from '../../en.json';\n\ninterface NetworkIndicatorProps {\n  viewNetworkStatus: boolean;\n}\n\nexport const NetworkIndicator: React.FC<NetworkIndicatorProps> = ({ viewNetworkStatus }) => {\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`IndicatorContainer${viewNetworkStatus ? ' view' : ' hide'}`}>\n      <div className=\"IndicatorText\">\n        <span>{i18next.t('offline')}</span>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { categories } from '../../cardData';\nimport './SideBar.scss';\n\ninterface SideBarProps {\n  isPlaying: boolean;\n  cbToggle: () => void;\n}\n\nexport const SideBar: React.FC<SideBarProps> = ({ isPlaying, cbToggle }) => {\n  return (\n    <div className=\"SideBarContainer\">\n      <div\n        style={{\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'end',\n          marginTop: '10px',\n        }}\n      >\n        <button\n          type=\"button\"\n          className={`SideBarMenuItem${isPlaying ? ' close play' : ' close'}`}\n          onClick={cbToggle}\n        >\n          &#9668;\n        </button>\n      </div>\n      <ul>\n        <li>\n          <NavLink\n            to=\"/\"\n            onClick={cbToggle}\n            className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n          >\n            Main Page\n          </NavLink>\n        </li>\n\n        {categories.map((elem, i) => {\n          return (\n            <li key={elem.title}>\n              <NavLink\n                to={`/category/${i + 1}`} // +1 cause of array starts on index 0\n                onClick={cbToggle}\n                className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n              >\n                {elem.title}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport i18next from 'i18next';\nimport './ResultScreen.scss';\nimport data from '../../en.json';\n\ninterface ResultScreenProps {\n  resultScreenVisibilityToggle: () => void;\n  viewResultScreen: boolean;\n  finalResult: string;\n}\n\nexport const ResultScreen: React.FC<ResultScreenProps> = ({\n  resultScreenVisibilityToggle,\n  viewResultScreen,\n  finalResult,\n}) => {\n  const [language, setLanguage] = useState('en');\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  return (\n    <div className={`ResultScreen${viewResultScreen ? ' view' : ' hide'}`}>\n      <div className=\"ResultPercent\">\n        <h2>{i18next.t('result')}</h2>\n        <h1>{finalResult}</h1>\n        <button type=\"button\" onClick={resultScreenVisibilityToggle}>\n          {i18next.t('close')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-return-assign */\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport i18next from 'i18next';\nimport { MainPage } from './components/MainPage/MainPage';\nimport { Header } from './components/Header/Header';\nimport { NetworkIndicator } from './components/NetworkIndicator/NetworkIndicator';\nimport { SideBar } from './components/SideBar/SideBar';\nimport { ResultScreen } from './components/ResultScreen/ResultScreen';\nimport { PUBLIC_URL } from './@core/constants';\nimport { GetResult } from './@core/interfaces';\nimport data from './en.json';\nimport './App.scss';\nimport './components/SideBar/SideBar.scss';\n\nconst App: React.FC = () => {\n  const [isPlaying, isPlayingToggle] = useState<boolean>(false);\n  const [isOffline, isOfflineToggle] = useState<boolean>(false);\n  const [swModaleView, setModaleView] = useState(false);\n  const [sideBarVisible, changeSideBarVisibility] = useState<boolean>(false);\n  const [isGameStarted, setIsGameStarted] = useState<boolean>(false);\n  const [viewResultScreen, setViewResultScreen] = useState<boolean>(false);\n  const [isBlocking, setIsBlocking] = useState<boolean>(false);\n  const [result, setResult] = useState<string>('');\n  const [language, setLanguage] = useState('en');\n  const [offlineContentVisible, setOfflineContentVisible] = useState(false);\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    setLanguage(language);\n  };\n  const offlineContentVisibilityToggle = (flag: boolean) => {\n    setOfflineContentVisible(flag);\n  };\n\n  const setIsOffline = () => isOfflineToggle(true);\n  const setIsOnline = () => isOfflineToggle(false);\n  const sideBarToggle = () => changeSideBarVisibility(!sideBarVisible);\n  const setModaleViewToggle = (value: boolean) => setModaleView(value);\n  const setMode = () => {\n    isPlayingToggle(!isPlaying);\n    if (isGameStarted === true) setIsGameStarted(false);\n  };\n  const gameStartedToggle = () => {\n    setIsGameStarted(!isGameStarted);\n    setResult('');\n  };\n  const resultScreenVisibilityToggle = () => {\n    setViewResultScreen(!viewResultScreen);\n    if (isPlaying) setMode();\n  };\n  const getResult: GetResult = (res) => setResult(res);\n  const setIsBlockingToggle = (flag: boolean) => setIsBlocking(flag);\n\n  window.addEventListener('offline', setIsOffline, false);\n  window.addEventListener('online', setIsOnline, false);\n  window.addEventListener('hashchange', () => {\n    if (isOffline) {\n      offlineContentVisibilityToggle(true);\n      console.log('its offline', offlineContentVisible);\n    } else {\n      offlineContentVisibilityToggle(false);\n      console.log('its not offline', offlineContentVisible);\n    }\n  });\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  const askUserToUpdate = (reg: ServiceWorkerRegistration) => {\n    console.log('ddddd');\n    setModaleViewToggle(true);\n    const okButton = document.getElementById('okButton') as HTMLButtonElement;\n    okButton.onclick = () => {\n      reg.waiting?.postMessage({ type: 'SKIP_WAITING' });\n      setModaleViewToggle(false);\n    };\n  };\n\n  window.addEventListener('load', async () => {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      try {\n        const reg = await navigator.serviceWorker.register(\n          `${process.env.PUBLIC_URL}/service-worker.js`\n        );\n        reg.onupdatefound = () => {\n          const installingWorker = reg.installing;\n          if (installingWorker) {\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                askUserToUpdate(reg); // shows update message\n              }\n            };\n          }\n        };\n        console.log('success', reg);\n      } catch (e) {\n        console.log('fail');\n      }\n    }\n  });\n\n  const onReloadCancel = () => {\n    console.log('reload-cancel');\n    setModaleViewToggle(false);\n  };\n\n  navigator.serviceWorker.addEventListener('controllerchange', () => {\n    console.log('controller-changed');\n    window.location.reload();\n  });\n\n  return (\n    <BrowserRouter basename={PUBLIC_URL}>\n      <div\n        className=\"App\"\n        style={{\n          backgroundImage: `url(${PUBLIC_URL}/background.jpg`,\n          backgroundRepeat: 'repeat',\n          backgroundAttachment: 'fixed',\n        }}\n      >\n        <header>\n          <div className={`${sideBarVisible ? 'SideBar active' : 'SideBar'}`}>\n            <SideBar isPlaying={isPlaying} cbToggle={sideBarToggle} />\n          </div>\n          <Header\n            isGameStarted={isGameStarted}\n            setIsBlockingToggle={setIsBlockingToggle}\n            isPlaying={isPlaying}\n            sideBarToggle={sideBarToggle}\n            setModeToggle={setMode}\n          />\n        </header>\n        <main>\n          <>\n            <div className={`UpdateSWContainer${swModaleView ? ' view' : ' hide'}`}>\n              <div className=\"UpdateSWMessage\">\n                <span>{i18next.t('swReloadMessage')}</span>\n                <div className=\"UpdateSWButtons\">\n                  <button className=\"UpdateButton\" id=\"okButton\" type=\"button\">\n                    OK\n                  </button>\n                  <button className=\"UpdateButton\" type=\"button\" onClick={onReloadCancel}>\n                    CANCEL\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n          <NetworkIndicator viewNetworkStatus={isOffline} />\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <MainPage\n                offlineContentVisible={offlineContentVisible}\n                isOffline={isOffline}\n                isPlaying={isPlaying}\n                isGameStarted={isGameStarted}\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                setIsBlockingToggle={setIsBlockingToggle}\n                isBlocking={isBlocking}\n              />\n            )}\n          />\n          <Route\n            path=\"/category/:id\"\n            render={() => (\n              <MainPage\n                offlineContentVisible={offlineContentVisible}\n                isOffline={isOffline}\n                isPlaying={isPlaying}\n                isGameStarted={isGameStarted}\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                isBlocking={isBlocking}\n                setIsBlockingToggle={setIsBlockingToggle}\n              />\n            )}\n          />\n          <ResultScreen\n            resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n            viewResultScreen={viewResultScreen}\n            finalResult={result}\n          />\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}