{"version":3,"sources":["state/appConfigAC.ts","state/appConfigReducer.ts","state/elementsVisibilityAC.ts","state/elementsVisibilityReducer.ts","state/gameProcessAC.ts","state/gameProcessReducer.ts","state/offlineAC.ts","state/offlineReducer.ts","state/reducers.ts","components/PageInfoBlock/PageInfoBlock.tsx","@core/constants.ts","components/Card/CategoryCard/CategoryCard.tsx","@core/functions.ts","components/Card/ItemCard/ItemCard.tsx","cardData.ts","components/Cardholder/CardHolder.tsx","components/StatsBlock/StatsBlock.tsx","components/MainPage/MainPage.tsx","components/Header/Header.tsx","components/NetworkIndicator/NetworkIndicator.tsx","components/SideBar/SideBar.tsx","components/LoadingLine/LoadingLine.tsx","components/ResultScreen/ResultScreen.tsx","components/UpdateSWMessage/UpdateSWMessage.tsx","App.tsx","service-worker-registration.ts","reportWebVitals.ts","index.tsx"],"names":["APP_LANGUAGE_SET","APP_INNERWIDTH_SET","innerWidthSetAC","innerWidth","type","payload","initState","language","SIDEBAR_VISIBILITY","RESULT_SCREEN_VISIBILITY","SW_MODALE_VISIBILITY","IS_CARD_FLIPPED","NETWORK_INDICATOR_VISIBILITY","LOADING_LINE_VISIBILITY","loadingLineVisibilitySetAC","loadingLineVisibility","sideBarVisible","resultScreenVisible","swModaleVisible","isCardFlipped","indicatorVisibility","IS_PLAYING","IS_GAME_STARTED","IS_BLOCKING","ADD_ANSWER","CLEAR_ANSWERS","SET_RESULT","isGameStartedSetAC","isGameStarted","setResultAC","result","isPlaying","isBlocking","answers","IS_OFFLINE","IS_OFFLINE_CONTENT_VISIBLE","FOR_OFFLINE_RELOAD","isOfflineSetAC","isOffline","offlineContentVisible","forReload","combinedReducer","combineReducers","appConfig","state","action","elementVisibility","gameProcess","newAnswers","slice","push","offline","PageInfoBlock","textSeen","otherText","id","undefined","newGameFunc","restartGameFunc","replayWord","useSelector","store","useEffect","window","scrollTo","className","i18next","t","onClick","PUBLIC_URL","process","CategoryCard","title","image","alt","src","randomizerFunc","Math","random","toArrayId","Number","sound","Audio","audioPlayFunc","publicURL","mode","onloadeddata","onplaying","onpause","pauseSound","paused","pause","currentTime","play","timeOutAudio","ItemCard","word","translation","audio","inGameAnswer","useState","setIsCardFlipped","audioPlay","flipOnMouseLeaveOrClick","onMouseLeave","role","tabIndex","style","border","backgroundColor","categories","cards","audioSrc","CardHolder","gameStepsFunc","dispatch","useDispatch","onbeforeunload","when","message","map","elem","i","indexToId","to","reloadOfflineAC","loaderTimeout","setTimeout","clearTimeout","StatsBlock","setWindowInnerWidth","addEventListener","removeEventListener","el","filter","length","MainPage","gameStartedToggle","resultScreenVisibilityToggle","getResult","setIsBlockingToggle","idParam","useParams","cardsArrS","useRef","finalResult","cardIndex","correctAnswers","answersCount","setAnswer","value","clearAll","current","resultScreenShow","maxPercent","startGameFunc","sort","EO","cardsArray","chancesGiven","maxCorrectAnswers","correctAudioSrc","errorAudioSrc","setAnswerFunc","resultShowFunc","target","dataset","gameMainFunction","Header","sideBarToggle","setModeToggle","backgroundImage","onHandleColor","onColor","uncheckedIcon","checkedIcon","checked","onChange","height","width","handleDiameter","boxShadow","activeBoxShadow","NetworkIndicator","indicatorViewToggle","flag","networkIndicatorVisibilitySetAC","indicatorTimeout","SideBar","cbToggle","display","flexDirection","justifyContent","marginTop","LoadingLine","showLoadingLine","ResultScreen","UpdateSWMessage","onReloadCancel","App","setAppLanguage","lang","init","lng","resources","data","languageSetAC","offlineContentVisibilityToggle","setIsOffline","setIsOnline","sideBarVisibilitySetAC","setModaleViewToggle","setMode","isPlayingSetAC","resultScreenVisibilitySetAC","res","offlineContentTimeout","updateAskFunc","reg","document","getElementById","onclick","waiting","postMessage","a","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","location","reload","basename","backgroundRepeat","backgroundAttachment","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createStore","applyMiddleware","thunk","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.fd3975ab.chunk.js","sourcesContent":["export const APP_LANGUAGE_SET = 'APP_LANGUAGE_SET';\nexport const APP_INNERWIDTH_SET = 'APP_INNERWIDTH_SET';\n\nexport type AppLanguageSetActionType = typeof APP_LANGUAGE_SET;\nexport type AppInnerWidthActionType = typeof APP_INNERWIDTH_SET;\n\ninterface LanguageSetAC {\n  (lang: string): {\n    type: AppLanguageSetActionType;\n    payload: typeof lang;\n  };\n}\n\ninterface InnerWidthSetAC {\n  (innerWidth: number): {\n    type: AppInnerWidthActionType;\n    payload: typeof innerWidth;\n  };\n}\n\nexport const languageSetAC: LanguageSetAC = (lang) => {\n  return {\n    type: APP_LANGUAGE_SET,\n    payload: lang,\n  };\n};\n\nexport const innerWidthSetAC: InnerWidthSetAC = (innerWidth) => {\n  return {\n    type: APP_INNERWIDTH_SET,\n    payload: innerWidth,\n  };\n};\n","import {\n  APP_LANGUAGE_SET,\n  APP_INNERWIDTH_SET,\n  AppLanguageSetActionType,\n  AppInnerWidthActionType,\n} from './appConfigAC';\nimport { AppConfigState } from '../@core/interfaces';\n\ninterface AppLanguageSetAction {\n  type: AppLanguageSetActionType;\n  payload: string;\n}\n\ninterface AppInnerWidthAction {\n  type: AppInnerWidthActionType;\n  payload: number;\n}\n\ntype AppConfigAction = AppLanguageSetAction | AppInnerWidthAction;\n\nconst initState: AppConfigState = {\n  language: '',\n  innerWidth: 1600,\n};\n\nexport default function appConfigReducer(\n  state = initState,\n  action: AppConfigAction\n): AppConfigState {\n  switch (action.type) {\n    case APP_LANGUAGE_SET: {\n      return {\n        ...state,\n        language: action.payload,\n      };\n    }\n    case APP_INNERWIDTH_SET: {\n      return {\n        ...state,\n        innerWidth: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","export const SIDEBAR_VISIBILITY = 'SIDEBAR_VISIBILITY';\nexport const RESULT_SCREEN_VISIBILITY = 'RESULT_SCREEN_VISIBILITY';\nexport const SW_MODALE_VISIBILITY = 'SW_MODALE_VISIBILITY';\nexport const IS_CARD_FLIPPED = 'IS_CARD_FLIPPED';\nexport const NETWORK_INDICATOR_VISIBILITY = 'NETWORK_INDICATOR_VISIBILITY';\nexport const LOADING_LINE_VISIBILITY = 'LOADING_LINE_VISIBILITY';\n\nexport type SidebarVisibilityActionType = typeof SIDEBAR_VISIBILITY;\nexport type ResultScreenVisibilityActionType = typeof RESULT_SCREEN_VISIBILITY;\nexport type SWModaleVisibilityActionType = typeof SW_MODALE_VISIBILITY;\nexport type IsCardFlippedActionType = typeof IS_CARD_FLIPPED;\nexport type IndicatorVisibilityActionType = typeof NETWORK_INDICATOR_VISIBILITY;\nexport type LoadingLineVisibilityActionType = typeof LOADING_LINE_VISIBILITY;\n\ninterface SidebarVisibilitySetAC {\n  (sideBarVisible: boolean): {\n    type: SidebarVisibilityActionType;\n    payload: typeof sideBarVisible;\n  };\n}\n\ninterface ResultScreenVisibilitySetAC {\n  (resultScreenVisible: boolean): {\n    type: ResultScreenVisibilityActionType;\n    payload: typeof resultScreenVisible;\n  };\n}\n\ninterface SWModaleVisibilitySetAC {\n  (swModaleVisible: boolean): {\n    type: SWModaleVisibilityActionType;\n    payload: typeof swModaleVisible;\n  };\n}\n\ninterface IsCardFlippedSetAC {\n  (isCardFlipped: boolean): {\n    type: IsCardFlippedActionType;\n    payload: typeof isCardFlipped;\n  };\n}\n\ninterface NetworkIndicatorVisibilitySetAC {\n  (indicatorVisibility: boolean): {\n    type: IndicatorVisibilityActionType;\n    payload: typeof indicatorVisibility;\n  };\n}\n\ninterface LoadingLineVisibilitySetAC {\n  (loadingLineVisibility: boolean): {\n    type: LoadingLineVisibilityActionType;\n    payload: typeof loadingLineVisibility;\n  };\n}\n\nexport const sideBarVisibilitySetAC: SidebarVisibilitySetAC = (sideBarVisible) => {\n  return {\n    type: SIDEBAR_VISIBILITY,\n    payload: sideBarVisible,\n  };\n};\n\nexport const resultScreenVisibilitySetAC: ResultScreenVisibilitySetAC = (resultScreenVisible) => {\n  return {\n    type: RESULT_SCREEN_VISIBILITY,\n    payload: resultScreenVisible,\n  };\n};\n\nexport const swModaleVisibilitySetAC: SWModaleVisibilitySetAC = (swModaleVisible) => {\n  return {\n    type: SW_MODALE_VISIBILITY,\n    payload: swModaleVisible,\n  };\n};\n\nexport const isCardFlippedSetAC: IsCardFlippedSetAC = (isCardFlipped) => {\n  return {\n    type: IS_CARD_FLIPPED,\n    payload: isCardFlipped,\n  };\n};\n\nexport const networkIndicatorVisibilitySetAC: NetworkIndicatorVisibilitySetAC = (\n  indicatorVisibility\n) => {\n  return {\n    type: NETWORK_INDICATOR_VISIBILITY,\n    payload: indicatorVisibility,\n  };\n};\n\nexport const loadingLineVisibilitySetAC: LoadingLineVisibilitySetAC = (loadingLineVisibility) => {\n  return {\n    type: LOADING_LINE_VISIBILITY,\n    payload: loadingLineVisibility,\n  };\n};\n","import {\n  SIDEBAR_VISIBILITY,\n  RESULT_SCREEN_VISIBILITY,\n  SW_MODALE_VISIBILITY,\n  IS_CARD_FLIPPED,\n  NETWORK_INDICATOR_VISIBILITY,\n  LOADING_LINE_VISIBILITY,\n  SidebarVisibilityActionType,\n  ResultScreenVisibilityActionType,\n  SWModaleVisibilityActionType,\n  IsCardFlippedActionType,\n  IndicatorVisibilityActionType,\n  LoadingLineVisibilityActionType,\n} from './elementsVisibilityAC';\nimport { ElementsVisibilityState } from '../@core/interfaces';\n\ninterface SidebarVisibilityAction {\n  type: SidebarVisibilityActionType;\n  payload: boolean;\n}\n\ninterface ResultScreenVisibilityAction {\n  type: ResultScreenVisibilityActionType;\n  payload: boolean;\n}\n\ninterface SWModaleVisibilityAction {\n  type: SWModaleVisibilityActionType;\n  payload: boolean;\n}\n\ninterface isCardFlippedAction {\n  type: IsCardFlippedActionType;\n  payload: boolean;\n}\n\ninterface indicatorVisibilityAction {\n  type: IndicatorVisibilityActionType;\n  payload: boolean;\n}\n\ninterface LoadingLineVisibilityAction {\n  type: LoadingLineVisibilityActionType;\n  payload: boolean;\n}\n\ntype ElementsVisibilityAction =\n  | SidebarVisibilityAction\n  | ResultScreenVisibilityAction\n  | SWModaleVisibilityAction\n  | isCardFlippedAction\n  | indicatorVisibilityAction\n  | LoadingLineVisibilityAction;\n\nconst initState: ElementsVisibilityState = {\n  sideBarVisible: false,\n  resultScreenVisible: false,\n  swModaleVisible: false,\n  isCardFlipped: false,\n  indicatorVisibility: false,\n  loadingLineVisibility: false,\n};\n\nexport default function elementsVisibilityReducer(\n  state = initState,\n  action: ElementsVisibilityAction\n): ElementsVisibilityState {\n  switch (action.type) {\n    case SIDEBAR_VISIBILITY: {\n      return {\n        ...state,\n        sideBarVisible: action.payload,\n      };\n    }\n    case RESULT_SCREEN_VISIBILITY: {\n      return {\n        ...state,\n        resultScreenVisible: action.payload,\n      };\n    }\n    case SW_MODALE_VISIBILITY: {\n      return {\n        ...state,\n        swModaleVisible: action.payload,\n      };\n    }\n    case IS_CARD_FLIPPED: {\n      return {\n        ...state,\n        isCardFlipped: action.payload,\n      };\n    }\n    case NETWORK_INDICATOR_VISIBILITY: {\n      return {\n        ...state,\n        indicatorVisibility: action.payload,\n      };\n    }\n    case LOADING_LINE_VISIBILITY: {\n      return {\n        ...state,\n        loadingLineVisibility: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","export const IS_PLAYING = 'IS_PLAYING';\nexport const IS_GAME_STARTED = 'IS_GAME_STARTED';\nexport const IS_BLOCKING = 'IS_BLOCKING';\nexport const ADD_ANSWER = 'ADD_ANSWER';\nexport const CLEAR_ANSWERS = 'CLEAR_ANSWERS';\nexport const SET_RESULT = 'SET_RESULT';\n\nexport type IsPlayingActionType = typeof IS_PLAYING;\nexport type IsGameStartedActionType = typeof IS_GAME_STARTED;\nexport type IsBlockingActionType = typeof IS_BLOCKING;\nexport type AddAnswerActionType = typeof ADD_ANSWER;\nexport type ClearAnswersActionType = typeof CLEAR_ANSWERS;\nexport type SetResultActionType = typeof SET_RESULT;\n\ninterface IsPlayingSetAC {\n  (isPlaying: boolean): {\n    type: IsPlayingActionType;\n    payload: typeof isPlaying;\n  };\n}\n\ninterface IsGameStartedSetAC {\n  (isGameStarted: boolean): {\n    type: IsGameStartedActionType;\n    payload: typeof isGameStarted;\n  };\n}\n\ninterface IsBlockingSetAC {\n  (isBlocking: boolean): {\n    type: IsBlockingActionType;\n    payload: typeof isBlocking;\n  };\n}\n\ninterface AddAnswerAC {\n  (answer: boolean): {\n    type: AddAnswerActionType;\n    payload: typeof answer;\n  };\n}\n\ninterface ClearAnswersAC {\n  (arr: boolean[]): {\n    type: ClearAnswersActionType;\n    payload: typeof arr;\n  };\n}\n\ninterface SetResultAC {\n  (result: string): {\n    type: SetResultActionType;\n    payload: typeof result;\n  };\n}\n\nexport const isPlayingSetAC: IsPlayingSetAC = (isPlaying) => {\n  return {\n    type: IS_PLAYING,\n    payload: isPlaying,\n  };\n};\n\nexport const isGameStartedSetAC: IsGameStartedSetAC = (isGameStarted) => {\n  return {\n    type: IS_GAME_STARTED,\n    payload: isGameStarted,\n  };\n};\n\nexport const isBlockingSetAC: IsBlockingSetAC = (isBlocking) => {\n  return {\n    type: IS_BLOCKING,\n    payload: isBlocking,\n  };\n};\n\nexport const addAnswerAC: AddAnswerAC = (answer) => {\n  return {\n    type: ADD_ANSWER,\n    payload: answer,\n  };\n};\n\nexport const clearAnswersAC: ClearAnswersAC = (arr) => {\n  return {\n    type: CLEAR_ANSWERS,\n    payload: arr,\n  };\n};\n\nexport const setResultAC: SetResultAC = (result) => {\n  return {\n    type: SET_RESULT,\n    payload: result,\n  };\n};\n","import {\n  IS_PLAYING,\n  IS_GAME_STARTED,\n  IS_BLOCKING,\n  ADD_ANSWER,\n  SET_RESULT,\n  CLEAR_ANSWERS,\n  IsPlayingActionType,\n  IsGameStartedActionType,\n  IsBlockingActionType,\n  AddAnswerActionType,\n  ClearAnswersActionType,\n  SetResultActionType,\n} from './gameProcessAC';\nimport { GameProcessState } from '../@core/interfaces';\n\ninterface IsPlayingAction {\n  type: IsPlayingActionType;\n  payload: boolean;\n}\n\ninterface IsGameStartedAction {\n  type: IsGameStartedActionType;\n  payload: boolean;\n}\n\ninterface IsBlockingAction {\n  type: IsBlockingActionType;\n  payload: boolean;\n}\n\ninterface AddAnswerAction {\n  type: AddAnswerActionType;\n  payload: boolean;\n}\n\ninterface ClearAnswersAction {\n  type: ClearAnswersActionType;\n  payload: boolean[];\n}\n\ninterface SetResultAction {\n  type: SetResultActionType;\n  payload: string;\n}\n\ntype GameProcessAction =\n  | IsPlayingAction\n  | IsGameStartedAction\n  | IsBlockingAction\n  | AddAnswerAction\n  | ClearAnswersAction\n  | SetResultAction;\n\nconst initState: GameProcessState = {\n  isPlaying: false,\n  isGameStarted: false,\n  isBlocking: false,\n  answers: [], // waits for answer as boolean\n  result: '',\n};\n\nexport default function gameProcessReducer(\n  state = initState,\n  action: GameProcessAction\n): GameProcessState {\n  switch (action.type) {\n    case IS_PLAYING: {\n      return {\n        ...state,\n        isPlaying: action.payload,\n      };\n    }\n    case IS_GAME_STARTED: {\n      return {\n        ...state,\n        isGameStarted: action.payload,\n      };\n    }\n    case IS_BLOCKING: {\n      return {\n        ...state,\n        isBlocking: action.payload,\n      };\n    }\n    case ADD_ANSWER: {\n      const newAnswers = state.answers.slice();\n      newAnswers.push(action.payload);\n      return {\n        ...state,\n        answers: newAnswers,\n      };\n    }\n    case CLEAR_ANSWERS: {\n      return {\n        ...state,\n        answers: action.payload,\n      };\n    }\n    case SET_RESULT: {\n      return {\n        ...state,\n        result: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","export const IS_OFFLINE = 'IS_OFFLINE';\nexport const IS_OFFLINE_CONTENT_VISIBLE = 'IS_OFFLINE_CONTENT_VISIBLE';\nexport const FOR_OFFLINE_RELOAD = 'FOR_OFFLINE_RELOAD';\n\nexport type IsOfflineActionType = typeof IS_OFFLINE;\nexport type IsOfflineContentVisibleActionType = typeof IS_OFFLINE_CONTENT_VISIBLE;\nexport type ForOfflineReloadActionType = typeof FOR_OFFLINE_RELOAD;\n\ninterface IsOfflineSetAC {\n  (isOffline: boolean): {\n    type: string;\n    payload: typeof isOffline;\n  };\n}\n\ninterface IsOfflineContentVisibleSetAC {\n  (offlineContentVisible: boolean): {\n    type: string;\n    payload: typeof offlineContentVisible;\n  };\n}\n\ninterface ReloadOfflineAC {\n  (forReload: boolean): {\n    type: string;\n    payload: typeof forReload;\n  };\n}\n\nexport const isOfflineSetAC: IsOfflineSetAC = (isOffline) => {\n  return {\n    type: IS_OFFLINE,\n    payload: isOffline,\n  };\n};\n\nexport const isOfflineContentVisibleSetAC: IsOfflineContentVisibleSetAC = (\n  offlineContentVisible\n) => {\n  return {\n    type: IS_OFFLINE_CONTENT_VISIBLE,\n    payload: offlineContentVisible,\n  };\n};\n\nexport const reloadOfflineAC: ReloadOfflineAC = (forReload) => {\n  return {\n    type: FOR_OFFLINE_RELOAD,\n    payload: forReload,\n  };\n};\n","import {\n  IS_OFFLINE,\n  IS_OFFLINE_CONTENT_VISIBLE,\n  FOR_OFFLINE_RELOAD,\n  IsOfflineActionType,\n  IsOfflineContentVisibleActionType,\n  ForOfflineReloadActionType,\n} from './offlineAC';\nimport { OfflineState } from '../@core/interfaces';\n\ninterface IsOfflineAction {\n  type: IsOfflineActionType;\n  payload: boolean;\n}\n\ninterface IsOfflineContentVisibleAction {\n  type: IsOfflineContentVisibleActionType;\n  payload: boolean;\n}\n\ninterface ForOfflineReloadAction {\n  type: ForOfflineReloadActionType;\n  payload: boolean;\n}\n\ntype OfflineAction = IsOfflineAction | IsOfflineContentVisibleAction | ForOfflineReloadAction;\n\nconst initState: OfflineState = {\n  isOffline: false,\n  offlineContentVisible: false,\n  forReload: false,\n};\n\nexport default function offlineReducer(state = initState, action: OfflineAction): OfflineState {\n  switch (action.type) {\n    case IS_OFFLINE: {\n      return {\n        ...state,\n        isOffline: action.payload,\n      };\n    }\n    case IS_OFFLINE_CONTENT_VISIBLE: {\n      return {\n        ...state,\n        offlineContentVisible: action.payload,\n      };\n    }\n    case FOR_OFFLINE_RELOAD: {\n      return {\n        ...state,\n        forReload: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport appConfigReducer from './appConfigReducer';\nimport elementsVisibilityReducer from './elementsVisibilityReducer';\nimport gameProcessReducer from './gameProcessReducer';\nimport offlineReducer from './offlineReducer';\n\nconst combinedReducer = combineReducers({\n  appConfig: appConfigReducer,\n  elementVisibility: elementsVisibilityReducer,\n  gameProcess: gameProcessReducer,\n  offline: offlineReducer,\n});\n\nexport default combinedReducer;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport i18next from 'i18next';\nimport './PageInfoBlock.scss';\nimport { AppState } from '../../@core/interfaces';\n\ninterface PageInfoBlockProps {\n  id: string;\n  newGameFunc: () => void;\n  restartGameFunc: () => void;\n  replayWord: () => void;\n}\n\nexport const PageInfoBlock: React.FC<PageInfoBlockProps> = ({\n  id = undefined,\n  newGameFunc,\n  restartGameFunc,\n  replayWord,\n}) => {\n  let textSeen: string;\n  let otherText: string;\n  const isPlaying = useSelector((store: AppState) => store.gameProcess.isPlaying);\n  const isGameStarted = useSelector((store: AppState) => store.gameProcess.isGameStarted);\n  const language = useSelector((store: AppState) => store.appConfig.language);\n\n  useEffect(() => {\n    if (isPlaying) {\n      window.scrollTo(0, 0);\n    }\n  }, [isPlaying]);\n\n  switch (id) {\n    case '1':\n      textSeen = 'Action (Set A)';\n      break;\n    case '2':\n      textSeen = 'Action (Set B)';\n      break;\n    case '3':\n      textSeen = 'Animal (Set A)';\n      break;\n    case '4':\n      textSeen = 'Animal (Set B)';\n      break;\n    case '5':\n      textSeen = 'Clothes';\n      break;\n    case '6':\n      textSeen = 'Emotions';\n      break;\n    default:\n      textSeen = '';\n      break;\n  }\n\n  switch (isPlaying) {\n    case true:\n      otherText = 'Now show your skills!';\n      break;\n    default:\n      otherText = 'Feel free to practice!';\n  }\n\n  return (\n    <div className=\"InteractiveBlock\">\n      <div>\n        <div className=\"InteractiveBox\">{!id && <h1>{language && i18next.t('hello')}</h1>}</div>\n        <div className=\"InteractiveBox mini\">\n          {!id && <h2>{language && i18next.t('chooseCategory')}</h2>}\n        </div>\n        <div className={`InteractiveBox${id ? '' : ' mini'}`}>\n          <h1>{id && `${textSeen} category. ${otherText}`}</h1>\n        </div>\n      </div>\n      <div className={`ButtonContainer${isPlaying && id && !isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`StartGameButton${isGameStarted || !isPlaying ? ' hide' : ''}`}\n          onClick={newGameFunc}\n        >\n          {language && i18next.t('start!')}\n        </button>\n      </div>\n      <div className={`inGameButtonsContainer${id && isGameStarted ? ' show' : ''}`}>\n        <button\n          type=\"button\"\n          className={`RestartGameButton${isGameStarted ? '' : ' hide'}`}\n          onClick={restartGameFunc}\n        >\n          {i18next.t('restart')}\n        </button>\n        <button\n          type=\"button\"\n          className={`ReplayButton${isGameStarted ? '' : ' hide'}`}\n          onClick={replayWord}\n        >\n          {i18next.t('replay')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const { PUBLIC_URL } = process.env;\n\nexport const correctAudioSrc = 'audio/correct.mp3';\nexport const errorAudioSrc = 'audio/error.mp3';\nexport const offlineIndicatorShowTimeout = 2000;\nexport const offlineComponentShowTimeout = 7000;\n\nexport const chancesGiven = 10; // max answers count\nexport const maxCorrectAnswers = 8; // max correct answers count\nexport const maxPercent = 100; // max percent\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport { AppState } from '../../../@core/interfaces';\nimport './CategoryCard.scss';\n\ninterface CategoryCardProps {\n  title: string;\n  image: string;\n}\n\nexport const CategoryCard: React.FC<CategoryCardProps> = ({ title, image }) => {\n  const isPlaying = useSelector((store: AppState) => store.gameProcess.isPlaying);\n\n  return (\n    <div className=\"CategoryCard\">\n      {isPlaying}\n      <div className=\"CardImageContainer\">\n        <img className=\"CardImage\" alt={title} src={`${PUBLIC_URL}/${image}`} />\n      </div>\n      <div className=\"CategoryText\">{title}</div>\n    </div>\n  );\n};\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { WordCard } from './interfaces';\n\ntype RandomizerFunc = () => number;\ntype ToArrayId = (id: string) => number;\ntype AudioFunc = (publicURL: string, src: string, mode: boolean) => void;\ntype SetAnswerFunc = (value: boolean) => void;\n\n/* eslint-disable */\ninterface GameFunction {\n  (\n    EO: React.MouseEvent | undefined,\n    cardsArray: React.MutableRefObject<WordCard[]>,\n    cardIndex: React.MutableRefObject<number>,\n    answersCount: React.MutableRefObject<number>,\n    chancesGiven: number,\n    correctAnswers: React.MutableRefObject<number>,\n    maxCorrectAnswers: number,\n    publicURL: string,\n    correctAudioSrc: string,\n    errorAudioSrc: string,\n    setAnswerFunc: SetAnswerFunc,\n    resultShowFunc: () => void\n  ): void;\n}\n/* eslint-enable */\n\nexport const randomizerFunc: RandomizerFunc = () => Math.random() - 0.5;\n// to randomize sort method\nexport const toArrayId: ToArrayId = (id: string) => Number(id) - 1;\n// to give useParam id a number value and decrease by 1 to match an array index\nconst sound = new Audio();\nexport const audioPlayFunc: AudioFunc = (publicURL, src, mode) => {\n  sound.src = `${publicURL}/${src}`;\n  sound.onloadeddata = () => {\n    let isPlaying: boolean;\n    sound.onplaying = () => {\n      isPlaying = true;\n    };\n    sound.onpause = () => {\n      isPlaying = false;\n    };\n    const playSound = () => {\n      if (sound.paused && !isPlaying) {\n        sound.play();\n      }\n    };\n    const pauseSound = () => {\n      if (!sound.paused && isPlaying) {\n        sound.pause();\n        sound.currentTime = 0;\n      }\n    };\n    if (mode) {\n      pauseSound();\n      playSound();\n    } else {\n      pauseSound();\n    }\n  };\n};\n\nlet timeOutAudio = false; // flag shows that we have a timed out audio\n// to play audio\n/* eslint-disable no-param-reassign */\nexport const gameMainFunction: GameFunction = (\n  EO,\n  cardsArray,\n  cardIndex,\n  answersCount,\n  chancesGiven,\n  correctAnswers,\n  maxCorrectAnswers,\n  publicURL,\n  correctAudioSrc,\n  errorAudioSrc,\n  setAnswerFunc,\n  resultShowFunc\n) => {\n  if (\n    cardsArray.current.length >= cardIndex.current + 1 &&\n    answersCount.current < chancesGiven &&\n    correctAnswers.current < maxCorrectAnswers\n  ) {\n    if (\n      (EO?.target as HTMLDivElement).dataset.word === cardsArray.current[cardIndex.current].word\n    ) {\n      timeOutAudio = false;\n      audioPlayFunc(publicURL, correctAudioSrc, true);\n      correctAnswers.current += 1;\n      setAnswerFunc(true);\n      cardIndex.current += 1;\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        timeOutAudio = true;\n        setTimeout(() => {\n          audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n          timeOutAudio = false;\n        }, 500);\n      } else resultShowFunc();\n    } else {\n      audioPlayFunc(publicURL, errorAudioSrc, true);\n      setAnswerFunc(false);\n      answersCount.current += 1;\n      if (\n        cardsArray.current.length >= cardIndex.current + 1 &&\n        answersCount.current < chancesGiven &&\n        correctAnswers.current < maxCorrectAnswers\n      ) {\n        if (!timeOutAudio) {\n          timeOutAudio = true;\n          setTimeout(() => {\n            audioPlayFunc(publicURL, cardsArray.current[cardIndex.current].audioSrc, true);\n            timeOutAudio = false;\n          }, 500);\n        }\n      } else resultShowFunc();\n    }\n  } else resultShowFunc();\n};\n// главная функция в игровом режиме\n/* eslint-enable */\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { PUBLIC_URL } from '../../../@core/constants';\nimport { AppState } from '../../../@core/interfaces';\nimport { audioPlayFunc } from '../../../@core/functions';\nimport './ItemCard.scss';\n\ninterface ItemCardProps {\n  word: string;\n  translation: string;\n  audio: string;\n  image: string;\n  inGameAnswer: () => void;\n}\n\nexport const ItemCard: React.FC<ItemCardProps> = ({\n  word,\n  translation,\n  audio,\n  image,\n  inGameAnswer,\n}) => {\n  const [isCardFlipped, setIsCardFlipped] = useState<boolean>(false); // we need to flip one card, not all of them\n\n  const isPlaying = useSelector((store: AppState) => store.gameProcess.isPlaying);\n  const isGameStarted = useSelector((store: AppState) => store.gameProcess.isGameStarted);\n\n  const audioPlay = () => {\n    if (!isPlaying) {\n      audioPlayFunc(PUBLIC_URL, audio, true);\n    }\n  };\n  const cardFlipper = () => {\n    audioPlayFunc(PUBLIC_URL, 'audio/cardflip.mp3', true);\n    setIsCardFlipped(!isCardFlipped);\n  };\n  const flipOnMouseLeaveOrClick = () => {\n    if (isCardFlipped === true) setIsCardFlipped(false);\n  };\n\n  return (\n    <div data-role=\"Mask\" onMouseLeave={flipOnMouseLeaveOrClick}>\n      <div className={`CardContainer${!isCardFlipped ? '' : ' flipped'}`}>\n        <div className=\"ItemCard front\">\n          <div\n            role=\"button\"\n            className={`CardImageContainer${!isPlaying ? '' : ' play'}`}\n            tabIndex={0}\n            data-word={word}\n            onClick={!isGameStarted ? audioPlay : inGameAnswer}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel\">\n              <button\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={audioPlay}\n              >\n                <img\n                  className=\"ControlPanelPlayButton\"\n                  alt=\"play-sound\"\n                  src={`${PUBLIC_URL}/play-button.png`}\n                />\n              </button>\n              <span className=\"ControlPanelText\">{word}</span>\n              <button\n                style={{ border: 'none', backgroundColor: 'rgb(248, 241, 241)' }}\n                type=\"button\"\n                onClick={cardFlipper}\n              >\n                <img\n                  className=\"ControlPanelEyeButton\"\n                  alt=\"watch-translation\"\n                  src={`${PUBLIC_URL}/eye-button.png`}\n                />\n              </button>\n            </div>\n          )}\n        </div>\n        <div className=\"ItemCard back\">\n          <div\n            role=\"button\"\n            className=\"CardImageContainer\"\n            tabIndex={0}\n            onClick={flipOnMouseLeaveOrClick}\n          >\n            <img className=\"CardImage\" alt={word} src={`${PUBLIC_URL}/${image}`} />\n          </div>\n          {!isPlaying && (\n            <div className=\"CardControlPanel flipped\">\n              <span className=\"ControlPanelText\">{translation}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","interface Categories {\n  title: string;\n  image: string;\n}\n\ninterface Card {\n  word: string;\n  translation: string;\n  image: string;\n  audioSrc: string;\n}\n\ntype Cards = Card[];\n\nexport const categories: Categories[] = [\n  {\n    title: 'Action (set A)',\n    image: 'img/action-set-a.jpg',\n  },\n  {\n    title: 'Action (set B)',\n    image: 'img/action-set-b.jpg',\n  },\n  {\n    title: 'Animal (set A)',\n    image: 'img/animal-set-a.jpg',\n  },\n  {\n    title: 'Animal (set B)',\n    image: 'img/animal-set-b.jpg',\n  },\n  {\n    title: 'Clothes',\n    image: 'img/clothes.jpg',\n  },\n  {\n    title: 'Emotions',\n    image: 'img/emotions.jpg',\n  },\n];\n\nexport const cards: Cards[] = [\n  [\n    {\n      word: 'cry',\n      translation: 'плакать',\n      image: 'img/cry.jpg',\n      audioSrc: 'audio/cry.mp3',\n    },\n    {\n      word: 'dance',\n      translation: 'танцевать',\n      image: 'img/dance.jpg',\n      audioSrc: 'audio/dance.mp3',\n    },\n    {\n      word: 'dive',\n      translation: 'нырять',\n      image: 'img/dive.jpg',\n      audioSrc: 'audio/dive.mp3',\n    },\n    {\n      word: 'draw',\n      translation: 'рисовать',\n      image: 'img/draw.jpg',\n      audioSrc: 'audio/draw.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'ловить рыбу',\n      image: 'img/fish.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'fly',\n      translation: 'летать',\n      image: 'img/fly.jpg',\n      audioSrc: 'audio/fly.mp3',\n    },\n    {\n      word: 'hug',\n      translation: 'обнимать',\n      image: 'img/hug.jpg',\n      audioSrc: 'audio/hug.mp3',\n    },\n    {\n      word: 'jump',\n      translation: 'прыгать',\n      image: 'img/jump.jpg',\n      audioSrc: 'audio/jump.mp3',\n    },\n  ],\n  [\n    {\n      word: 'open',\n      translation: 'открывать',\n      image: 'img/open.jpg',\n      audioSrc: 'audio/open.mp3',\n    },\n    {\n      word: 'play',\n      translation: 'играть',\n      image: 'img/play.jpg',\n      audioSrc: 'audio/play.mp3',\n    },\n    {\n      word: 'point',\n      translation: 'указывать',\n      image: 'img/point.jpg',\n      audioSrc: 'audio/point.mp3',\n    },\n    {\n      word: 'ride',\n      translation: 'ездить',\n      image: 'img/ride.jpg',\n      audioSrc: 'audio/ride.mp3',\n    },\n    {\n      word: 'run',\n      translation: 'бегать',\n      image: 'img/run.jpg',\n      audioSrc: 'audio/run.mp3',\n    },\n    {\n      word: 'sing',\n      translation: 'петь',\n      image: 'img/sing.jpg',\n      audioSrc: 'audio/sing.mp3',\n    },\n    {\n      word: 'skip',\n      translation: 'пропускать, прыгать',\n      image: 'img/skip.jpg',\n      audioSrc: 'audio/skip.mp3',\n    },\n    {\n      word: 'swim',\n      translation: 'плавать',\n      image: 'img/swim.jpg',\n      audioSrc: 'audio/swim.mp3',\n    },\n  ],\n  [\n    {\n      word: 'cat',\n      translation: 'кот',\n      image: 'img/cat.jpg',\n      audioSrc: 'audio/cat.mp3',\n    },\n    {\n      word: 'chick',\n      translation: 'цыплёнок',\n      image: 'img/chick.jpg',\n      audioSrc: 'audio/chick.mp3',\n    },\n    {\n      word: 'chicken',\n      translation: 'курица',\n      image: 'img/chicken.jpg',\n      audioSrc: 'audio/chicken.mp3',\n    },\n    {\n      word: 'dog',\n      translation: 'собака',\n      image: 'img/dog.jpg',\n      audioSrc: 'audio/dog.mp3',\n    },\n    {\n      word: 'horse',\n      translation: 'лошадь',\n      image: 'img/horse.jpg',\n      audioSrc: 'audio/horse.mp3',\n    },\n    {\n      word: 'pig',\n      translation: 'свинья',\n      image: 'img/pig.jpg',\n      audioSrc: 'audio/pig.mp3',\n    },\n    {\n      word: 'rabbit',\n      translation: 'кролик',\n      image: 'img/rabbit.jpg',\n      audioSrc: 'audio/rabbit.mp3',\n    },\n    {\n      word: 'sheep',\n      translation: 'овца',\n      image: 'img/sheep.jpg',\n      audioSrc: 'audio/sheep.mp3',\n    },\n  ],\n  [\n    {\n      word: 'bird',\n      translation: 'птица',\n      image: 'img/bird.jpg',\n      audioSrc: 'audio/bird.mp3',\n    },\n    {\n      word: 'fish',\n      translation: 'рыба',\n      image: 'img/fish1.jpg',\n      audioSrc: 'audio/fish.mp3',\n    },\n    {\n      word: 'frog',\n      translation: 'жаба',\n      image: 'img/frog.jpg',\n      audioSrc: 'audio/frog.mp3',\n    },\n    {\n      word: 'giraffe',\n      translation: 'жирафа',\n      image: 'img/giraffe.jpg',\n      audioSrc: 'audio/giraffe.mp3',\n    },\n    {\n      word: 'lion',\n      translation: 'лев',\n      image: 'img/lion.jpg',\n      audioSrc: 'audio/lion.mp3',\n    },\n    {\n      word: 'mouse',\n      translation: 'мышь',\n      image: 'img/mouse.jpg',\n      audioSrc: 'audio/mouse.mp3',\n    },\n    {\n      word: 'turtle',\n      translation: 'черепаха',\n      image: 'img/turtle.jpg',\n      audioSrc: 'audio/turtle.mp3',\n    },\n    {\n      word: 'dolphin',\n      translation: 'дельфин',\n      image: 'img/dolphin.jpg',\n      audioSrc: 'audio/dolphin.mp3',\n    },\n  ],\n  [\n    {\n      word: 'skirt',\n      translation: 'юбка',\n      image: 'img/skirt.jpg',\n      audioSrc: 'audio/skirt.mp3',\n    },\n    {\n      word: 'pants',\n      translation: 'брюки',\n      image: 'img/pants.jpg',\n      audioSrc: 'audio/pants.mp3',\n    },\n    {\n      word: 'blouse',\n      translation: 'блузка',\n      image: 'img/blouse.jpg',\n      audioSrc: 'audio/blouse.mp3',\n    },\n    {\n      word: 'dress',\n      translation: 'платье',\n      image: 'img/dress.jpg',\n      audioSrc: 'audio/dress.mp3',\n    },\n    {\n      word: 'boot',\n      translation: 'ботинок',\n      image: 'img/boot.jpg',\n      audioSrc: 'audio/boot.mp3',\n    },\n    {\n      word: 'shirt',\n      translation: 'рубашка',\n      image: 'img/shirt.jpg',\n      audioSrc: 'audio/shirt.mp3',\n    },\n    {\n      word: 'coat',\n      translation: 'пальто',\n      image: 'img/coat.jpg',\n      audioSrc: 'audio/coat.mp3',\n    },\n    {\n      word: 'shoe',\n      translation: 'туфли',\n      image: 'img/shoe.jpg',\n      audioSrc: 'audio/shoe.mp3',\n    },\n  ],\n  [\n    {\n      word: 'sad',\n      translation: 'грустный',\n      image: 'img/sad.jpg',\n      audioSrc: 'audio/sad.mp3',\n    },\n    {\n      word: 'angry',\n      translation: 'сердитый',\n      image: 'img/angry.jpg',\n      audioSrc: 'audio/angry.mp3',\n    },\n    {\n      word: 'happy',\n      translation: 'счастливый',\n      image: 'img/happy.jpg',\n      audioSrc: 'audio/happy.mp3',\n    },\n    {\n      word: 'tired',\n      translation: 'уставший',\n      image: 'img/tired.jpg',\n      audioSrc: 'audio/tired.mp3',\n    },\n    {\n      word: 'surprised',\n      translation: 'удивлённый',\n      image: 'img/surprised.jpg',\n      audioSrc: 'audio/surprised.mp3',\n    },\n    {\n      word: 'scared',\n      translation: 'испуганный',\n      image: 'img/scared.jpg',\n      audioSrc: 'audio/scared.mp3',\n    },\n    {\n      word: 'smile',\n      translation: 'улыбка',\n      image: 'img/smile.jpg',\n      audioSrc: 'audio/smile.mp3',\n    },\n    {\n      word: 'laugh',\n      translation: 'смех',\n      image: 'img/laugh.jpg',\n      audioSrc: 'audio/laugh.mp3',\n    },\n  ],\n];\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport i18next from 'i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Prompt } from 'react-router';\nimport { reloadOfflineAC } from '../../state/offlineAC';\nimport { loadingLineVisibilitySetAC } from '../../state/elementsVisibilityAC';\nimport { CategoryCard } from '../Card/CategoryCard/CategoryCard';\nimport { ItemCard } from '../Card/ItemCard/ItemCard';\nimport { categories, cards } from '../../cardData';\nimport { toArrayId } from '../../@core/functions';\nimport { AppState } from '../../@core/interfaces';\nimport './CardHolder.scss';\n\ninterface CardHolderProps {\n  id: string;\n  gameStepsFunc: () => void;\n}\n\nexport const CardHolder: React.FC<CardHolderProps> = ({ id, gameStepsFunc }) => {\n  const dispatch = useDispatch();\n  const isGameStarted = useSelector((store: AppState) => store.gameProcess.isGameStarted);\n  const isBlocking = useSelector((store: AppState) => store.gameProcess.isBlocking);\n  const offlineContentVisible = useSelector(\n    (store: AppState) => store.offline.offlineContentVisible\n  );\n  const forReload = useSelector((store: AppState) => store.offline.forReload);\n  const language = useSelector((store: AppState) => store.appConfig.language);\n\n  const pageReload = () => {\n    dispatch(reloadOfflineAC(!forReload));\n    dispatch(loadingLineVisibilitySetAC(true));\n    const loaderTimeout = setTimeout(() => {\n      dispatch(loadingLineVisibilitySetAC(false));\n      clearTimeout(loaderTimeout);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    if (isGameStarted) {\n      window.onbeforeunload = () => true;\n    } else {\n      window.onbeforeunload = null;\n    }\n  });\n\n  return (\n    <>\n      <Prompt when={isBlocking} message=\"You will lose your result. Are you sure?\" />\n      <div className={`CardHolder${!id ? '' : !offlineContentVisible ? ' word' : ' offline'}`}>\n        {!id &&\n          categories.map((elem, i) => {\n            const indexToId = i + 1; // for array index to match route\n            return (\n              <div className=\"Card\" key={elem.title}>\n                <Link to={`category/${indexToId}`} className=\"Link\">\n                  <CategoryCard title={elem.title} image={elem.image} />\n                </Link>\n              </div>\n            );\n          })}\n        {id &&\n          !offlineContentVisible &&\n          cards[toArrayId(id)].map((elem) => {\n            return (\n              <ItemCard\n                inGameAnswer={gameStepsFunc}\n                word={elem.word}\n                translation={elem.translation}\n                image={elem.image}\n                audio={elem.audioSrc}\n                key={elem.word}\n              />\n            );\n          })}\n        {id && offlineContentVisible && (\n          <div className=\"offlineContent\">\n            <h3 className=\"offlineContentMessage\">\n              {language && i18next.t('offlineMSG')}\n              <br />\n              {language && i18next.t('checkConnectionMSG')}\n            </h3>\n            <button type=\"button\" className=\"offlineContentReloadButton\" onClick={pageReload}>\n              {language && i18next.t('reload')}\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport i18next from 'i18next';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport { innerWidthSetAC } from '../../state/appConfigAC';\nimport './StatsBlock.scss';\nimport { AppState } from '../../@core/interfaces';\n\nexport interface StatsBlockProps {\n  id: string;\n}\n\nexport const StatsBlock: React.FC<StatsBlockProps> = ({ id }) => {\n  const dispatch = useDispatch();\n  const isGameStarted = useSelector((store: AppState) => store.gameProcess.isGameStarted);\n  const innerWidth = useSelector((store: AppState) => store.appConfig.innerWidth);\n  const answers = useSelector((store: AppState) => store.gameProcess.answers);\n  const triggerWidth = 820; // changes stats block style at this point\n\n  function setWindowInnerWidth(): void {\n    dispatch(innerWidthSetAC(window.innerWidth));\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  });\n\n  useEffect(() => {\n    dispatch(innerWidthSetAC(window.innerWidth));\n    window.addEventListener('load', setWindowInnerWidth, false);\n    return () => window.removeEventListener('resize', setWindowInnerWidth, false);\n  });\n  return (\n    <div className={`StatsBlockContainer${innerWidth <= triggerWidth ? ' mini' : ''}`}>\n      {innerWidth > triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('answers')}</span>\n          </div>\n          {isGameStarted &&\n            answers.map((el, i) => {\n              return (\n                <div className=\"IconContainer\" key={`key${i + 1}`}>\n                  <img\n                    className=\"Icon\"\n                    alt={`icon${i}`}\n                    src={`${PUBLIC_URL}/img/${el === true ? 'correct.png' : 'wrong.png'}`}\n                  />\n                </div>\n              );\n            })}\n        </div>\n      )}\n      {innerWidth <= triggerWidth && (\n        <div className={`StatsBlock${isGameStarted && id ? ' game mini' : ''}`}>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('correct')}</span>\n          </div>\n          <div className={`TextStatsBlock${isGameStarted && id ? ' game' : ''}`}>\n            <span>{i18next.t('wrong')}</span>\n          </div>\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game correct' : ''}`}>\n              {answers.filter((el) => el === true).length}\n            </div>\n          )}\n          {isGameStarted && (\n            <div className={`NumberStats${isGameStarted && id ? ' game wrong' : ''}`}>\n              {answers.filter((el) => el === false).length}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useRef, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PageInfoBlock } from '../PageInfoBlock/PageInfoBlock';\nimport { CardHolder } from '../Cardholder/CardHolder';\nimport { StatsBlock } from '../StatsBlock/StatsBlock';\nimport { cards } from '../../cardData';\nimport { clearAnswersAC, addAnswerAC } from '../../state/gameProcessAC';\nimport { randomizerFunc, toArrayId, audioPlayFunc, gameMainFunction } from '../../@core/functions';\nimport { GetResult, MatchParams, WordCard, AppState } from '../../@core/interfaces';\nimport {\n  PUBLIC_URL,\n  correctAudioSrc,\n  errorAudioSrc,\n  chancesGiven,\n  maxCorrectAnswers,\n  maxPercent,\n} from '../../@core/constants';\nimport './MainPage.scss';\n\ninterface MainPageProps {\n  gameStartedToggle: () => void;\n  resultScreenVisibilityToggle: () => void;\n  getResult: GetResult;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const MainPage: React.FC<MainPageProps> = ({\n  gameStartedToggle,\n  resultScreenVisibilityToggle,\n  getResult,\n  setIsBlockingToggle,\n}) => {\n  const dispatch = useDispatch();\n  const isPlaying = useSelector((store: AppState) => store.gameProcess.isPlaying);\n  const isGameStarted = useSelector((store: AppState) => store.gameProcess.isGameStarted);\n\n  const idParam = useParams<MatchParams>();\n\n  const cardsArrS = useRef<WordCard[]>([]);\n  const finalResult = useRef<string>('');\n  const cardIndex = useRef<number>(0);\n  const correctAnswers = useRef<number>(0);\n  const answersCount = useRef<number>(0);\n\n  const setAnswer = (value: boolean) => dispatch(addAnswerAC(value));\n\n  const clearAll = () => {\n    dispatch(clearAnswersAC([]));\n    cardsArrS.current = [];\n    cardIndex.current = 0;\n    answersCount.current = 0;\n    finalResult.current = '';\n    correctAnswers.current = 0;\n  };\n\n  const resultScreenShow = () => {\n    finalResult.current = `${(maxPercent / maxCorrectAnswers) * correctAnswers.current}%`;\n    getResult(finalResult.current);\n    resultScreenVisibilityToggle();\n    setIsBlockingToggle(false);\n  };\n\n  const gameStepsFunc = (EO?: React.MouseEvent) => {\n    gameMainFunction(\n      EO,\n      cardsArrS,\n      cardIndex,\n      answersCount,\n      chancesGiven,\n      correctAnswers,\n      maxCorrectAnswers,\n      PUBLIC_URL,\n      correctAudioSrc,\n      errorAudioSrc,\n      setAnswer,\n      resultScreenShow\n    );\n  };\n\n  const startGameFunc = () => {\n    cardsArrS.current = cards[toArrayId(idParam.id)].slice().sort(randomizerFunc);\n    if (cardsArrS) audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const replayWord = () => {\n    audioPlayFunc(PUBLIC_URL, cardsArrS.current[cardIndex.current].audioSrc, true);\n  };\n\n  const restartGameFunc = () => {\n    clearAll();\n    startGameFunc();\n  };\n\n  const newGameFunc = () => {\n    clearAll();\n    gameStartedToggle();\n    startGameFunc();\n    setIsBlockingToggle(true);\n  };\n\n  useEffect(() => {\n    clearAll();\n    setIsBlockingToggle(false);\n    if (isGameStarted) gameStartedToggle();\n  }, [idParam.id]);\n\n  return (\n    <div className=\"MainPage\">\n      <PageInfoBlock\n        id={idParam.id}\n        newGameFunc={newGameFunc}\n        restartGameFunc={restartGameFunc}\n        replayWord={replayWord}\n      />\n      <CardHolder id={idParam.id} gameStepsFunc={gameStepsFunc} />\n      {isPlaying && <StatsBlock id={idParam.id} />}\n    </div>\n  );\n};\n","import React from 'react';\nimport Switch from 'react-switch';\nimport i18next from 'i18next';\nimport { useSelector } from 'react-redux';\nimport { PUBLIC_URL } from '../../@core/constants';\nimport { AppState } from '../../@core/interfaces';\nimport './Header.scss';\n\ninterface HeaderProps {\n  sideBarToggle: () => void;\n  setModeToggle: () => void;\n  // eslint-disable-next-line no-unused-vars\n  setIsBlockingToggle: (arg: boolean) => void;\n}\n\nexport const Header: React.FC<HeaderProps> = ({\n  setIsBlockingToggle,\n  sideBarToggle,\n  setModeToggle,\n}) => {\n  const isPlaying = useSelector((store: AppState) => store.gameProcess.isPlaying);\n  const isGameStarted = useSelector((store: AppState) => store.gameProcess.isGameStarted);\n  const offlineContentVisible = useSelector(\n    (store: AppState) => store.offline.offlineContentVisible\n  );\n  const language = useSelector((store: AppState) => store.appConfig.language);\n\n  const checkToggle = () => {\n    if (isGameStarted && isPlaying) {\n      setIsBlockingToggle(false);\n      setModeToggle();\n    } else setModeToggle();\n  };\n  return (\n    <div className=\"Header\" style={{ backgroundImage: `url(${PUBLIC_URL}/background.jpg)` }}>\n      <div role=\"button\" className=\"SideBarOpenButton\" onClick={sideBarToggle} aria-hidden=\"true\">\n        {language && i18next.t('sidebarSticks')}\n      </div>\n      {!offlineContentVisible && (\n        <div className=\"ModeSelector\">\n          <span className=\"ModeText\">{isPlaying ? 'PLAY' : 'TRAIN'}</span>\n          <Switch\n            onHandleColor=\"#FFFFFF\"\n            onColor=\"#99AE99\"\n            uncheckedIcon={false}\n            checkedIcon={false}\n            checked={isPlaying}\n            className=\"Switch\"\n            onChange={checkToggle}\n            height={20}\n            width={48}\n            handleDiameter={18}\n            boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.2)\"\n            activeBoxShadow=\"0px 0px 1px 5px rgba(0, 52, 0, 0.4)\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect } from 'react';\nimport i18next from 'i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { networkIndicatorVisibilitySetAC } from '../../state/elementsVisibilityAC';\nimport './NetworkIndicator.scss';\nimport { offlineIndicatorShowTimeout } from '../../@core/constants';\nimport { AppState } from '../../@core/interfaces';\n\nexport const NetworkIndicator: React.FC = () => {\n  const dispatch = useDispatch();\n  const isOffline = useSelector((store: AppState) => store.offline.isOffline);\n  const indicatorVisibility = useSelector(\n    (store: AppState) => store.elementVisibility.indicatorVisibility\n  );\n\n  const indicatorViewToggle = (flag: boolean) => {\n    dispatch(networkIndicatorVisibilitySetAC(flag));\n  };\n\n  useEffect(() => {\n    let indicatorTimeout: NodeJS.Timeout;\n    if (isOffline) {\n      indicatorTimeout = setTimeout(() => indicatorViewToggle(true), offlineIndicatorShowTimeout);\n    } else {\n      indicatorViewToggle(false);\n    }\n    return () => clearTimeout(indicatorTimeout);\n  }, [isOffline]);\n\n  return (\n    <div className={`IndicatorContainer${indicatorVisibility ? ' view' : ' hide'}`}>\n      <div className=\"IndicatorText\">\n        <span>{i18next.t('offline')}</span>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport i18next from 'i18next';\nimport { useSelector } from 'react-redux';\nimport { categories } from '../../cardData';\nimport './SideBar.scss';\nimport { AppState } from '../../@core/interfaces';\n\ninterface SideBarProps {\n  cbToggle: () => void;\n}\n\nexport const SideBar: React.FC<SideBarProps> = ({ cbToggle }) => {\n  const isPlaying = useSelector((store: AppState) => store.gameProcess.isPlaying);\n  return (\n    <div className=\"SideBarContainer\">\n      <div\n        style={{\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'end',\n          marginTop: '10px',\n        }}\n      >\n        <button\n          type=\"button\"\n          className={`SideBarMenuItem${isPlaying ? ' close play' : ' close'}`}\n          onClick={cbToggle}\n        >\n          &#9668;\n        </button>\n      </div>\n      <ul>\n        <li>\n          <NavLink\n            to=\"/\"\n            onClick={cbToggle}\n            className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n          >\n            {i18next.t('mainPage')}\n          </NavLink>\n        </li>\n\n        {categories.map((elem, i) => {\n          return (\n            <li key={elem.title}>\n              <NavLink\n                to={`/category/${i + 1}`} // +1 cause of array starts on index 0\n                onClick={cbToggle}\n                className={`SideBarMenuItem${isPlaying ? ' play' : ''}`}\n              >\n                {elem.title}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './LoadingLine.scss';\nimport { AppState } from '../../@core/interfaces';\n\nexport const LoadingLine: React.FC = () => {\n  const showLoadingLine = useSelector(\n    (store: AppState) => store.elementVisibility.loadingLineVisibility\n  );\n\n  return (\n    <div className={`Loader${showLoadingLine ? ' show' : ' hide'}`}>\n      <div className={`LoaderElement${showLoadingLine ? ' show' : ' hide'}`} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport i18next from 'i18next';\nimport './ResultScreen.scss';\nimport { AppState } from '../../@core/interfaces';\n\ninterface ResultScreenProps {\n  resultScreenVisibilityToggle: () => void;\n  finalResult: string;\n}\n\nexport const ResultScreen: React.FC<ResultScreenProps> = ({\n  resultScreenVisibilityToggle,\n  finalResult,\n}) => {\n  const resultScreenVisible = useSelector(\n    (store: AppState) => store.elementVisibility.resultScreenVisible\n  );\n\n  return (\n    <div className={`ResultScreen${resultScreenVisible ? ' view' : ' hide'}`}>\n      <div className=\"ResultPercent\">\n        <h2>{i18next.t('result')}</h2>\n        <h1>{finalResult}</h1>\n        <button type=\"button\" onClick={resultScreenVisibilityToggle}>\n          {i18next.t('close')}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport i18next from 'i18next';\nimport { useSelector } from 'react-redux';\nimport './UpdateSWMessage.scss';\nimport { AppState } from '../../@core/interfaces';\n\nexport interface UpdateSWMessageProps {\n  onReloadCancel: () => void;\n}\n\nexport const UpdateSWMessage: React.FC<UpdateSWMessageProps> = ({ onReloadCancel }) => {\n  const swModaleVisible = useSelector((store: AppState) => store.elementVisibility.swModaleVisible);\n\n  return (\n    <div className={`UpdateSWContainer${swModaleVisible ? ' view' : ' hide'}`}>\n      <div className=\"UpdateSWMessage\">\n        <span>{i18next.t('swReloadMessage')}</span>\n        <div className=\"UpdateSWButtons\">\n          <button className=\"UpdateButton\" id=\"okButton\" type=\"button\">\n            {i18next.t('ok')}\n          </button>\n          <button className=\"UpdateButton\" type=\"button\" onClick={onReloadCancel}>\n            {i18next.t('cancel')}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport i18next from 'i18next';\nimport { languageSetAC } from './state/appConfigAC';\nimport {\n  isPlayingSetAC,\n  isGameStartedSetAC,\n  isBlockingSetAC,\n  setResultAC,\n} from './state/gameProcessAC';\nimport {\n  sideBarVisibilitySetAC,\n  resultScreenVisibilitySetAC,\n  swModaleVisibilitySetAC,\n} from './state/elementsVisibilityAC';\nimport { isOfflineSetAC, isOfflineContentVisibleSetAC } from './state/offlineAC';\nimport { MainPage } from './components/MainPage/MainPage';\nimport { Header } from './components/Header/Header';\nimport { NetworkIndicator } from './components/NetworkIndicator/NetworkIndicator';\nimport { SideBar } from './components/SideBar/SideBar';\nimport { LoadingLine } from './components/LoadingLine/LoadingLine';\nimport { ResultScreen } from './components/ResultScreen/ResultScreen';\nimport { UpdateSWMessage } from './components/UpdateSWMessage/UpdateSWMessage';\nimport { PUBLIC_URL, offlineComponentShowTimeout } from './@core/constants';\nimport { GetResult, AppState } from './@core/interfaces';\nimport data from './en.json';\nimport './App.scss';\nimport './components/SideBar/SideBar.scss';\nimport * as serviceWorkerRegistration from './service-worker-registration';\n\nconst App: React.FC = () => {\n  // *****************************STATE****************************\n  const dispatch = useDispatch();\n  const isPlaying = useSelector((store: AppState) => store.gameProcess.isPlaying);\n  const isGameStarted = useSelector((store: AppState) => store.gameProcess.isGameStarted);\n  const sideBarVisible = useSelector((store: AppState) => store.elementVisibility.sideBarVisible);\n  const resultScreenVisible = useSelector(\n    (store: AppState) => store.elementVisibility.resultScreenVisible\n  );\n  const isOffline = useSelector((store: AppState) => store.offline.isOffline);\n  const result = useSelector((store: AppState) => store.gameProcess.result);\n\n  // const [showLoadingLine, loaderView] = useState(false);\n\n  // ********************CALLBACKS******************************\n\n  const setAppLanguage = (lang: string) => {\n    i18next.init({\n      lng: lang,\n      resources: data,\n    });\n    dispatch(languageSetAC(lang));\n  };\n  const offlineContentVisibilityToggle = (flag: boolean) => {\n    dispatch(isOfflineContentVisibleSetAC(flag));\n  };\n\n  const setIsOffline = () => dispatch(isOfflineSetAC(true));\n  const setIsOnline = () => {\n    dispatch(isOfflineSetAC(false));\n    offlineContentVisibilityToggle(false);\n  };\n  const sideBarToggle = () => dispatch(sideBarVisibilitySetAC(!sideBarVisible));\n  const setModaleViewToggle = (value: boolean) => dispatch(swModaleVisibilitySetAC(value));\n  const setMode = () => {\n    dispatch(isPlayingSetAC(!isPlaying));\n    if (isGameStarted === true) dispatch(isGameStartedSetAC(false));\n  };\n  const gameStartedToggle = () => {\n    dispatch(isGameStartedSetAC(!isGameStarted));\n    dispatch(setResultAC(''));\n  };\n\n  const resultScreenVisibilityToggle = () => {\n    dispatch(resultScreenVisibilitySetAC(!resultScreenVisible));\n    if (isPlaying) setMode();\n  };\n  const getResult: GetResult = (res) => dispatch(setResultAC(res));\n  const setIsBlockingToggle = (flag: boolean) => dispatch(isBlockingSetAC(flag));\n\n  useEffect(() => {\n    window.addEventListener('offline', setIsOffline);\n    return () => window.removeEventListener('offline', setIsOffline);\n  });\n\n  useEffect(() => {\n    window.addEventListener('online', setIsOnline);\n    return () => window.removeEventListener('online', setIsOnline);\n  });\n\n  useEffect(() => {\n    setAppLanguage('en');\n  });\n\n  useEffect(() => {\n    // eslint-disable-next-line no-undef\n    let offlineContentTimeout: NodeJS.Timeout;\n    if (isOffline) {\n      offlineContentTimeout = setTimeout(\n        () => offlineContentVisibilityToggle(true),\n        offlineComponentShowTimeout\n      );\n    }\n    return () => clearTimeout(offlineContentTimeout);\n  }, [isOffline]);\n\n  const askUserToUpdate = (reg: ServiceWorkerRegistration) => {\n    setModaleViewToggle(true);\n    const okButton = document.getElementById('okButton') as HTMLButtonElement;\n    okButton.onclick = () => {\n      reg.waiting?.postMessage({ type: 'SKIP_WAITING' });\n      setModaleViewToggle(false);\n    };\n  };\n\n  serviceWorkerRegistration.register(askUserToUpdate);\n\n  const onReloadCancel = () => {\n    setModaleViewToggle(false);\n  };\n\n  navigator.serviceWorker.addEventListener('controllerchange', () => {\n    window.location.reload();\n  });\n\n  return (\n    <BrowserRouter basename={PUBLIC_URL}>\n      <div\n        className=\"App\"\n        style={{\n          backgroundImage: `url(${PUBLIC_URL}/background.jpg`,\n          backgroundRepeat: 'repeat',\n          backgroundAttachment: 'fixed',\n        }}\n      >\n        <header>\n          <div className={`${sideBarVisible ? 'SideBar active' : 'SideBar'}`}>\n            <SideBar cbToggle={sideBarToggle} />\n          </div>\n          <Header\n            setIsBlockingToggle={setIsBlockingToggle}\n            sideBarToggle={sideBarToggle}\n            setModeToggle={setMode}\n          />\n        </header>\n        <main>\n          <LoadingLine />\n          <UpdateSWMessage onReloadCancel={onReloadCancel} />\n          <NetworkIndicator />\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <MainPage\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                setIsBlockingToggle={setIsBlockingToggle}\n              />\n            )}\n          />\n          <Route\n            path=\"/category/:id\"\n            render={() => (\n              <MainPage\n                gameStartedToggle={gameStartedToggle}\n                resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n                getResult={getResult}\n                setIsBlockingToggle={setIsBlockingToggle}\n              />\n            )}\n          />\n          <ResultScreen\n            resultScreenVisibilityToggle={resultScreenVisibilityToggle}\n            finalResult={result}\n          />\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-unused-vars */\nexport function register(updateAskFunc: (reg: ServiceWorkerRegistration) => void): void {\n  window.addEventListener('load', async () => {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      try {\n        const reg = await navigator.serviceWorker.register(\n          `${process.env.PUBLIC_URL}/service-worker.js`\n        );\n        reg.onupdatefound = () => {\n          const installingWorker = reg.installing;\n          if (installingWorker) {\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                updateAskFunc(reg); // shows update message\n              }\n            };\n          }\n        };\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('fail', e);\n      }\n    }\n  });\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport combinedReducer from './state/reducers';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(combinedReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}